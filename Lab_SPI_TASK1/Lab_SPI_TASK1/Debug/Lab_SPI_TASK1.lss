
Lab_SPI_TASK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000099e  00000a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800116  00800116  00000a48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d17  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ff  00000000  00000000  0000190b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075e  00000000  00000000  00001d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d3  00000000  00000000  00002a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
  9e:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	LcdCommandWrite(0x01);
}

void LCDhome(void) //LCD cursor home
{
	LcdCommandWrite(0x02);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDstring>:
}

void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
	register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	81 f0       	breq	.+32     	; 0x21e <LCDstring+0x2c>

	// print data
	for(i=0; i<nBytes; i++)
 1fe:	66 23       	and	r22, r22
 200:	71 f0       	breq	.+28     	; 0x21e <LCDstring+0x2c>
 202:	ec 01       	movw	r28, r24
 204:	61 50       	subi	r22, 0x01	; 1
 206:	06 2f       	mov	r16, r22
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	08 0f       	add	r16, r24
 210:	19 1f       	adc	r17, r25
	{
		LcdDataWrite(data[i]);
 212:	89 91       	ld	r24, Y+
 214:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 218:	c0 17       	cp	r28, r16
 21a:	d1 07       	cpc	r29, r17
 21c:	d1 f7       	brne	.-12     	; 0x212 <LCDstring+0x20>
	{
		LcdDataWrite(data[i]);
	}
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <LCDGotoXY>:

void LCDGotoXY(uint8_t x, uint8_t y) //Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 228:	61 30       	cpi	r22, 0x01	; 1
 22a:	09 f4       	brne	.+2      	; 0x22e <LCDGotoXY+0x6>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 22c:	80 5c       	subi	r24, 0xC0	; 192
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LcdCommandWrite(1<<LCD_DDRAM | DDRAMAddr);	
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 234:	08 95       	ret

00000236 <printString>:
	
	if(PINB & (1<<SPI_SS))
	SPDR = cData;
	
	if((SPSR & (1<<SPIF)))
	data_byte = SPDR; 
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	8c 01       	movw	r16, r24
 244:	7c 01       	movw	r14, r24
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	06 c0       	rjmp	.+12     	; 0x258 <printString+0x22>
 24c:	f7 01       	movw	r30, r14
 24e:	81 91       	ld	r24, Z+
 250:	7f 01       	movw	r14, r30
 252:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	f8 01       	movw	r30, r16
 25a:	01 90       	ld	r0, Z+
 25c:	00 20       	and	r0, r0
 25e:	e9 f7       	brne	.-6      	; 0x25a <printString+0x24>
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	e0 1b       	sub	r30, r16
 264:	f1 0b       	sbc	r31, r17
 266:	ce 17       	cp	r28, r30
 268:	df 07       	cpc	r29, r31
 26a:	80 f3       	brcs	.-32     	; 0x24c <printString+0x16>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	08 95       	ret

0000027a <initialize_all>:
 27a:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 1b 01 	call	0x236	; 0x236 <printString>
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
 296:	89 e0       	ldi	r24, 0x09	; 9
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 1b 01 	call	0x236	; 0x236 <printString>
 29e:	ec e7       	ldi	r30, 0x7C	; 124
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	86 60       	ori	r24, 0x06	; 6
 2a6:	80 83       	st	Z, r24
 2a8:	ea e7       	ldi	r30, 0x7A	; 122
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	87 60       	ori	r24, 0x07	; 7
 2b0:	80 83       	st	Z, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	80 83       	st	Z, r24
 2b8:	84 b1       	in	r24, 0x04	; 4
 2ba:	8c 61       	ori	r24, 0x1C	; 28
 2bc:	84 b9       	out	0x04, r24	; 4
 2be:	8c b5       	in	r24, 0x2c	; 44
 2c0:	83 65       	ori	r24, 0x53	; 83
 2c2:	8c bd       	out	0x2c, r24	; 44
 2c4:	08 95       	ret

000002c6 <SPI_Master_Transceiver>:
}


uint8_t SPI_Master_Transceiver(uint8_t cData)
{
	PORTB &= ~(1<<SPI_SS);					  // Slave select is pulled low.
 2c6:	2a 98       	cbi	0x05, 2	; 5
	SPDR = cData;                             // Data gets ready for transmission.
 2c8:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));               // Wait till transmission is finished.
 2ca:	0d b4       	in	r0, 0x2d	; 45
 2cc:	07 fe       	sbrs	r0, 7
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <SPI_Master_Transceiver+0x4>
	PORTB |= (1<<SPI_SS);                     // Slave is pulled high.
 2d0:	2a 9a       	sbi	0x05, 2	; 5
	
	return SPDR;                              // The value is transmitted. 
 2d2:	8e b5       	in	r24, 0x2e	; 46
}
 2d4:	08 95       	ret

000002d6 <analog_to_digital>:

void analog_to_digital()
{
	ADCSRA |= 1<<ADSC;                        // Analog to digital conversion.
 2d6:	ea e7       	ldi	r30, 0x7A	; 122
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADSC)));              // Wait until the conversion is complete.
 2e0:	80 81       	ld	r24, Z
 2e2:	86 fd       	sbrc	r24, 6
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <analog_to_digital+0xa>
	
	Ain = (ADCL);
 2e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Ain+0x1>
 2f0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Ain>
	Ain |= (ADCH<<8);
 2f4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2f8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Ain>
 2fc:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Ain+0x1>
 300:	92 2b       	or	r25, r18
 302:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Ain+0x1>
 306:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Ain>
 30a:	08 95       	ret

0000030c <print_master_slave>:
}

void print_master_slave()
{
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	// Printing the value for the master.
	
	sprintf(buffer, "%d ", (Ain>>2));
 314:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Ain>
 318:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Ain+0x1>
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	01 e1       	ldi	r16, 0x11	; 17
 32a:	11 e0       	ldi	r17, 0x01	; 1
 32c:	1f 93       	push	r17
 32e:	0f 93       	push	r16
 330:	c8 e1       	ldi	r28, 0x18	; 24
 332:	d1 e0       	ldi	r29, 0x01	; 1
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	0e 94 f5 01 	call	0x3ea	; 0x3ea <sprintf>
	LCDGotoXY(8,0);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	88 e0       	ldi	r24, 0x08	; 8
 340:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
	LCDstring((uint8_t*)buffer, strlen(buffer));
 344:	fe 01       	movw	r30, r28
 346:	01 90       	ld	r0, Z+
 348:	00 20       	and	r0, r0
 34a:	e9 f7       	brne	.-6      	; 0x346 <print_master_slave+0x3a>
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	bf 01       	movw	r22, r30
 350:	68 51       	subi	r22, 0x18	; 24
 352:	71 40       	sbci	r23, 0x01	; 1
 354:	ce 01       	movw	r24, r28
 356:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDstring>
	
	
	// Printing the value for the slave.
	
	sprintf(buffer, "%d ", data_byte); 
 35a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0x1>
 35e:	8f 93       	push	r24
 360:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 364:	8f 93       	push	r24
 366:	1f 93       	push	r17
 368:	0f 93       	push	r16
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <sprintf>
	LCDGotoXY(8,1);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
	LCDstring((uint8_t*)buffer,strlen(buffer));
 37a:	09 90       	ld	r0, Y+
 37c:	00 20       	and	r0, r0
 37e:	e9 f7       	brne	.-6      	; 0x37a <print_master_slave+0x6e>
 380:	21 97       	sbiw	r28, 0x01	; 1
 382:	be 01       	movw	r22, r28
 384:	68 51       	subi	r22, 0x18	; 24
 386:	71 40       	sbci	r23, 0x01	; 1
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDstring>
 390:	8d b7       	in	r24, 0x3d	; 61
 392:	9e b7       	in	r25, 0x3e	; 62
 394:	0c 96       	adiw	r24, 0x0c	; 12
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	9e bf       	out	0x3e, r25	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	8d bf       	out	0x3d, r24	; 61
	
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <main>:

int main(void)
{
    initialize_all();
 3aa:	0e 94 3d 01 	call	0x27a	; 0x27a <initialize_all>
	sei();
 3ae:	78 94       	sei
	
    while (1) 
    {
		analog_to_digital();
 3b0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <analog_to_digital>
		
		data_byte = SPI_Master_Transceiver(Ain>>2);        // Only use this if you want to work as a master.
 3b4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Ain>
 3b8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Ain+0x1>
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SPI_Master_Transceiver>
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 3ce:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
		// SPI_Slave_Transceiver(Ain>>2);                     Only use this if you want to work as a slave.
		
		print_master_slave();
 3d2:	0e 94 86 01 	call	0x30c	; 0x30c <print_master_slave>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	81 ee       	ldi	r24, 0xE1	; 225
 3da:	94 e0       	ldi	r25, 0x04	; 4
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x32>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x3c>
 3e6:	00 00       	nop
 3e8:	e3 cf       	rjmp	.-58     	; 0x3b0 <main+0x6>

000003ea <sprintf>:
 3ea:	ae e0       	ldi	r26, 0x0E	; 14
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	eb ef       	ldi	r30, 0xFB	; 251
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	0c 94 a4 04 	jmp	0x948	; 0x948 <__prologue_saves__+0x1c>
 3f6:	0d 89       	ldd	r16, Y+21	; 0x15
 3f8:	1e 89       	ldd	r17, Y+22	; 0x16
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	8c 83       	std	Y+4, r24	; 0x04
 3fe:	1a 83       	std	Y+2, r17	; 0x02
 400:	09 83       	std	Y+1, r16	; 0x01
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	9f e7       	ldi	r25, 0x7F	; 127
 406:	9e 83       	std	Y+6, r25	; 0x06
 408:	8d 83       	std	Y+5, r24	; 0x05
 40a:	ae 01       	movw	r20, r28
 40c:	47 5e       	subi	r20, 0xE7	; 231
 40e:	5f 4f       	sbci	r21, 0xFF	; 255
 410:	6f 89       	ldd	r22, Y+23	; 0x17
 412:	78 8d       	ldd	r23, Y+24	; 0x18
 414:	ce 01       	movw	r24, r28
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	0e 94 18 02 	call	0x430	; 0x430 <vfprintf>
 41c:	2f 81       	ldd	r18, Y+7	; 0x07
 41e:	38 85       	ldd	r19, Y+8	; 0x08
 420:	f8 01       	movw	r30, r16
 422:	e2 0f       	add	r30, r18
 424:	f3 1f       	adc	r31, r19
 426:	10 82       	st	Z, r1
 428:	2e 96       	adiw	r28, 0x0e	; 14
 42a:	e4 e0       	ldi	r30, 0x04	; 4
 42c:	0c 94 c0 04 	jmp	0x980	; 0x980 <__epilogue_restores__+0x1c>

00000430 <vfprintf>:
 430:	ac e0       	ldi	r26, 0x0C	; 12
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ee e1       	ldi	r30, 0x1E	; 30
 436:	f2 e0       	ldi	r31, 0x02	; 2
 438:	0c 94 96 04 	jmp	0x92c	; 0x92c <__prologue_saves__>
 43c:	7c 01       	movw	r14, r24
 43e:	6b 01       	movw	r12, r22
 440:	8a 01       	movw	r16, r20
 442:	fc 01       	movw	r30, r24
 444:	17 82       	std	Z+7, r1	; 0x07
 446:	16 82       	std	Z+6, r1	; 0x06
 448:	83 81       	ldd	r24, Z+3	; 0x03
 44a:	81 ff       	sbrs	r24, 1
 44c:	bd c1       	rjmp	.+890    	; 0x7c8 <vfprintf+0x398>
 44e:	ce 01       	movw	r24, r28
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	4c 01       	movw	r8, r24
 454:	f7 01       	movw	r30, r14
 456:	93 81       	ldd	r25, Z+3	; 0x03
 458:	f6 01       	movw	r30, r12
 45a:	93 fd       	sbrc	r25, 3
 45c:	85 91       	lpm	r24, Z+
 45e:	93 ff       	sbrs	r25, 3
 460:	81 91       	ld	r24, Z+
 462:	6f 01       	movw	r12, r30
 464:	88 23       	and	r24, r24
 466:	09 f4       	brne	.+2      	; 0x46a <vfprintf+0x3a>
 468:	ab c1       	rjmp	.+854    	; 0x7c0 <vfprintf+0x390>
 46a:	85 32       	cpi	r24, 0x25	; 37
 46c:	39 f4       	brne	.+14     	; 0x47c <vfprintf+0x4c>
 46e:	93 fd       	sbrc	r25, 3
 470:	85 91       	lpm	r24, Z+
 472:	93 ff       	sbrs	r25, 3
 474:	81 91       	ld	r24, Z+
 476:	6f 01       	movw	r12, r30
 478:	85 32       	cpi	r24, 0x25	; 37
 47a:	29 f4       	brne	.+10     	; 0x486 <vfprintf+0x56>
 47c:	b7 01       	movw	r22, r14
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 484:	e7 cf       	rjmp	.-50     	; 0x454 <vfprintf+0x24>
 486:	51 2c       	mov	r5, r1
 488:	31 2c       	mov	r3, r1
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	20 32       	cpi	r18, 0x20	; 32
 48e:	a0 f4       	brcc	.+40     	; 0x4b8 <vfprintf+0x88>
 490:	8b 32       	cpi	r24, 0x2B	; 43
 492:	69 f0       	breq	.+26     	; 0x4ae <vfprintf+0x7e>
 494:	30 f4       	brcc	.+12     	; 0x4a2 <vfprintf+0x72>
 496:	80 32       	cpi	r24, 0x20	; 32
 498:	59 f0       	breq	.+22     	; 0x4b0 <vfprintf+0x80>
 49a:	83 32       	cpi	r24, 0x23	; 35
 49c:	69 f4       	brne	.+26     	; 0x4b8 <vfprintf+0x88>
 49e:	20 61       	ori	r18, 0x10	; 16
 4a0:	2c c0       	rjmp	.+88     	; 0x4fa <vfprintf+0xca>
 4a2:	8d 32       	cpi	r24, 0x2D	; 45
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <vfprintf+0x84>
 4a6:	80 33       	cpi	r24, 0x30	; 48
 4a8:	39 f4       	brne	.+14     	; 0x4b8 <vfprintf+0x88>
 4aa:	21 60       	ori	r18, 0x01	; 1
 4ac:	26 c0       	rjmp	.+76     	; 0x4fa <vfprintf+0xca>
 4ae:	22 60       	ori	r18, 0x02	; 2
 4b0:	24 60       	ori	r18, 0x04	; 4
 4b2:	23 c0       	rjmp	.+70     	; 0x4fa <vfprintf+0xca>
 4b4:	28 60       	ori	r18, 0x08	; 8
 4b6:	21 c0       	rjmp	.+66     	; 0x4fa <vfprintf+0xca>
 4b8:	27 fd       	sbrc	r18, 7
 4ba:	27 c0       	rjmp	.+78     	; 0x50a <vfprintf+0xda>
 4bc:	30 ed       	ldi	r19, 0xD0	; 208
 4be:	38 0f       	add	r19, r24
 4c0:	3a 30       	cpi	r19, 0x0A	; 10
 4c2:	78 f4       	brcc	.+30     	; 0x4e2 <vfprintf+0xb2>
 4c4:	26 ff       	sbrs	r18, 6
 4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <vfprintf+0xa4>
 4c8:	fa e0       	ldi	r31, 0x0A	; 10
 4ca:	5f 9e       	mul	r5, r31
 4cc:	30 0d       	add	r19, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	53 2e       	mov	r5, r19
 4d2:	13 c0       	rjmp	.+38     	; 0x4fa <vfprintf+0xca>
 4d4:	8a e0       	ldi	r24, 0x0A	; 10
 4d6:	38 9e       	mul	r3, r24
 4d8:	30 0d       	add	r19, r0
 4da:	11 24       	eor	r1, r1
 4dc:	33 2e       	mov	r3, r19
 4de:	20 62       	ori	r18, 0x20	; 32
 4e0:	0c c0       	rjmp	.+24     	; 0x4fa <vfprintf+0xca>
 4e2:	8e 32       	cpi	r24, 0x2E	; 46
 4e4:	21 f4       	brne	.+8      	; 0x4ee <vfprintf+0xbe>
 4e6:	26 fd       	sbrc	r18, 6
 4e8:	6b c1       	rjmp	.+726    	; 0x7c0 <vfprintf+0x390>
 4ea:	20 64       	ori	r18, 0x40	; 64
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <vfprintf+0xca>
 4ee:	8c 36       	cpi	r24, 0x6C	; 108
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <vfprintf+0xc6>
 4f2:	20 68       	ori	r18, 0x80	; 128
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <vfprintf+0xca>
 4f6:	88 36       	cpi	r24, 0x68	; 104
 4f8:	41 f4       	brne	.+16     	; 0x50a <vfprintf+0xda>
 4fa:	f6 01       	movw	r30, r12
 4fc:	93 fd       	sbrc	r25, 3
 4fe:	85 91       	lpm	r24, Z+
 500:	93 ff       	sbrs	r25, 3
 502:	81 91       	ld	r24, Z+
 504:	6f 01       	movw	r12, r30
 506:	81 11       	cpse	r24, r1
 508:	c1 cf       	rjmp	.-126    	; 0x48c <vfprintf+0x5c>
 50a:	98 2f       	mov	r25, r24
 50c:	9f 7d       	andi	r25, 0xDF	; 223
 50e:	95 54       	subi	r25, 0x45	; 69
 510:	93 30       	cpi	r25, 0x03	; 3
 512:	28 f4       	brcc	.+10     	; 0x51e <vfprintf+0xee>
 514:	0c 5f       	subi	r16, 0xFC	; 252
 516:	1f 4f       	sbci	r17, 0xFF	; 255
 518:	ff e3       	ldi	r31, 0x3F	; 63
 51a:	f9 83       	std	Y+1, r31	; 0x01
 51c:	0d c0       	rjmp	.+26     	; 0x538 <vfprintf+0x108>
 51e:	83 36       	cpi	r24, 0x63	; 99
 520:	31 f0       	breq	.+12     	; 0x52e <vfprintf+0xfe>
 522:	83 37       	cpi	r24, 0x73	; 115
 524:	71 f0       	breq	.+28     	; 0x542 <vfprintf+0x112>
 526:	83 35       	cpi	r24, 0x53	; 83
 528:	09 f0       	breq	.+2      	; 0x52c <vfprintf+0xfc>
 52a:	5b c0       	rjmp	.+182    	; 0x5e2 <vfprintf+0x1b2>
 52c:	22 c0       	rjmp	.+68     	; 0x572 <vfprintf+0x142>
 52e:	f8 01       	movw	r30, r16
 530:	80 81       	ld	r24, Z
 532:	89 83       	std	Y+1, r24	; 0x01
 534:	0e 5f       	subi	r16, 0xFE	; 254
 536:	1f 4f       	sbci	r17, 0xFF	; 255
 538:	44 24       	eor	r4, r4
 53a:	43 94       	inc	r4
 53c:	51 2c       	mov	r5, r1
 53e:	54 01       	movw	r10, r8
 540:	15 c0       	rjmp	.+42     	; 0x56c <vfprintf+0x13c>
 542:	38 01       	movw	r6, r16
 544:	f2 e0       	ldi	r31, 0x02	; 2
 546:	6f 0e       	add	r6, r31
 548:	71 1c       	adc	r7, r1
 54a:	f8 01       	movw	r30, r16
 54c:	a0 80       	ld	r10, Z
 54e:	b1 80       	ldd	r11, Z+1	; 0x01
 550:	26 ff       	sbrs	r18, 6
 552:	03 c0       	rjmp	.+6      	; 0x55a <vfprintf+0x12a>
 554:	65 2d       	mov	r22, r5
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <vfprintf+0x12e>
 55a:	6f ef       	ldi	r22, 0xFF	; 255
 55c:	7f ef       	ldi	r23, 0xFF	; 255
 55e:	c5 01       	movw	r24, r10
 560:	2c 87       	std	Y+12, r18	; 0x0c
 562:	0e 94 f5 03 	call	0x7ea	; 0x7ea <strnlen>
 566:	2c 01       	movw	r4, r24
 568:	83 01       	movw	r16, r6
 56a:	2c 85       	ldd	r18, Y+12	; 0x0c
 56c:	2f 77       	andi	r18, 0x7F	; 127
 56e:	22 2e       	mov	r2, r18
 570:	17 c0       	rjmp	.+46     	; 0x5a0 <vfprintf+0x170>
 572:	38 01       	movw	r6, r16
 574:	f2 e0       	ldi	r31, 0x02	; 2
 576:	6f 0e       	add	r6, r31
 578:	71 1c       	adc	r7, r1
 57a:	f8 01       	movw	r30, r16
 57c:	a0 80       	ld	r10, Z
 57e:	b1 80       	ldd	r11, Z+1	; 0x01
 580:	26 ff       	sbrs	r18, 6
 582:	03 c0       	rjmp	.+6      	; 0x58a <vfprintf+0x15a>
 584:	65 2d       	mov	r22, r5
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <vfprintf+0x15e>
 58a:	6f ef       	ldi	r22, 0xFF	; 255
 58c:	7f ef       	ldi	r23, 0xFF	; 255
 58e:	c5 01       	movw	r24, r10
 590:	2c 87       	std	Y+12, r18	; 0x0c
 592:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <strnlen_P>
 596:	2c 01       	movw	r4, r24
 598:	2c 85       	ldd	r18, Y+12	; 0x0c
 59a:	20 68       	ori	r18, 0x80	; 128
 59c:	22 2e       	mov	r2, r18
 59e:	83 01       	movw	r16, r6
 5a0:	23 fc       	sbrc	r2, 3
 5a2:	1b c0       	rjmp	.+54     	; 0x5da <vfprintf+0x1aa>
 5a4:	83 2d       	mov	r24, r3
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	48 16       	cp	r4, r24
 5aa:	59 06       	cpc	r5, r25
 5ac:	b0 f4       	brcc	.+44     	; 0x5da <vfprintf+0x1aa>
 5ae:	b7 01       	movw	r22, r14
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 5b8:	3a 94       	dec	r3
 5ba:	f4 cf       	rjmp	.-24     	; 0x5a4 <vfprintf+0x174>
 5bc:	f5 01       	movw	r30, r10
 5be:	27 fc       	sbrc	r2, 7
 5c0:	85 91       	lpm	r24, Z+
 5c2:	27 fe       	sbrs	r2, 7
 5c4:	81 91       	ld	r24, Z+
 5c6:	5f 01       	movw	r10, r30
 5c8:	b7 01       	movw	r22, r14
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 5d0:	31 10       	cpse	r3, r1
 5d2:	3a 94       	dec	r3
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	4f 1a       	sub	r4, r31
 5d8:	51 08       	sbc	r5, r1
 5da:	41 14       	cp	r4, r1
 5dc:	51 04       	cpc	r5, r1
 5de:	71 f7       	brne	.-36     	; 0x5bc <vfprintf+0x18c>
 5e0:	e5 c0       	rjmp	.+458    	; 0x7ac <vfprintf+0x37c>
 5e2:	84 36       	cpi	r24, 0x64	; 100
 5e4:	11 f0       	breq	.+4      	; 0x5ea <vfprintf+0x1ba>
 5e6:	89 36       	cpi	r24, 0x69	; 105
 5e8:	39 f5       	brne	.+78     	; 0x638 <vfprintf+0x208>
 5ea:	f8 01       	movw	r30, r16
 5ec:	27 ff       	sbrs	r18, 7
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <vfprintf+0x1ce>
 5f0:	60 81       	ld	r22, Z
 5f2:	71 81       	ldd	r23, Z+1	; 0x01
 5f4:	82 81       	ldd	r24, Z+2	; 0x02
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	0c 5f       	subi	r16, 0xFC	; 252
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <vfprintf+0x1de>
 5fe:	60 81       	ld	r22, Z
 600:	71 81       	ldd	r23, Z+1	; 0x01
 602:	07 2e       	mov	r0, r23
 604:	00 0c       	add	r0, r0
 606:	88 0b       	sbc	r24, r24
 608:	99 0b       	sbc	r25, r25
 60a:	0e 5f       	subi	r16, 0xFE	; 254
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	2f 76       	andi	r18, 0x6F	; 111
 610:	72 2e       	mov	r7, r18
 612:	97 ff       	sbrs	r25, 7
 614:	09 c0       	rjmp	.+18     	; 0x628 <vfprintf+0x1f8>
 616:	90 95       	com	r25
 618:	80 95       	com	r24
 61a:	70 95       	com	r23
 61c:	61 95       	neg	r22
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	20 68       	ori	r18, 0x80	; 128
 626:	72 2e       	mov	r7, r18
 628:	2a e0       	ldi	r18, 0x0A	; 10
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	a4 01       	movw	r20, r8
 62e:	0e 94 38 04 	call	0x870	; 0x870 <__ultoa_invert>
 632:	a8 2e       	mov	r10, r24
 634:	a8 18       	sub	r10, r8
 636:	44 c0       	rjmp	.+136    	; 0x6c0 <vfprintf+0x290>
 638:	85 37       	cpi	r24, 0x75	; 117
 63a:	29 f4       	brne	.+10     	; 0x646 <vfprintf+0x216>
 63c:	2f 7e       	andi	r18, 0xEF	; 239
 63e:	b2 2e       	mov	r11, r18
 640:	2a e0       	ldi	r18, 0x0A	; 10
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	25 c0       	rjmp	.+74     	; 0x690 <vfprintf+0x260>
 646:	f2 2f       	mov	r31, r18
 648:	f9 7f       	andi	r31, 0xF9	; 249
 64a:	bf 2e       	mov	r11, r31
 64c:	8f 36       	cpi	r24, 0x6F	; 111
 64e:	c1 f0       	breq	.+48     	; 0x680 <vfprintf+0x250>
 650:	18 f4       	brcc	.+6      	; 0x658 <vfprintf+0x228>
 652:	88 35       	cpi	r24, 0x58	; 88
 654:	79 f0       	breq	.+30     	; 0x674 <vfprintf+0x244>
 656:	b4 c0       	rjmp	.+360    	; 0x7c0 <vfprintf+0x390>
 658:	80 37       	cpi	r24, 0x70	; 112
 65a:	19 f0       	breq	.+6      	; 0x662 <vfprintf+0x232>
 65c:	88 37       	cpi	r24, 0x78	; 120
 65e:	21 f0       	breq	.+8      	; 0x668 <vfprintf+0x238>
 660:	af c0       	rjmp	.+350    	; 0x7c0 <vfprintf+0x390>
 662:	2f 2f       	mov	r18, r31
 664:	20 61       	ori	r18, 0x10	; 16
 666:	b2 2e       	mov	r11, r18
 668:	b4 fe       	sbrs	r11, 4
 66a:	0d c0       	rjmp	.+26     	; 0x686 <vfprintf+0x256>
 66c:	8b 2d       	mov	r24, r11
 66e:	84 60       	ori	r24, 0x04	; 4
 670:	b8 2e       	mov	r11, r24
 672:	09 c0       	rjmp	.+18     	; 0x686 <vfprintf+0x256>
 674:	24 ff       	sbrs	r18, 4
 676:	0a c0       	rjmp	.+20     	; 0x68c <vfprintf+0x25c>
 678:	9f 2f       	mov	r25, r31
 67a:	96 60       	ori	r25, 0x06	; 6
 67c:	b9 2e       	mov	r11, r25
 67e:	06 c0       	rjmp	.+12     	; 0x68c <vfprintf+0x25c>
 680:	28 e0       	ldi	r18, 0x08	; 8
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	05 c0       	rjmp	.+10     	; 0x690 <vfprintf+0x260>
 686:	20 e1       	ldi	r18, 0x10	; 16
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <vfprintf+0x260>
 68c:	20 e1       	ldi	r18, 0x10	; 16
 68e:	32 e0       	ldi	r19, 0x02	; 2
 690:	f8 01       	movw	r30, r16
 692:	b7 fe       	sbrs	r11, 7
 694:	07 c0       	rjmp	.+14     	; 0x6a4 <vfprintf+0x274>
 696:	60 81       	ld	r22, Z
 698:	71 81       	ldd	r23, Z+1	; 0x01
 69a:	82 81       	ldd	r24, Z+2	; 0x02
 69c:	93 81       	ldd	r25, Z+3	; 0x03
 69e:	0c 5f       	subi	r16, 0xFC	; 252
 6a0:	1f 4f       	sbci	r17, 0xFF	; 255
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <vfprintf+0x280>
 6a4:	60 81       	ld	r22, Z
 6a6:	71 81       	ldd	r23, Z+1	; 0x01
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 5f       	subi	r16, 0xFE	; 254
 6ae:	1f 4f       	sbci	r17, 0xFF	; 255
 6b0:	a4 01       	movw	r20, r8
 6b2:	0e 94 38 04 	call	0x870	; 0x870 <__ultoa_invert>
 6b6:	a8 2e       	mov	r10, r24
 6b8:	a8 18       	sub	r10, r8
 6ba:	fb 2d       	mov	r31, r11
 6bc:	ff 77       	andi	r31, 0x7F	; 127
 6be:	7f 2e       	mov	r7, r31
 6c0:	76 fe       	sbrs	r7, 6
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <vfprintf+0x2aa>
 6c4:	37 2d       	mov	r19, r7
 6c6:	3e 7f       	andi	r19, 0xFE	; 254
 6c8:	a5 14       	cp	r10, r5
 6ca:	50 f4       	brcc	.+20     	; 0x6e0 <vfprintf+0x2b0>
 6cc:	74 fe       	sbrs	r7, 4
 6ce:	0a c0       	rjmp	.+20     	; 0x6e4 <vfprintf+0x2b4>
 6d0:	72 fc       	sbrc	r7, 2
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <vfprintf+0x2b4>
 6d4:	37 2d       	mov	r19, r7
 6d6:	3e 7e       	andi	r19, 0xEE	; 238
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <vfprintf+0x2b4>
 6da:	ba 2c       	mov	r11, r10
 6dc:	37 2d       	mov	r19, r7
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <vfprintf+0x2b6>
 6e0:	ba 2c       	mov	r11, r10
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <vfprintf+0x2b6>
 6e4:	b5 2c       	mov	r11, r5
 6e6:	34 ff       	sbrs	r19, 4
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <vfprintf+0x2d4>
 6ea:	fe 01       	movw	r30, r28
 6ec:	ea 0d       	add	r30, r10
 6ee:	f1 1d       	adc	r31, r1
 6f0:	80 81       	ld	r24, Z
 6f2:	80 33       	cpi	r24, 0x30	; 48
 6f4:	11 f4       	brne	.+4      	; 0x6fa <vfprintf+0x2ca>
 6f6:	39 7e       	andi	r19, 0xE9	; 233
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <vfprintf+0x2dc>
 6fa:	32 ff       	sbrs	r19, 2
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <vfprintf+0x2da>
 6fe:	b3 94       	inc	r11
 700:	b3 94       	inc	r11
 702:	04 c0       	rjmp	.+8      	; 0x70c <vfprintf+0x2dc>
 704:	83 2f       	mov	r24, r19
 706:	86 78       	andi	r24, 0x86	; 134
 708:	09 f0       	breq	.+2      	; 0x70c <vfprintf+0x2dc>
 70a:	b3 94       	inc	r11
 70c:	33 fd       	sbrc	r19, 3
 70e:	13 c0       	rjmp	.+38     	; 0x736 <vfprintf+0x306>
 710:	30 ff       	sbrs	r19, 0
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0x2f0>
 714:	5a 2c       	mov	r5, r10
 716:	b3 14       	cp	r11, r3
 718:	18 f4       	brcc	.+6      	; 0x720 <vfprintf+0x2f0>
 71a:	53 0c       	add	r5, r3
 71c:	5b 18       	sub	r5, r11
 71e:	b3 2c       	mov	r11, r3
 720:	b3 14       	cp	r11, r3
 722:	68 f4       	brcc	.+26     	; 0x73e <vfprintf+0x30e>
 724:	b7 01       	movw	r22, r14
 726:	80 e2       	ldi	r24, 0x20	; 32
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	3c 87       	std	Y+12, r19	; 0x0c
 72c:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 730:	b3 94       	inc	r11
 732:	3c 85       	ldd	r19, Y+12	; 0x0c
 734:	f5 cf       	rjmp	.-22     	; 0x720 <vfprintf+0x2f0>
 736:	b3 14       	cp	r11, r3
 738:	10 f4       	brcc	.+4      	; 0x73e <vfprintf+0x30e>
 73a:	3b 18       	sub	r3, r11
 73c:	01 c0       	rjmp	.+2      	; 0x740 <vfprintf+0x310>
 73e:	31 2c       	mov	r3, r1
 740:	34 ff       	sbrs	r19, 4
 742:	12 c0       	rjmp	.+36     	; 0x768 <vfprintf+0x338>
 744:	b7 01       	movw	r22, r14
 746:	80 e3       	ldi	r24, 0x30	; 48
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	3c 87       	std	Y+12, r19	; 0x0c
 74c:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 750:	3c 85       	ldd	r19, Y+12	; 0x0c
 752:	32 ff       	sbrs	r19, 2
 754:	17 c0       	rjmp	.+46     	; 0x784 <vfprintf+0x354>
 756:	31 fd       	sbrc	r19, 1
 758:	03 c0       	rjmp	.+6      	; 0x760 <vfprintf+0x330>
 75a:	88 e7       	ldi	r24, 0x78	; 120
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0x334>
 760:	88 e5       	ldi	r24, 0x58	; 88
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	b7 01       	movw	r22, r14
 766:	0c c0       	rjmp	.+24     	; 0x780 <vfprintf+0x350>
 768:	83 2f       	mov	r24, r19
 76a:	86 78       	andi	r24, 0x86	; 134
 76c:	59 f0       	breq	.+22     	; 0x784 <vfprintf+0x354>
 76e:	31 ff       	sbrs	r19, 1
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x346>
 772:	8b e2       	ldi	r24, 0x2B	; 43
 774:	01 c0       	rjmp	.+2      	; 0x778 <vfprintf+0x348>
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	37 fd       	sbrc	r19, 7
 77a:	8d e2       	ldi	r24, 0x2D	; 45
 77c:	b7 01       	movw	r22, r14
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 784:	a5 14       	cp	r10, r5
 786:	38 f4       	brcc	.+14     	; 0x796 <vfprintf+0x366>
 788:	b7 01       	movw	r22, r14
 78a:	80 e3       	ldi	r24, 0x30	; 48
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 792:	5a 94       	dec	r5
 794:	f7 cf       	rjmp	.-18     	; 0x784 <vfprintf+0x354>
 796:	aa 94       	dec	r10
 798:	f4 01       	movw	r30, r8
 79a:	ea 0d       	add	r30, r10
 79c:	f1 1d       	adc	r31, r1
 79e:	80 81       	ld	r24, Z
 7a0:	b7 01       	movw	r22, r14
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 7a8:	a1 10       	cpse	r10, r1
 7aa:	f5 cf       	rjmp	.-22     	; 0x796 <vfprintf+0x366>
 7ac:	33 20       	and	r3, r3
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <vfprintf+0x382>
 7b0:	51 ce       	rjmp	.-862    	; 0x454 <vfprintf+0x24>
 7b2:	b7 01       	movw	r22, r14
 7b4:	80 e2       	ldi	r24, 0x20	; 32
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 00 04 	call	0x800	; 0x800 <fputc>
 7bc:	3a 94       	dec	r3
 7be:	f6 cf       	rjmp	.-20     	; 0x7ac <vfprintf+0x37c>
 7c0:	f7 01       	movw	r30, r14
 7c2:	86 81       	ldd	r24, Z+6	; 0x06
 7c4:	97 81       	ldd	r25, Z+7	; 0x07
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <vfprintf+0x39c>
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	2c 96       	adiw	r28, 0x0c	; 12
 7ce:	e2 e1       	ldi	r30, 0x12	; 18
 7d0:	0c 94 b2 04 	jmp	0x964	; 0x964 <__epilogue_restores__>

000007d4 <strnlen_P>:
 7d4:	fc 01       	movw	r30, r24
 7d6:	05 90       	lpm	r0, Z+
 7d8:	61 50       	subi	r22, 0x01	; 1
 7da:	70 40       	sbci	r23, 0x00	; 0
 7dc:	01 10       	cpse	r0, r1
 7de:	d8 f7       	brcc	.-10     	; 0x7d6 <strnlen_P+0x2>
 7e0:	80 95       	com	r24
 7e2:	90 95       	com	r25
 7e4:	8e 0f       	add	r24, r30
 7e6:	9f 1f       	adc	r25, r31
 7e8:	08 95       	ret

000007ea <strnlen>:
 7ea:	fc 01       	movw	r30, r24
 7ec:	61 50       	subi	r22, 0x01	; 1
 7ee:	70 40       	sbci	r23, 0x00	; 0
 7f0:	01 90       	ld	r0, Z+
 7f2:	01 10       	cpse	r0, r1
 7f4:	d8 f7       	brcc	.-10     	; 0x7ec <strnlen+0x2>
 7f6:	80 95       	com	r24
 7f8:	90 95       	com	r25
 7fa:	8e 0f       	add	r24, r30
 7fc:	9f 1f       	adc	r25, r31
 7fe:	08 95       	ret

00000800 <fputc>:
 800:	0f 93       	push	r16
 802:	1f 93       	push	r17
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	fb 01       	movw	r30, r22
 80a:	23 81       	ldd	r18, Z+3	; 0x03
 80c:	21 fd       	sbrc	r18, 1
 80e:	03 c0       	rjmp	.+6      	; 0x816 <fputc+0x16>
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	9f ef       	ldi	r25, 0xFF	; 255
 814:	28 c0       	rjmp	.+80     	; 0x866 <fputc+0x66>
 816:	22 ff       	sbrs	r18, 2
 818:	16 c0       	rjmp	.+44     	; 0x846 <fputc+0x46>
 81a:	46 81       	ldd	r20, Z+6	; 0x06
 81c:	57 81       	ldd	r21, Z+7	; 0x07
 81e:	24 81       	ldd	r18, Z+4	; 0x04
 820:	35 81       	ldd	r19, Z+5	; 0x05
 822:	42 17       	cp	r20, r18
 824:	53 07       	cpc	r21, r19
 826:	44 f4       	brge	.+16     	; 0x838 <fputc+0x38>
 828:	a0 81       	ld	r26, Z
 82a:	b1 81       	ldd	r27, Z+1	; 0x01
 82c:	9d 01       	movw	r18, r26
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	3f 4f       	sbci	r19, 0xFF	; 255
 832:	31 83       	std	Z+1, r19	; 0x01
 834:	20 83       	st	Z, r18
 836:	8c 93       	st	X, r24
 838:	26 81       	ldd	r18, Z+6	; 0x06
 83a:	37 81       	ldd	r19, Z+7	; 0x07
 83c:	2f 5f       	subi	r18, 0xFF	; 255
 83e:	3f 4f       	sbci	r19, 0xFF	; 255
 840:	37 83       	std	Z+7, r19	; 0x07
 842:	26 83       	std	Z+6, r18	; 0x06
 844:	10 c0       	rjmp	.+32     	; 0x866 <fputc+0x66>
 846:	eb 01       	movw	r28, r22
 848:	09 2f       	mov	r16, r25
 84a:	18 2f       	mov	r17, r24
 84c:	00 84       	ldd	r0, Z+8	; 0x08
 84e:	f1 85       	ldd	r31, Z+9	; 0x09
 850:	e0 2d       	mov	r30, r0
 852:	09 95       	icall
 854:	89 2b       	or	r24, r25
 856:	e1 f6       	brne	.-72     	; 0x810 <fputc+0x10>
 858:	8e 81       	ldd	r24, Y+6	; 0x06
 85a:	9f 81       	ldd	r25, Y+7	; 0x07
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	9f 83       	std	Y+7, r25	; 0x07
 860:	8e 83       	std	Y+6, r24	; 0x06
 862:	81 2f       	mov	r24, r17
 864:	90 2f       	mov	r25, r16
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	08 95       	ret

00000870 <__ultoa_invert>:
 870:	fa 01       	movw	r30, r20
 872:	aa 27       	eor	r26, r26
 874:	28 30       	cpi	r18, 0x08	; 8
 876:	51 f1       	breq	.+84     	; 0x8cc <__ultoa_invert+0x5c>
 878:	20 31       	cpi	r18, 0x10	; 16
 87a:	81 f1       	breq	.+96     	; 0x8dc <__ultoa_invert+0x6c>
 87c:	e8 94       	clt
 87e:	6f 93       	push	r22
 880:	6e 7f       	andi	r22, 0xFE	; 254
 882:	6e 5f       	subi	r22, 0xFE	; 254
 884:	7f 4f       	sbci	r23, 0xFF	; 255
 886:	8f 4f       	sbci	r24, 0xFF	; 255
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	af 4f       	sbci	r26, 0xFF	; 255
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	3e d0       	rcall	.+124    	; 0x90c <__stack+0xd>
 890:	b4 e0       	ldi	r27, 0x04	; 4
 892:	3c d0       	rcall	.+120    	; 0x90c <__stack+0xd>
 894:	67 0f       	add	r22, r23
 896:	78 1f       	adc	r23, r24
 898:	89 1f       	adc	r24, r25
 89a:	9a 1f       	adc	r25, r26
 89c:	a1 1d       	adc	r26, r1
 89e:	68 0f       	add	r22, r24
 8a0:	79 1f       	adc	r23, r25
 8a2:	8a 1f       	adc	r24, r26
 8a4:	91 1d       	adc	r25, r1
 8a6:	a1 1d       	adc	r26, r1
 8a8:	6a 0f       	add	r22, r26
 8aa:	71 1d       	adc	r23, r1
 8ac:	81 1d       	adc	r24, r1
 8ae:	91 1d       	adc	r25, r1
 8b0:	a1 1d       	adc	r26, r1
 8b2:	20 d0       	rcall	.+64     	; 0x8f4 <__ultoa_invert+0x84>
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <__ultoa_invert+0x48>
 8b6:	68 94       	set
 8b8:	3f 91       	pop	r19
 8ba:	2a e0       	ldi	r18, 0x0A	; 10
 8bc:	26 9f       	mul	r18, r22
 8be:	11 24       	eor	r1, r1
 8c0:	30 19       	sub	r19, r0
 8c2:	30 5d       	subi	r19, 0xD0	; 208
 8c4:	31 93       	st	Z+, r19
 8c6:	de f6       	brtc	.-74     	; 0x87e <__ultoa_invert+0xe>
 8c8:	cf 01       	movw	r24, r30
 8ca:	08 95       	ret
 8cc:	46 2f       	mov	r20, r22
 8ce:	47 70       	andi	r20, 0x07	; 7
 8d0:	40 5d       	subi	r20, 0xD0	; 208
 8d2:	41 93       	st	Z+, r20
 8d4:	b3 e0       	ldi	r27, 0x03	; 3
 8d6:	0f d0       	rcall	.+30     	; 0x8f6 <__ultoa_invert+0x86>
 8d8:	c9 f7       	brne	.-14     	; 0x8cc <__ultoa_invert+0x5c>
 8da:	f6 cf       	rjmp	.-20     	; 0x8c8 <__ultoa_invert+0x58>
 8dc:	46 2f       	mov	r20, r22
 8de:	4f 70       	andi	r20, 0x0F	; 15
 8e0:	40 5d       	subi	r20, 0xD0	; 208
 8e2:	4a 33       	cpi	r20, 0x3A	; 58
 8e4:	18 f0       	brcs	.+6      	; 0x8ec <__ultoa_invert+0x7c>
 8e6:	49 5d       	subi	r20, 0xD9	; 217
 8e8:	31 fd       	sbrc	r19, 1
 8ea:	40 52       	subi	r20, 0x20	; 32
 8ec:	41 93       	st	Z+, r20
 8ee:	02 d0       	rcall	.+4      	; 0x8f4 <__ultoa_invert+0x84>
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__ultoa_invert+0x6c>
 8f2:	ea cf       	rjmp	.-44     	; 0x8c8 <__ultoa_invert+0x58>
 8f4:	b4 e0       	ldi	r27, 0x04	; 4
 8f6:	a6 95       	lsr	r26
 8f8:	97 95       	ror	r25
 8fa:	87 95       	ror	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	ba 95       	dec	r27
 902:	c9 f7       	brne	.-14     	; 0x8f6 <__ultoa_invert+0x86>
 904:	00 97       	sbiw	r24, 0x00	; 0
 906:	61 05       	cpc	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	08 95       	ret
 90c:	9b 01       	movw	r18, r22
 90e:	ac 01       	movw	r20, r24
 910:	0a 2e       	mov	r0, r26
 912:	06 94       	lsr	r0
 914:	57 95       	ror	r21
 916:	47 95       	ror	r20
 918:	37 95       	ror	r19
 91a:	27 95       	ror	r18
 91c:	ba 95       	dec	r27
 91e:	c9 f7       	brne	.-14     	; 0x912 <__stack+0x13>
 920:	62 0f       	add	r22, r18
 922:	73 1f       	adc	r23, r19
 924:	84 1f       	adc	r24, r20
 926:	95 1f       	adc	r25, r21
 928:	a0 1d       	adc	r26, r0
 92a:	08 95       	ret

0000092c <__prologue_saves__>:
 92c:	2f 92       	push	r2
 92e:	3f 92       	push	r3
 930:	4f 92       	push	r4
 932:	5f 92       	push	r5
 934:	6f 92       	push	r6
 936:	7f 92       	push	r7
 938:	8f 92       	push	r8
 93a:	9f 92       	push	r9
 93c:	af 92       	push	r10
 93e:	bf 92       	push	r11
 940:	cf 92       	push	r12
 942:	df 92       	push	r13
 944:	ef 92       	push	r14
 946:	ff 92       	push	r15
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	ca 1b       	sub	r28, r26
 956:	db 0b       	sbc	r29, r27
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	09 94       	ijmp

00000964 <__epilogue_restores__>:
 964:	2a 88       	ldd	r2, Y+18	; 0x12
 966:	39 88       	ldd	r3, Y+17	; 0x11
 968:	48 88       	ldd	r4, Y+16	; 0x10
 96a:	5f 84       	ldd	r5, Y+15	; 0x0f
 96c:	6e 84       	ldd	r6, Y+14	; 0x0e
 96e:	7d 84       	ldd	r7, Y+13	; 0x0d
 970:	8c 84       	ldd	r8, Y+12	; 0x0c
 972:	9b 84       	ldd	r9, Y+11	; 0x0b
 974:	aa 84       	ldd	r10, Y+10	; 0x0a
 976:	b9 84       	ldd	r11, Y+9	; 0x09
 978:	c8 84       	ldd	r12, Y+8	; 0x08
 97a:	df 80       	ldd	r13, Y+7	; 0x07
 97c:	ee 80       	ldd	r14, Y+6	; 0x06
 97e:	fd 80       	ldd	r15, Y+5	; 0x05
 980:	0c 81       	ldd	r16, Y+4	; 0x04
 982:	1b 81       	ldd	r17, Y+3	; 0x03
 984:	aa 81       	ldd	r26, Y+2	; 0x02
 986:	b9 81       	ldd	r27, Y+1	; 0x01
 988:	ce 0f       	add	r28, r30
 98a:	d1 1d       	adc	r29, r1
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	f8 94       	cli
 990:	de bf       	out	0x3e, r29	; 62
 992:	0f be       	out	0x3f, r0	; 63
 994:	cd bf       	out	0x3d, r28	; 61
 996:	ed 01       	movw	r28, r26
 998:	08 95       	ret

0000099a <_exit>:
 99a:	f8 94       	cli

0000099c <__stop_program>:
 99c:	ff cf       	rjmp	.-2      	; 0x99c <__stop_program>
