
lab_assignment4C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000790  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080011a  0080011a  0000083e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111c  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000422  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ae  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000737  00000000  00000000  0000309b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000037d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a1 03 	call	0x742	; 0x742 <main>
  9e:	0c 94 c6 03 	jmp	0x78c	; 0x78c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	// print data
	for(i=0; i<nBytes; i++)
	{
		LcdDataWrite(data[i]);
	}
}
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1f8:	08 95       	ret

000001fa <LCDGotoXY>:

void LCDGotoXY(uint8_t x, uint8_t y) //Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1fa:	61 30       	cpi	r22, 0x01	; 1
 1fc:	09 f4       	brne	.+2      	; 0x200 <LCDGotoXY+0x6>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1fe:	80 5c       	subi	r24, 0xC0	; 192
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LcdCommandWrite(1<<LCD_DDRAM | DDRAMAddr);	
 200:	80 68       	ori	r24, 0x80	; 128
 202:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 206:	08 95       	ret

00000208 <printString>:
	TCCR0B = (1<<CS01) | (1<<CS00);
}

void Stop_Timer()
{
	TCCR0B = 0;
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	8c 01       	movw	r16, r24
 216:	7c 01       	movw	r14, r24
 218:	c0 e0       	ldi	r28, 0x00	; 0
 21a:	d0 e0       	ldi	r29, 0x00	; 0
 21c:	07 c0       	rjmp	.+14     	; 0x22c <printString+0x24>
 21e:	f7 01       	movw	r30, r14
 220:	81 91       	ld	r24, Z+
 222:	7f 01       	movw	r14, r30
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	f8 01       	movw	r30, r16
 22e:	01 90       	ld	r0, Z+
 230:	00 20       	and	r0, r0
 232:	e9 f7       	brne	.-6      	; 0x22e <printString+0x26>
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	e0 1b       	sub	r30, r16
 238:	f1 0b       	sbc	r31, r17
 23a:	ce 17       	cp	r28, r30
 23c:	df 07       	cpc	r29, r31
 23e:	78 f3       	brcs	.-34     	; 0x21e <printString+0x16>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	08 95       	ret

0000024e <resetAll>:
}

void resetAll()
{
	first = 0;
 24e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <first+0x1>
 252:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <first>
	second = 0;
 256:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <second+0x1>
 25a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <second>
	third = 0;
 25e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <third+0x1>
 262:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <third>
	fourth = 0;
 266:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <fourth+0x1>
 26a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <fourth>
	fifth = 0;
 26e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <fifth+0x1>
 272:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <fifth>
	sixth = 0;
 276:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <sixth+0x1>
 27a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <sixth>
	seventh = 0;
 27e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <seventh+0x1>
 282:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <seventh>
	eight = 0;
 286:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <eight+0x1>
 28a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <eight>
	nine = 0;
 28e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <nine+0x1>
 292:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <nine>
	ten = 0;
 296:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ten+0x1>
 29a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ten>
	
	toggleight = 0;
 29e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <toggleight+0x1>
 2a2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <toggleight>
	togglenine = 0;
 2a6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <togglenine+0x1>
 2aa:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <togglenine>
	toggleseven = 0;
 2ae:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <toggleseven+0x1>
 2b2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <toggleseven>
	togglesix = 0;
 2b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <togglesix+0x1>
 2ba:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <togglesix>
	togglefive = 0;
 2be:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <togglefive+0x1>
 2c2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <togglefive>
	togglefour = 0;
 2c6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <togglefour+0x1>
 2ca:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <togglefour>
	togglethree = 0;
 2ce:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <togglethree+0x1>
 2d2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <togglethree>
	toggletwo = 0;
 2d6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 2da:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 2de:	08 95       	ret

000002e0 <state_machine>:
}

void state_machine()
{
	
	switch(current_state)
 2e0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <current_state>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	89 f0       	breq	.+34     	; 0x30a <state_machine+0x2a>
 2e8:	28 f0       	brcs	.+10     	; 0x2f4 <state_machine+0x14>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	b1 f0       	breq	.+44     	; 0x31a <state_machine+0x3a>
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	19 f1       	breq	.+70     	; 0x338 <state_machine+0x58>
 2f2:	08 95       	ret
	{
		case START:
		LCDclr();
 2f4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
		enabled = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <enabled+0x1>
 300:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <enabled>
		current_state = STOP;
 304:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <current_state>
		break;
 308:	08 95       	ret
		
		case STOP:
		enabled = 0; 
 30a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <enabled+0x1>
 30e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <enabled>
		current_state = RESET;
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <current_state>
		break;
 318:	08 95       	ret
		
		case RESET:
		resetAll();
 31a:	0e 94 27 01 	call	0x24e	; 0x24e <resetAll>
		enabled = 0;
 31e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <enabled+0x1>
 322:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <enabled>
		LCDclr();
 326:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
		printString("Again?");
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 04 01 	call	0x208	; 0x208 <printString>
		current_state = START;	 
 332:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <current_state>
		break; 
 336:	08 95       	ret
		
		case HOLD:
		LCDclr();
 338:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
		current_state = START;
 33c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <current_state>
 340:	08 95       	ret

00000342 <switch_debounce>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	8f e5       	ldi	r24, 0x5F	; 95
 344:	99 e0       	ldi	r25, 0x09	; 9
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <switch_debounce+0x4>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <switch_debounce+0xa>
 34c:	00 00       	nop

void switch_debounce()
{
	_delay_us(600);
	
	switch(push_state)
 34e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <push_state>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	51 f0       	breq	.+20     	; 0x36a <switch_debounce+0x28>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	a9 f0       	breq	.+42     	; 0x384 <switch_debounce+0x42>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	c1 f4       	brne	.+48     	; 0x38e <switch_debounce+0x4c>
	{
		case NOPUSH:
		if(button_press)
 35e:	4b 99       	sbic	0x09, 3	; 9
 360:	16 c0       	rjmp	.+44     	; 0x38e <switch_debounce+0x4c>
		push_state = MAYBE;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <push_state>
 368:	08 95       	ret
		else
		push_state = NOPUSH;
		break;
		
		case MAYBE:
		if(button_press){
 36a:	4b 99       	sbic	0x09, 3	; 9
 36c:	07 c0       	rjmp	.+14     	; 0x37c <switch_debounce+0x3a>
		push_state = PUSHED;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <push_state>
		state_machine();  // Call out state_machine. 
 374:	0e 94 70 01 	call	0x2e0	; 0x2e0 <state_machine>
		EIMSK |= 1<<INT1; // Enable the interrupt. 
 378:	e9 9a       	sbi	0x1d, 1	; 29
 37a:	08 95       	ret
		}
		else
		push_state = NOPUSH;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <push_state>
 382:	08 95       	ret
		break;
		
		case PUSHED:
		if(button_press)
 384:	4b 9b       	sbis	0x09, 3	; 9
 386:	03 c0       	rjmp	.+6      	; 0x38e <switch_debounce+0x4c>
		push_state = PUSHED;
		else
		push_state = MAYBE;
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <push_state>
 38e:	08 95       	ret

00000390 <__vector_2>:
	
}


ISR(INT1_vect) // Pin external interrupt
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	EIMSK &= ~(1<<INT1); // Disable interrupts temporarily to filter out any glitches.
 3b2:	e9 98       	cbi	0x1d, 1	; 29
	//state_machine();     // Update state every time button is pressed.
	switch_debounce();
 3b4:	0e 94 a1 01 	call	0x342	; 0x342 <switch_debounce>
	//debounce_flag = 1;
      
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <initall>:
	 
}

void initall()
{
	initialize_LCD();
 3da:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
	
	EICRA |= 1<<ISC11; 
 3de:	e9 e6       	ldi	r30, 0x69	; 105
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	88 60       	ori	r24, 0x08	; 8
 3e6:	80 83       	st	Z, r24
	EIMSK |= 1<<INT1;
 3e8:	e9 9a       	sbi	0x1d, 1	; 29
	
	OCR0A = 249;
 3ea:	89 ef       	ldi	r24, 0xF9	; 249
 3ec:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
 3ee:	ee e6       	ldi	r30, 0x6E	; 110
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);
 3f8:	84 b5       	in	r24, 0x24	; 36
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	84 bd       	out	0x24, r24	; 36
	clocker();
}

void Start_Timer()  // This will start the Timer. 
{
	TCCR0B = (1<<CS01) | (1<<CS00);
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	85 bd       	out	0x25, r24	; 37
 402:	08 95       	ret

00000404 <clocker>:
	Start_Timer(); 
}

void clocker() // Call this every 1ms
{
	first++;
 404:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <first>
 408:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <first+0x1>
 40c:	01 96       	adiw	r24, 0x01	; 1
	
	if(first==10)
 40e:	8a 30       	cpi	r24, 0x0A	; 10
 410:	91 05       	cpc	r25, r1
 412:	29 f0       	breq	.+10     	; 0x41e <clocker+0x1a>
	Start_Timer(); 
}

void clocker() // Call this every 1ms
{
	first++;
 414:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <first+0x1>
 418:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <first>
 41c:	13 c0       	rjmp	.+38     	; 0x444 <clocker+0x40>
	
	if(first==10)
	{
		first = 0;
 41e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <first+0x1>
 422:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <first>
		toggletwo = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 42e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		second++; // Increment the value on the right.
 432:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <second>
 436:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <second+0x1>
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <second+0x1>
 440:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <second>
	}
	if(second==10)
 444:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <second>
 448:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <second+0x1>
 44c:	0a 97       	sbiw	r24, 0x0a	; 10
 44e:	99 f4       	brne	.+38     	; 0x476 <clocker+0x72>
	{
		second = 0;
 450:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <second+0x1>
 454:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <second>
		togglethree = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <togglethree+0x1>
 460:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <togglethree>
		third++;
 464:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <third>
 468:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <third+0x1>
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <third+0x1>
 472:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <third>
	}
	if(third==10)
 476:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <third>
 47a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <third+0x1>
 47e:	0a 97       	sbiw	r24, 0x0a	; 10
 480:	99 f4       	brne	.+38     	; 0x4a8 <clocker+0xa4>
	{
		third = 0;
 482:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <third+0x1>
 486:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <third>
		togglefour = 1;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <togglefour+0x1>
 492:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <togglefour>
		fourth++;
 496:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <fourth>
 49a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <fourth+0x1>
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <fourth+0x1>
 4a4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <fourth>
	}
	if(fourth==10)
 4a8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <fourth>
 4ac:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <fourth+0x1>
 4b0:	0a 97       	sbiw	r24, 0x0a	; 10
 4b2:	99 f4       	brne	.+38     	; 0x4da <clocker+0xd6>
	{
		fourth = 0;
 4b4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <fourth+0x1>
 4b8:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <fourth>
		togglefive = 1;
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <togglefive+0x1>
 4c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <togglefive>
		fifth++;
 4c8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <fifth>
 4cc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <fifth+0x1>
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <fifth+0x1>
 4d6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <fifth>
	}
	if(fifth==10)
 4da:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <fifth>
 4de:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <fifth+0x1>
 4e2:	0a 97       	sbiw	r24, 0x0a	; 10
 4e4:	99 f4       	brne	.+38     	; 0x50c <clocker+0x108>
	{
		fifth = 0;
 4e6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <fifth+0x1>
 4ea:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <fifth>
		togglesix = 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <togglesix+0x1>
 4f6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <togglesix>
		sixth++;
 4fa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <sixth>
 4fe:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <sixth+0x1>
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <sixth+0x1>
 508:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <sixth>
	}
	if(sixth==10)
 50c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <sixth>
 510:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <sixth+0x1>
 514:	0a 97       	sbiw	r24, 0x0a	; 10
 516:	99 f4       	brne	.+38     	; 0x53e <clocker+0x13a>
	{
		sixth = 0;
 518:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <sixth+0x1>
 51c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <sixth>
		toggleseven = 1;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <toggleseven+0x1>
 528:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <toggleseven>
		seventh++;
 52c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <seventh>
 530:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <seventh+0x1>
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <seventh+0x1>
 53a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <seventh>
	}
	if(seventh==10)
 53e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <seventh>
 542:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <seventh+0x1>
 546:	0a 97       	sbiw	r24, 0x0a	; 10
 548:	99 f4       	brne	.+38     	; 0x570 <clocker+0x16c>
	{
		seventh = 0;
 54a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <seventh+0x1>
 54e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <seventh>
		toggleight = 1;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <toggleight+0x1>
 55a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <toggleight>
		eight++;
 55e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <eight>
 562:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <eight+0x1>
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <eight+0x1>
 56c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <eight>
	}
	if(eight==10)
 570:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <eight>
 574:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <eight+0x1>
 578:	0a 97       	sbiw	r24, 0x0a	; 10
 57a:	99 f4       	brne	.+38     	; 0x5a2 <clocker+0x19e>
	{
		eight = 0;
 57c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <eight+0x1>
 580:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <eight>
		togglenine = 1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <togglenine+0x1>
 58c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <togglenine>
		nine++;
 590:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <nine>
 594:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <nine+0x1>
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <nine+0x1>
 59e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <nine>
	}
	if(nine==10)
 5a2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <nine>
 5a6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <nine+0x1>
 5aa:	0a 97       	sbiw	r24, 0x0a	; 10
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <clocker+0x1c4>
	{
		nine = 0;
 5ae:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <nine+0x1>
 5b2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <nine>
		ten++;
 5b6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ten>
 5ba:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ten+0x1>
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <ten+0x1>
 5c4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <ten>
	}
	if(ten==10)
 5c8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ten>
 5cc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ten+0x1>
 5d0:	0a 97       	sbiw	r24, 0x0a	; 10
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <clocker+0x1d4>
	{
		resetAll(); // MAX reached, so let's reset the stopwatch.
 5d4:	0e 94 27 01 	call	0x24e	; 0x24e <resetAll>
 5d8:	08 95       	ret

000005da <__vector_14>:
	//debounce_flag = 1;
      
}

ISR(TIMER0_COMPA_vect) // Timer interrupt.
{
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
	
	if(Software_counter>0)
 5fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Software_counter>
 600:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Software_counter+0x1>
 604:	18 16       	cp	r1, r24
 606:	19 06       	cpc	r1, r25
 608:	4c f4       	brge	.+18     	; 0x61c <__vector_14+0x42>
	Software_counter--;
 60a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Software_counter>
 60e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Software_counter+0x1>
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Software_counter+0x1>
 618:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Software_counter>
	
	if(enabled) // Button is pressed. This will toggle enable updating the clocker. 
 61c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <enabled>
 620:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <enabled+0x1>
 624:	89 2b       	or	r24, r25
 626:	11 f0       	breq	.+4      	; 0x62c <__vector_14+0x52>
	clocker();
 628:	0e 94 02 02 	call	0x404	; 0x404 <clocker>
}
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <screenClock>:
	}
}

void screenClock() // This will print a seven digit string starting from (0,0).
{
	LCDGotoXY(0,0);    // Clear everything that previously on the screen.  
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDGotoXY>
	
	if(togglenine)
 65a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <togglenine>
 65e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <togglenine+0x1>
 662:	89 2b       	or	r24, r25
 664:	39 f0       	breq	.+14     	; 0x674 <screenClock+0x26>
	LcdDataWrite(nine + '0');
 666:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <nine>
 66a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <nine+0x1>
 66e:	c0 96       	adiw	r24, 0x30	; 48
 670:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	if(toggleight)
 674:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <toggleight>
 678:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <toggleight+0x1>
 67c:	89 2b       	or	r24, r25
 67e:	39 f0       	breq	.+14     	; 0x68e <screenClock+0x40>
	LcdDataWrite(eight + '0');
 680:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <eight>
 684:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <eight+0x1>
 688:	c0 96       	adiw	r24, 0x30	; 48
 68a:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	if(toggleseven)
 68e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <toggleseven>
 692:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <toggleseven+0x1>
 696:	89 2b       	or	r24, r25
 698:	39 f0       	breq	.+14     	; 0x6a8 <screenClock+0x5a>
	LcdDataWrite(seventh + '0');
 69a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <seventh>
 69e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <seventh+0x1>
 6a2:	c0 96       	adiw	r24, 0x30	; 48
 6a4:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	if(togglesix)
 6a8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <togglesix>
 6ac:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <togglesix+0x1>
 6b0:	89 2b       	or	r24, r25
 6b2:	39 f0       	breq	.+14     	; 0x6c2 <screenClock+0x74>
	LcdDataWrite(sixth + '0');
 6b4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <sixth>
 6b8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <sixth+0x1>
 6bc:	c0 96       	adiw	r24, 0x30	; 48
 6be:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	if(togglefive)
 6c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <togglefive>
 6c6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <togglefive+0x1>
 6ca:	89 2b       	or	r24, r25
 6cc:	39 f0       	breq	.+14     	; 0x6dc <screenClock+0x8e>
	LcdDataWrite(fifth + '0');
 6ce:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <fifth>
 6d2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <fifth+0x1>
 6d6:	c0 96       	adiw	r24, 0x30	; 48
 6d8:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	if(togglefour)
 6dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <togglefour>
 6e0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <togglefour+0x1>
 6e4:	89 2b       	or	r24, r25
 6e6:	39 f0       	breq	.+14     	; 0x6f6 <screenClock+0xa8>
	LcdDataWrite(fourth + '0');
 6e8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <fourth>
 6ec:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <fourth+0x1>
 6f0:	c0 96       	adiw	r24, 0x30	; 48
 6f2:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	if(togglethree)
 6f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <togglethree>
 6fa:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <togglethree+0x1>
 6fe:	89 2b       	or	r24, r25
 700:	39 f0       	breq	.+14     	; 0x710 <screenClock+0xc2>
	LcdDataWrite(third + '0');
 702:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <third>
 706:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <third+0x1>
 70a:	c0 96       	adiw	r24, 0x30	; 48
 70c:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	if(toggletwo)
 710:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 714:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 718:	89 2b       	or	r24, r25
 71a:	39 f0       	breq	.+14     	; 0x72a <screenClock+0xdc>
	LcdDataWrite(second + '0');
 71c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <second>
 720:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <second+0x1>
 724:	c0 96       	adiw	r24, 0x30	; 48
 726:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	LcdDataWrite(first + '0');
 72a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <first>
 72e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <first+0x1>
 732:	c0 96       	adiw	r24, 0x30	; 48
 734:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	
	printString("ms");
 738:	8a e0       	ldi	r24, 0x0A	; 10
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 04 01 	call	0x208	; 0x208 <printString>
 740:	08 95       	ret

00000742 <main>:
	
}

int main(void)
{
    initall();
 742:	0e 94 ed 01 	call	0x3da	; 0x3da <initall>
	
	sei();   // Enable global interrupts.
 746:	78 94       	sei
	
	LCDGotoXY(0,1);
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDGotoXY>
	printString("Jay Upadhyay");
 754:	8d e0       	ldi	r24, 0x0D	; 13
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 04 01 	call	0x208	; 0x208 <printString>
	//		}
	//	}
		switch_debounce();
		if(Software_counter<=0 && enabled){ // If we receive a button press. Then the program will enable the printing procedure. 
		screenClock();
		Software_counter = TIME;
 75c:	c1 e0       	ldi	r28, 0x01	; 1
 75e:	d0 e0       	ldi	r29, 0x00	; 0
	//	if(button_press){ // If we actually did press the button. 
	//	debounce_flag = 0;  // Reset debounce flag. 
	//	EIMSK |= 1<<INT1;   // Turn interrupt on again.
	//		}
	//	}
		switch_debounce();
 760:	0e 94 a1 01 	call	0x342	; 0x342 <switch_debounce>
		if(Software_counter<=0 && enabled){ // If we receive a button press. Then the program will enable the printing procedure. 
 764:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Software_counter>
 768:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Software_counter+0x1>
 76c:	18 16       	cp	r1, r24
 76e:	19 06       	cpc	r1, r25
 770:	bc f3       	brlt	.-18     	; 0x760 <main+0x1e>
 772:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <enabled>
 776:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <enabled+0x1>
 77a:	89 2b       	or	r24, r25
 77c:	89 f3       	breq	.-30     	; 0x760 <main+0x1e>
		screenClock();
 77e:	0e 94 27 03 	call	0x64e	; 0x64e <screenClock>
		Software_counter = TIME;
 782:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <Software_counter+0x1>
 786:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <Software_counter>
 78a:	ea cf       	rjmp	.-44     	; 0x760 <main+0x1e>

0000078c <_exit>:
 78c:	f8 94       	cli

0000078e <__stop_program>:
 78e:	ff cf       	rjmp	.-2      	; 0x78e <__stop_program>
