
lab_assignment4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00000fca  0000105e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  008001b8  008001b8  00001116  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b6  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c4  00000000  00000000  000028ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b00  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048e  00000000  00000000  00003e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa3  00000000  00000000  0000429a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00004d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3b       	cpi	r26, 0xB8	; 184
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 eb       	ldi	r26, 0xB8	; 184
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3e       	cpi	r26, 0xE8	; 232
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
  9e:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	// print data
	for(i=0; i<nBytes; i++)
	{
		LcdDataWrite(data[i]);
	}
}
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1f8:	08 95       	ret

000001fa <LCDGotoXY>:

void LCDGotoXY(uint8_t x, uint8_t y) //Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1fa:	61 30       	cpi	r22, 0x01	; 1
 1fc:	09 f4       	brne	.+2      	; 0x200 <LCDGotoXY+0x6>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1fe:	80 5c       	subi	r24, 0xC0	; 192
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LcdCommandWrite(1<<LCD_DDRAM | DDRAMAddr);	
 200:	80 68       	ori	r24, 0x80	; 128
 202:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 206:	08 95       	ret

00000208 <Push>:
	 
}

void start_timer()								  // Setting the pre-scaler starts the timer. 
{
	TCCR0B = (1<<CS01) | (1<<CS00);
 208:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <ind>
 20c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <ind+0x1>
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <ind+0x1>
 218:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <ind>
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	f9 01       	movw	r30, r18
 222:	e6 5e       	subi	r30, 0xE6	; 230
 224:	fd 4f       	sbci	r31, 0xFD	; 253
 226:	91 83       	std	Z+1, r25	; 0x01
 228:	80 83       	st	Z, r24
 22a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <size>
 22e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <size+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <size+0x1>
 238:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <size>
 23c:	08 95       	ret

0000023e <Pop>:
 23e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <ind>
 242:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <ind+0x1>
 246:	f9 01       	movw	r30, r18
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	e6 5e       	subi	r30, 0xE6	; 230
 24e:	fd 4f       	sbci	r31, 0xFD	; 253
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <size>
 258:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <size+0x1>
 25c:	41 50       	subi	r20, 0x01	; 1
 25e:	51 09       	sbc	r21, r1
 260:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <size+0x1>
 264:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <size>
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	31 09       	sbc	r19, r1
 26c:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <ind+0x1>
 270:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <ind>
 274:	08 95       	ret

00000276 <initializeAll>:
 276:	0e 94 c5 02 	call	0x58a	; 0x58a <uart_init>
 27a:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
 27e:	e2 ee       	ldi	r30, 0xE2	; 226
 280:	f2 e0       	ldi	r31, 0x02	; 2
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	95 83       	std	Z+5, r25	; 0x05
 288:	84 83       	std	Z+4, r24	; 0x04
 28a:	91 83       	std	Z+1, r25	; 0x01
 28c:	80 83       	st	Z, r24
 28e:	93 83       	std	Z+3, r25	; 0x03
 290:	82 83       	std	Z+2, r24	; 0x02
 292:	9c 01       	movw	r18, r24
 294:	43 e1       	ldi	r20, 0x13	; 19
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	86 e1       	ldi	r24, 0x16	; 22
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 97 04 	call	0x92e	; 0x92e <fwrite>
 2a4:	0e 94 75 04 	call	0x8ea	; 0x8ea <rand>
 2a8:	65 e0       	ldi	r22, 0x05	; 5
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 01 04 	call	0x802	; 0x802 <__divmodhi4>
 2b0:	02 96       	adiw	r24, 0x02	; 2
 2b2:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <rando+0x1>
 2b6:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <rando>
 2ba:	48 ee       	ldi	r20, 0xE8	; 232
 2bc:	53 e0       	ldi	r21, 0x03	; 3
 2be:	84 9f       	mul	r24, r20
 2c0:	90 01       	movw	r18, r0
 2c2:	85 9f       	mul	r24, r21
 2c4:	30 0d       	add	r19, r0
 2c6:	94 9f       	mul	r25, r20
 2c8:	30 0d       	add	r19, r0
 2ca:	11 24       	eor	r1, r1
 2cc:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <delay_time+0x1>
 2d0:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <delay_time>
 2d4:	25 9a       	sbi	0x04, 5	; 4
 2d6:	22 98       	cbi	0x04, 2	; 4
 2d8:	89 ef       	ldi	r24, 0xF9	; 249
 2da:	87 bd       	out	0x27, r24	; 39
 2dc:	ee e6       	ldi	r30, 0x6E	; 110
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	80 83       	st	Z, r24
 2e6:	84 b5       	in	r24, 0x24	; 36
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	84 bd       	out	0x24, r24	; 36
 2ec:	e9 e6       	ldi	r30, 0x69	; 105
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	88 60       	ori	r24, 0x08	; 8
 2f4:	80 83       	st	Z, r24
 2f6:	e9 9a       	sbi	0x1d, 1	; 29
 2f8:	78 94       	sei
 2fa:	08 95       	ret

000002fc <__vector_2>:
	TCCR0B = 0;									   // Clear the pre-scaler, this will turn off the clock.
	  
}

ISR(INT1_vect)									   // This interrupt will occur during a falling edge (Value of 0 at input due to button press). 
{							
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
	
	PORTB &= ~(1<<PORTB5);						   // Trigger falling edge. LED turns off here.  
 306:	2d 98       	cbi	0x05, 5	; 5
	
}
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_14>:


ISR(TIMER0_COMPA_vect)							  // Set this ISR so that it is called every 1ms 
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
	if(start_flag==1)
 320:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
 324:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <__data_end+0x1>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	49 f4       	brne	.+18     	; 0x33e <__vector_14+0x2c>
	start++;								      // Start will increase by 1 every millisecond. 
 32c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <start>
 330:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <start+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <start+0x1>
 33a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <start>
	
	if(SW_counter>0)
 33e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <SW_counter>
 342:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <SW_counter+0x1>
 346:	18 16       	cp	r1, r24
 348:	19 06       	cpc	r1, r25
 34a:	2c f4       	brge	.+10     	; 0x356 <__vector_14+0x44>
	SW_counter--; 
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <SW_counter+0x1>
 352:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SW_counter>
}
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <prinstring>:

void prinstring(char* c)
{
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	8c 01       	movw	r16, r24
 372:	7c 01       	movw	r14, r24
	for(int i = 0; i<strlen(c); i++)
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	07 c0       	rjmp	.+14     	; 0x388 <prinstring+0x24>
	LcdDataWrite(c[i]);
 37a:	f7 01       	movw	r30, r14
 37c:	81 91       	ld	r24, Z+
 37e:	7f 01       	movw	r14, r30
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	SW_counter--; 
}

void prinstring(char* c)
{
	for(int i = 0; i<strlen(c); i++)
 386:	21 96       	adiw	r28, 0x01	; 1
 388:	f8 01       	movw	r30, r16
 38a:	01 90       	ld	r0, Z+
 38c:	00 20       	and	r0, r0
 38e:	e9 f7       	brne	.-6      	; 0x38a <prinstring+0x26>
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	e0 1b       	sub	r30, r16
 394:	f1 0b       	sbc	r31, r17
 396:	ce 17       	cp	r28, r30
 398:	df 07       	cpc	r29, r31
 39a:	78 f3       	brcs	.-34     	; 0x37a <prinstring+0x16>
	LcdDataWrite(c[i]);
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	08 95       	ret

000003aa <printInteger>:

void printInteger(int x)  // This method will print a given integer onto the LCD. 
{
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	while(x!=0)
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	69 f0       	breq	.+26     	; 0x3d0 <printInteger+0x26>
	{
		Push(x%10);      // Push integer onto stack from left to right.
 3b6:	0a e0       	ldi	r16, 0x0A	; 10
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	b8 01       	movw	r22, r16
 3bc:	0e 94 01 04 	call	0x802	; 0x802 <__divmodhi4>
 3c0:	d6 2f       	mov	r29, r22
 3c2:	c7 2f       	mov	r28, r23
 3c4:	0e 94 04 01 	call	0x208	; 0x208 <Push>
		x = x/10;		 // Keep doing this until x goes to zero.  
 3c8:	8d 2f       	mov	r24, r29
 3ca:	9c 2f       	mov	r25, r28
	LcdDataWrite(c[i]);
}

void printInteger(int x)  // This method will print a given integer onto the LCD. 
{
	while(x!=0)
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	a9 f7       	brne	.-22     	; 0x3ba <printInteger+0x10>
	{
		Push(x%10);      // Push integer onto stack from left to right.
		x = x/10;		 // Keep doing this until x goes to zero.  
	}
	
	while(!isEmpty())
 3d0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <size>
 3d4:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <size+0x1>
 3d8:	89 2b       	or	r24, r25
 3da:	59 f0       	breq	.+22     	; 0x3f2 <printInteger+0x48>
	{
		LcdDataWrite(Pop()+'0');      // Print the value onto the LCD! 
 3dc:	0e 94 1f 01 	call	0x23e	; 0x23e <Pop>
 3e0:	c0 96       	adiw	r24, 0x30	; 48
 3e2:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	{
		Push(x%10);      // Push integer onto stack from left to right.
		x = x/10;		 // Keep doing this until x goes to zero.  
	}
	
	while(!isEmpty())
 3e6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <size>
 3ea:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <size+0x1>
 3ee:	89 2b       	or	r24, r25
 3f0:	a9 f7       	brne	.-22     	; 0x3dc <printInteger+0x32>
	{
		LcdDataWrite(Pop()+'0');      // Print the value onto the LCD! 
	}
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <stop_timer>:
	TCCR0B = (1<<CS01) | (1<<CS00);
}

void stop_timer()
{
	reps++;
 3fc:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <reps>
 400:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <reps+0x1>
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <reps+0x1>
 40a:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <reps>
	PORTB = 0;
 40e:	15 b8       	out	0x05, r1	; 5
	difference = start;							   // Store the amount of milliseconds inside difference.
 410:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <start>
 414:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <start+0x1>
 418:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <difference>
 41c:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <difference+0x1>
	start = 0;									   // Reset the start counter.
 420:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <start+0x1>
 424:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <start>
	fprintf(stdout, "Your reaction time is: %d ms\n",difference);
 428:	9f 93       	push	r25
 42a:	8f 93       	push	r24
 42c:	8a e2       	ldi	r24, 0x2A	; 42
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	9f 93       	push	r25
 432:	8f 93       	push	r24
 434:	e2 ee       	ldi	r30, 0xE2	; 226
 436:	f2 e0       	ldi	r31, 0x02	; 2
 438:	83 81       	ldd	r24, Z+3	; 0x03
 43a:	8f 93       	push	r24
 43c:	82 81       	ldd	r24, Z+2	; 0x02
 43e:	8f 93       	push	r24
 440:	0e 94 85 04 	call	0x90a	; 0x90a <fprintf>
	average += difference;
 444:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <average>
 448:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <average+0x1>
 44c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <difference>
 450:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <difference+0x1>
 454:	82 0f       	add	r24, r18
 456:	93 1f       	adc	r25, r19
	average = average/reps; 
 458:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <reps>
 45c:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <reps+0x1>
 460:	0e 94 01 04 	call	0x802	; 0x802 <__divmodhi4>
 464:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <average+0x1>
 468:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <average>
	start_flag = 0;								   // Turn off the flag. 
 46c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <__data_end+0x1>
 470:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__data_end>
	LCDclr();
 474:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
	printInteger(difference);
 478:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <difference>
 47c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <difference+0x1>
 480:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printInteger>
	prinstring(" ms");
 484:	88 e4       	ldi	r24, 0x48	; 72
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 b2 01 	call	0x364	; 0x364 <prinstring>
	LCDGotoXY(0,1);
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDGotoXY>
	prinstring("Average: ");
 498:	8c e4       	ldi	r24, 0x4C	; 76
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 b2 01 	call	0x364	; 0x364 <prinstring>
	printInteger(average);  
 4a0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <average>
 4a4:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <average+0x1>
 4a8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <printInteger>
	TCCR0B = 0;									   // Clear the pre-scaler, this will turn off the clock.
 4ac:	15 bc       	out	0x25, r1	; 37
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	08 95       	ret

000004bc <mydelay>:
}


void mydelay(int a)
{
	for(int i = 0; i<=a; i++)
 4bc:	99 23       	and	r25, r25
 4be:	6c f0       	brlt	.+26     	; 0x4da <mydelay+0x1e>
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c4:	ef e9       	ldi	r30, 0x9F	; 159
 4c6:	ff e0       	ldi	r31, 0x0F	; 15
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <mydelay+0xc>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <mydelay+0x12>
 4ce:	00 00       	nop
 4d0:	2f 5f       	subi	r18, 0xFF	; 255
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	82 17       	cp	r24, r18
 4d6:	93 07       	cpc	r25, r19
 4d8:	ac f7       	brge	.-22     	; 0x4c4 <mydelay+0x8>
 4da:	08 95       	ret

000004dc <main>:
	_delay_ms(1); 
}

int main(void)
{
	initializeAll();
 4dc:	0e 94 3b 01 	call	0x276	; 0x276 <initializeAll>
	
	prinstring("Press button");
 4e0:	86 e5       	ldi	r24, 0x56	; 86
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 b2 01 	call	0x364	; 0x364 <prinstring>
	
    while (1) 
    { 
	    //start = uart_getchar(&uart_str);
		 							  												   
		fprintf(stdout, "Ready......?\n");        // Print on the UART that we are asking for a button press in a random amount of seconds.
 4e8:	c2 ee       	ldi	r28, 0xE2	; 226
 4ea:	d2 e0       	ldi	r29, 0x02	; 2
		
		LCDclr();
		prinstring("Ready????");
		int x = rando * 1000;
 4ec:	08 ee       	ldi	r16, 0xE8	; 232
 4ee:	13 e0       	ldi	r17, 0x03	; 3
	 
}

void start_timer()								  // Setting the pre-scaler starts the timer. 
{
	TCCR0B = (1<<CS01) | (1<<CS00);
 4f0:	0f 2e       	mov	r0, r31
 4f2:	f3 e0       	ldi	r31, 0x03	; 3
 4f4:	ff 2e       	mov	r15, r31
 4f6:	f0 2d       	mov	r31, r0
	
    while (1) 
    { 
	    //start = uart_getchar(&uart_str);
		 							  												   
		fprintf(stdout, "Ready......?\n");        // Print on the UART that we are asking for a button press in a random amount of seconds.
 4f8:	2a 81       	ldd	r18, Y+2	; 0x02
 4fa:	3b 81       	ldd	r19, Y+3	; 0x03
 4fc:	4d e0       	ldi	r20, 0x0D	; 13
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	83 e6       	ldi	r24, 0x63	; 99
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	0e 94 97 04 	call	0x92e	; 0x92e <fwrite>
		
		LCDclr();
 50c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
		prinstring("Ready????");
 510:	81 e7       	ldi	r24, 0x71	; 113
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 b2 01 	call	0x364	; 0x364 <prinstring>
		int x = rando * 1000;
 518:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <rando>
 51c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <rando+0x1>
		mydelay(x);			                  // Wait a random amount of seconds. 
 520:	9c 01       	movw	r18, r24
 522:	20 9f       	mul	r18, r16
 524:	c0 01       	movw	r24, r0
 526:	21 9f       	mul	r18, r17
 528:	90 0d       	add	r25, r0
 52a:	30 9f       	mul	r19, r16
 52c:	90 0d       	add	r25, r0
 52e:	11 24       	eor	r1, r1
 530:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mydelay>
		LCDclr();
 534:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
		fprintf(stdout, "GO! \n");				  // Print on UART for the input.
 538:	2a 81       	ldd	r18, Y+2	; 0x02
 53a:	3b 81       	ldd	r19, Y+3	; 0x03
 53c:	45 e0       	ldi	r20, 0x05	; 5
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	8b e7       	ldi	r24, 0x7B	; 123
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 97 04 	call	0x92e	; 0x92e <fwrite>
		prinstring("GO!!");
 54c:	81 e8       	ldi	r24, 0x81	; 129
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 b2 01 	call	0x364	; 0x364 <prinstring>
		start_flag = 1;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <__data_end+0x1>
 55c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__data_end>
	 
}

void start_timer()								  // Setting the pre-scaler starts the timer. 
{
	TCCR0B = (1<<CS01) | (1<<CS00);
 560:	f5 bc       	out	0x25, r15	; 37
		LCDclr();
		fprintf(stdout, "GO! \n");				  // Print on UART for the input.
		prinstring("GO!!");
		start_flag = 1;
		start_timer(); 		
		while(!button_press){
 562:	1a 9b       	sbis	0x03, 2	; 3
 564:	03 c0       	rjmp	.+6      	; 0x56c <main+0x90>
							                      // Begin the timer, this will start counting until a pin interrupt occurs. 
		PORTB |= 1<<PORTB5;						  // Turn an LED on for PORTB and trigger a rising edge.
 566:	2d 9a       	sbi	0x05, 5	; 5
		LCDclr();
		fprintf(stdout, "GO! \n");				  // Print on UART for the input.
		prinstring("GO!!");
		start_flag = 1;
		start_timer(); 		
		while(!button_press){
 568:	1a 99       	sbic	0x03, 2	; 3
 56a:	fd cf       	rjmp	.-6      	; 0x566 <main+0x8a>
							                      // Begin the timer, this will start counting until a pin interrupt occurs. 
		PORTB |= 1<<PORTB5;						  // Turn an LED on for PORTB and trigger a rising edge.
		}
		
		stop_timer();
 56c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <stop_timer>
		
		fprintf(stdout, "Press button to try again to try Again! \n");
 570:	2a 81       	ldd	r18, Y+2	; 0x02
 572:	3b 81       	ldd	r19, Y+3	; 0x03
 574:	49 e2       	ldi	r20, 0x29	; 41
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	86 e8       	ldi	r24, 0x86	; 134
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	0e 94 97 04 	call	0x92e	; 0x92e <fwrite>
		while(!button_press);
 584:	1a 99       	sbic	0x03, 2	; 3
 586:	fe cf       	rjmp	.-4      	; 0x584 <main+0xa8>
 588:	b7 cf       	rjmp	.-146    	; 0x4f8 <main+0x1c>

0000058a <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 58a:	87 e6       	ldi	r24, 0x67	; 103
 58c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 590:	88 e1       	ldi	r24, 0x18	; 24
 592:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 596:	08 95       	ret

00000598 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 598:	cf 93       	push	r28
 59a:	c8 2f       	mov	r28, r24

  if (c == '\a')
 59c:	87 30       	cpi	r24, 0x07	; 7
 59e:	69 f4       	brne	.+26     	; 0x5ba <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 5a0:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <__iob+0x4>
 5a4:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <__iob+0x5>
 5a8:	47 e0       	ldi	r20, 0x07	; 7
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	80 eb       	ldi	r24, 0xB0	; 176
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 97 04 	call	0x92e	; 0x92e <fwrite>
      return 0;
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <uart_putchar+0x3a>
    }

  if (c == '\n')
 5ba:	8a 30       	cpi	r24, 0x0A	; 10
 5bc:	19 f4       	brne	.+6      	; 0x5c4 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 5be:	8d e0       	ldi	r24, 0x0D	; 13
 5c0:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 5c4:	e0 ec       	ldi	r30, 0xC0	; 192
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	90 81       	ld	r25, Z
 5ca:	95 ff       	sbrs	r25, 5
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <uart_putchar+0x30>
  UDR0 = c;
 5ce:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 5da:	6f 92       	push	r6
 5dc:	7f 92       	push	r7
 5de:	8f 92       	push	r8
 5e0:	9f 92       	push	r9
 5e2:	af 92       	push	r10
 5e4:	bf 92       	push	r11
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 5f6:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <rxp.1708>
 5fa:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <rxp.1708+0x1>
 5fe:	23 2b       	or	r18, r19
 600:	09 f0       	breq	.+2      	; 0x604 <uart_getchar+0x2a>
 602:	d5 c0       	rjmp	.+426    	; 0x7ae <uart_getchar+0x1d4>
 604:	8c 01       	movw	r16, r24
 606:	0f 2e       	mov	r0, r31
 608:	f2 ec       	ldi	r31, 0xC2	; 194
 60a:	8f 2e       	mov	r8, r31
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	9f 2e       	mov	r9, r31
 610:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 612:	c0 ec       	ldi	r28, 0xC0	; 192
 614:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 616:	0f 2e       	mov	r0, r31
 618:	f6 ec       	ldi	r31, 0xC6	; 198
 61a:	cf 2e       	mov	r12, r31
 61c:	d1 2c       	mov	r13, r1
 61e:	f0 2d       	mov	r31, r0
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 620:	54 01       	movw	r10, r8
 622:	0f 2e       	mov	r0, r31
 624:	f1 ec       	ldi	r31, 0xC1	; 193
 626:	6f 2e       	mov	r6, r31
 628:	f1 e0       	ldi	r31, 0x01	; 1
 62a:	7f 2e       	mov	r7, r31
 62c:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 62e:	88 81       	ld	r24, Y
 630:	88 23       	and	r24, r24
 632:	ec f7       	brge	.-6      	; 0x62e <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 634:	88 81       	ld	r24, Y
 636:	84 fd       	sbrc	r24, 4
 638:	cd c0       	rjmp	.+410    	; 0x7d4 <uart_getchar+0x1fa>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 63a:	88 81       	ld	r24, Y
 63c:	83 fd       	sbrc	r24, 3
 63e:	cd c0       	rjmp	.+410    	; 0x7da <uart_getchar+0x200>
	  return _FDEV_ERR;
	c = UDR0;
 640:	f6 01       	movw	r30, r12
 642:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 644:	8d 30       	cpi	r24, 0x0D	; 13
 646:	11 f0       	breq	.+4      	; 0x64c <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 648:	8a 30       	cpi	r24, 0x0A	; 10
 64a:	69 f4       	brne	.+26     	; 0x666 <uart_getchar+0x8c>
	  {
	    *cp = c;
 64c:	8a e0       	ldi	r24, 0x0A	; 10
 64e:	f4 01       	movw	r30, r8
 650:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 652:	b8 01       	movw	r22, r16
 654:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
	    rxp = b;
 658:	82 ec       	ldi	r24, 0xC2	; 194
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <rxp.1708+0x1>
 660:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <rxp.1708>
	    break;
 664:	a4 c0       	rjmp	.+328    	; 0x7ae <uart_getchar+0x1d4>
	  }
	else if (c == '\t')
 666:	89 30       	cpi	r24, 0x09	; 9
 668:	39 f0       	breq	.+14     	; 0x678 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 66a:	90 ee       	ldi	r25, 0xE0	; 224
 66c:	98 0f       	add	r25, r24
 66e:	9f 35       	cpi	r25, 0x5F	; 95
 670:	20 f0       	brcs	.+8      	; 0x67a <uart_getchar+0xa0>
 672:	80 3a       	cpi	r24, 0xA0	; 160
 674:	b8 f0       	brcs	.+46     	; 0x6a4 <uart_getchar+0xca>
 676:	01 c0       	rjmp	.+2      	; 0x67a <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 678:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 67a:	f1 e1       	ldi	r31, 0x11	; 17
 67c:	8f 16       	cp	r8, r31
 67e:	f2 e0       	ldi	r31, 0x02	; 2
 680:	9f 06       	cpc	r9, r31
 682:	29 f4       	brne	.+10     	; 0x68e <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 684:	b8 01       	movw	r22, r16
 686:	87 e0       	ldi	r24, 0x07	; 7
 688:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
 68c:	d0 cf       	rjmp	.-96     	; 0x62e <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 68e:	74 01       	movw	r14, r8
 690:	9f ef       	ldi	r25, 0xFF	; 255
 692:	e9 1a       	sub	r14, r25
 694:	f9 0a       	sbc	r15, r25
 696:	f4 01       	movw	r30, r8
 698:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 69a:	b8 01       	movw	r22, r16
 69c:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 6a0:	47 01       	movw	r8, r14
 6a2:	c5 cf       	rjmp	.-118    	; 0x62e <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 6a4:	82 31       	cpi	r24, 0x12	; 18
 6a6:	d1 f1       	breq	.+116    	; 0x71c <uart_getchar+0x142>
 6a8:	30 f4       	brcc	.+12     	; 0x6b6 <uart_getchar+0xdc>
 6aa:	83 30       	cpi	r24, 0x03	; 3
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <uart_getchar+0xd6>
 6ae:	98 c0       	rjmp	.+304    	; 0x7e0 <uart_getchar+0x206>
 6b0:	88 30       	cpi	r24, 0x08	; 8
 6b2:	e9 f0       	breq	.+58     	; 0x6ee <uart_getchar+0x114>
 6b4:	bc cf       	rjmp	.-136    	; 0x62e <uart_getchar+0x54>
 6b6:	87 31       	cpi	r24, 0x17	; 23
 6b8:	29 f0       	breq	.+10     	; 0x6c4 <uart_getchar+0xea>
 6ba:	8f 37       	cpi	r24, 0x7F	; 127
 6bc:	c1 f0       	breq	.+48     	; 0x6ee <uart_getchar+0x114>
 6be:	85 31       	cpi	r24, 0x15	; 21
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <uart_getchar+0x106>
 6c2:	b5 cf       	rjmp	.-150    	; 0x62e <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 6c4:	f2 ec       	ldi	r31, 0xC2	; 194
 6c6:	8f 16       	cp	r8, r31
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	9f 06       	cpc	r9, r31
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <uart_getchar+0xf6>
 6ce:	08 f4       	brcc	.+2      	; 0x6d2 <uart_getchar+0xf8>
 6d0:	ae cf       	rjmp	.-164    	; 0x62e <uart_getchar+0x54>
 6d2:	f4 01       	movw	r30, r8
 6d4:	31 97       	sbiw	r30, 0x01	; 1
 6d6:	80 81       	ld	r24, Z
 6d8:	80 32       	cpi	r24, 0x20	; 32
 6da:	09 f0       	breq	.+2      	; 0x6de <uart_getchar+0x104>
 6dc:	4d c0       	rjmp	.+154    	; 0x778 <uart_getchar+0x19e>
 6de:	a7 cf       	rjmp	.-178    	; 0x62e <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 6e0:	82 ec       	ldi	r24, 0xC2	; 194
 6e2:	88 16       	cp	r8, r24
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	98 06       	cpc	r9, r24
 6e8:	09 f0       	breq	.+2      	; 0x6ec <uart_getchar+0x112>
 6ea:	70 f5       	brcc	.+92     	; 0x748 <uart_getchar+0x16e>
 6ec:	a0 cf       	rjmp	.-192    	; 0x62e <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 6ee:	92 ec       	ldi	r25, 0xC2	; 194
 6f0:	89 16       	cp	r8, r25
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	99 06       	cpc	r9, r25
 6f6:	09 f0       	breq	.+2      	; 0x6fa <uart_getchar+0x120>
 6f8:	08 f4       	brcc	.+2      	; 0x6fc <uart_getchar+0x122>
 6fa:	99 cf       	rjmp	.-206    	; 0x62e <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 6fc:	b8 01       	movw	r22, r16
 6fe:	88 e0       	ldi	r24, 0x08	; 8
 700:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		uart_putchar(' ', stream);
 704:	b8 01       	movw	r22, r16
 706:	80 e2       	ldi	r24, 0x20	; 32
 708:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		uart_putchar('\b', stream);
 70c:	b8 01       	movw	r22, r16
 70e:	88 e0       	ldi	r24, 0x08	; 8
 710:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		cp--;
 714:	e1 e0       	ldi	r30, 0x01	; 1
 716:	8e 1a       	sub	r8, r30
 718:	91 08       	sbc	r9, r1
 71a:	89 cf       	rjmp	.-238    	; 0x62e <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 71c:	b8 01       	movw	r22, r16
 71e:	8d e0       	ldi	r24, 0x0D	; 13
 720:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 724:	f2 ec       	ldi	r31, 0xC2	; 194
 726:	8f 16       	cp	r8, r31
 728:	f1 e0       	ldi	r31, 0x01	; 1
 72a:	9f 06       	cpc	r9, r31
 72c:	09 f0       	breq	.+2      	; 0x730 <uart_getchar+0x156>
 72e:	08 f4       	brcc	.+2      	; 0x732 <uart_getchar+0x158>
 730:	7e cf       	rjmp	.-260    	; 0x62e <uart_getchar+0x54>
 732:	75 01       	movw	r14, r10
	      uart_putchar(*cp2, stream);
 734:	b8 01       	movw	r22, r16
 736:	f7 01       	movw	r30, r14
 738:	81 91       	ld	r24, Z+
 73a:	7f 01       	movw	r14, r30
 73c:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 740:	e8 14       	cp	r14, r8
 742:	f9 04       	cpc	r15, r9
 744:	b9 f7       	brne	.-18     	; 0x734 <uart_getchar+0x15a>
 746:	73 cf       	rjmp	.-282    	; 0x62e <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 748:	b8 01       	movw	r22, r16
 74a:	88 e0       	ldi	r24, 0x08	; 8
 74c:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		uart_putchar(' ', stream);
 750:	b8 01       	movw	r22, r16
 752:	80 e2       	ldi	r24, 0x20	; 32
 754:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		uart_putchar('\b', stream);
 758:	b8 01       	movw	r22, r16
 75a:	88 e0       	ldi	r24, 0x08	; 8
 75c:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		cp--;
 760:	f1 e0       	ldi	r31, 0x01	; 1
 762:	8f 1a       	sub	r8, r31
 764:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 766:	82 ec       	ldi	r24, 0xC2	; 194
 768:	88 16       	cp	r8, r24
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	98 06       	cpc	r9, r24
 76e:	61 f7       	brne	.-40     	; 0x748 <uart_getchar+0x16e>
 770:	f3 01       	movw	r30, r6
 772:	31 96       	adiw	r30, 0x01	; 1
 774:	4f 01       	movw	r8, r30
 776:	5b cf       	rjmp	.-330    	; 0x62e <uart_getchar+0x54>
 778:	74 01       	movw	r14, r8
 77a:	f1 e0       	ldi	r31, 0x01	; 1
 77c:	ef 1a       	sub	r14, r31
 77e:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 780:	b8 01       	movw	r22, r16
 782:	88 e0       	ldi	r24, 0x08	; 8
 784:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		uart_putchar(' ', stream);
 788:	b8 01       	movw	r22, r16
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		uart_putchar('\b', stream);
 790:	b8 01       	movw	r22, r16
 792:	88 e0       	ldi	r24, 0x08	; 8
 794:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>
		cp--;
 798:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 79a:	ea 14       	cp	r14, r10
 79c:	fb 04       	cpc	r15, r11
 79e:	09 f4       	brne	.+2      	; 0x7a2 <uart_getchar+0x1c8>
 7a0:	46 cf       	rjmp	.-372    	; 0x62e <uart_getchar+0x54>
 7a2:	f7 01       	movw	r30, r14
 7a4:	82 91       	ld	r24, -Z
 7a6:	7f 01       	movw	r14, r30
 7a8:	80 32       	cpi	r24, 0x20	; 32
 7aa:	51 f7       	brne	.-44     	; 0x780 <uart_getchar+0x1a6>
 7ac:	40 cf       	rjmp	.-384    	; 0x62e <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 7ae:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <rxp.1708>
 7b2:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <rxp.1708+0x1>
 7b6:	cf 01       	movw	r24, r30
 7b8:	01 96       	adiw	r24, 0x01	; 1
 7ba:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <rxp.1708+0x1>
 7be:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <rxp.1708>
 7c2:	80 81       	ld	r24, Z
  if (c == '\n')
 7c4:	8a 30       	cpi	r24, 0x0A	; 10
 7c6:	21 f4       	brne	.+8      	; 0x7d0 <uart_getchar+0x1f6>
    rxp = 0;
 7c8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <rxp.1708+0x1>
 7cc:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <rxp.1708>

  return c;
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <uart_getchar+0x20a>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 7d4:	8e ef       	ldi	r24, 0xFE	; 254
 7d6:	9f ef       	ldi	r25, 0xFF	; 255
 7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <uart_getchar+0x20a>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	9f ef       	ldi	r25, 0xFF	; 255
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <uart_getchar+0x20a>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	0f 91       	pop	r16
 7ec:	ff 90       	pop	r15
 7ee:	ef 90       	pop	r14
 7f0:	df 90       	pop	r13
 7f2:	cf 90       	pop	r12
 7f4:	bf 90       	pop	r11
 7f6:	af 90       	pop	r10
 7f8:	9f 90       	pop	r9
 7fa:	8f 90       	pop	r8
 7fc:	7f 90       	pop	r7
 7fe:	6f 90       	pop	r6
 800:	08 95       	ret

00000802 <__divmodhi4>:
 802:	97 fb       	bst	r25, 7
 804:	07 2e       	mov	r0, r23
 806:	16 f4       	brtc	.+4      	; 0x80c <__divmodhi4+0xa>
 808:	00 94       	com	r0
 80a:	07 d0       	rcall	.+14     	; 0x81a <__divmodhi4_neg1>
 80c:	77 fd       	sbrc	r23, 7
 80e:	09 d0       	rcall	.+18     	; 0x822 <__divmodhi4_neg2>
 810:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodhi4>
 814:	07 fc       	sbrc	r0, 7
 816:	05 d0       	rcall	.+10     	; 0x822 <__divmodhi4_neg2>
 818:	3e f4       	brtc	.+14     	; 0x828 <__divmodhi4_exit>

0000081a <__divmodhi4_neg1>:
 81a:	90 95       	com	r25
 81c:	81 95       	neg	r24
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__divmodhi4_neg2>:
 822:	70 95       	com	r23
 824:	61 95       	neg	r22
 826:	7f 4f       	sbci	r23, 0xFF	; 255

00000828 <__divmodhi4_exit>:
 828:	08 95       	ret

0000082a <__udivmodhi4>:
 82a:	aa 1b       	sub	r26, r26
 82c:	bb 1b       	sub	r27, r27
 82e:	51 e1       	ldi	r21, 0x11	; 17
 830:	07 c0       	rjmp	.+14     	; 0x840 <__udivmodhi4_ep>

00000832 <__udivmodhi4_loop>:
 832:	aa 1f       	adc	r26, r26
 834:	bb 1f       	adc	r27, r27
 836:	a6 17       	cp	r26, r22
 838:	b7 07       	cpc	r27, r23
 83a:	10 f0       	brcs	.+4      	; 0x840 <__udivmodhi4_ep>
 83c:	a6 1b       	sub	r26, r22
 83e:	b7 0b       	sbc	r27, r23

00000840 <__udivmodhi4_ep>:
 840:	88 1f       	adc	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	5a 95       	dec	r21
 846:	a9 f7       	brne	.-22     	; 0x832 <__udivmodhi4_loop>
 848:	80 95       	com	r24
 84a:	90 95       	com	r25
 84c:	bc 01       	movw	r22, r24
 84e:	cd 01       	movw	r24, r26
 850:	08 95       	ret

00000852 <do_rand>:
 852:	8f 92       	push	r8
 854:	9f 92       	push	r9
 856:	af 92       	push	r10
 858:	bf 92       	push	r11
 85a:	cf 92       	push	r12
 85c:	df 92       	push	r13
 85e:	ef 92       	push	r14
 860:	ff 92       	push	r15
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	ec 01       	movw	r28, r24
 868:	68 81       	ld	r22, Y
 86a:	79 81       	ldd	r23, Y+1	; 0x01
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	9b 81       	ldd	r25, Y+3	; 0x03
 870:	61 15       	cp	r22, r1
 872:	71 05       	cpc	r23, r1
 874:	81 05       	cpc	r24, r1
 876:	91 05       	cpc	r25, r1
 878:	21 f4       	brne	.+8      	; 0x882 <do_rand+0x30>
 87a:	64 e2       	ldi	r22, 0x24	; 36
 87c:	79 ed       	ldi	r23, 0xD9	; 217
 87e:	8b e5       	ldi	r24, 0x5B	; 91
 880:	97 e0       	ldi	r25, 0x07	; 7
 882:	2d e1       	ldi	r18, 0x1D	; 29
 884:	33 ef       	ldi	r19, 0xF3	; 243
 886:	41 e0       	ldi	r20, 0x01	; 1
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	0e 94 49 07 	call	0xe92	; 0xe92 <__divmodsi4>
 88e:	49 01       	movw	r8, r18
 890:	5a 01       	movw	r10, r20
 892:	9b 01       	movw	r18, r22
 894:	ac 01       	movw	r20, r24
 896:	a7 ea       	ldi	r26, 0xA7	; 167
 898:	b1 e4       	ldi	r27, 0x41	; 65
 89a:	0e 94 68 07 	call	0xed0	; 0xed0 <__muluhisi3>
 89e:	6b 01       	movw	r12, r22
 8a0:	7c 01       	movw	r14, r24
 8a2:	ac ee       	ldi	r26, 0xEC	; 236
 8a4:	b4 ef       	ldi	r27, 0xF4	; 244
 8a6:	a5 01       	movw	r20, r10
 8a8:	94 01       	movw	r18, r8
 8aa:	0e 94 76 07 	call	0xeec	; 0xeec <__mulohisi3>
 8ae:	dc 01       	movw	r26, r24
 8b0:	cb 01       	movw	r24, r22
 8b2:	8c 0d       	add	r24, r12
 8b4:	9d 1d       	adc	r25, r13
 8b6:	ae 1d       	adc	r26, r14
 8b8:	bf 1d       	adc	r27, r15
 8ba:	b7 ff       	sbrs	r27, 7
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <do_rand+0x72>
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	a1 09       	sbc	r26, r1
 8c2:	b0 48       	sbci	r27, 0x80	; 128
 8c4:	88 83       	st	Y, r24
 8c6:	99 83       	std	Y+1, r25	; 0x01
 8c8:	aa 83       	std	Y+2, r26	; 0x02
 8ca:	bb 83       	std	Y+3, r27	; 0x03
 8cc:	9f 77       	andi	r25, 0x7F	; 127
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	ff 90       	pop	r15
 8d4:	ef 90       	pop	r14
 8d6:	df 90       	pop	r13
 8d8:	cf 90       	pop	r12
 8da:	bf 90       	pop	r11
 8dc:	af 90       	pop	r10
 8de:	9f 90       	pop	r9
 8e0:	8f 90       	pop	r8
 8e2:	08 95       	ret

000008e4 <rand_r>:
 8e4:	0e 94 29 04 	call	0x852	; 0x852 <do_rand>
 8e8:	08 95       	ret

000008ea <rand>:
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	0e 94 29 04 	call	0x852	; 0x852 <do_rand>
 8f2:	08 95       	ret

000008f4 <srand>:
 8f4:	a0 e0       	ldi	r26, 0x00	; 0
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 900:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 904:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 908:	08 95       	ret

0000090a <fprintf>:
 90a:	a0 e0       	ldi	r26, 0x00	; 0
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	eb e8       	ldi	r30, 0x8B	; 139
 910:	f4 e0       	ldi	r31, 0x04	; 4
 912:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__prologue_saves__+0x20>
 916:	ae 01       	movw	r20, r28
 918:	47 5f       	subi	r20, 0xF7	; 247
 91a:	5f 4f       	sbci	r21, 0xFF	; 255
 91c:	6f 81       	ldd	r22, Y+7	; 0x07
 91e:	78 85       	ldd	r23, Y+8	; 0x08
 920:	8d 81       	ldd	r24, Y+5	; 0x05
 922:	9e 81       	ldd	r25, Y+6	; 0x06
 924:	0e 94 cb 04 	call	0x996	; 0x996 <vfprintf>
 928:	e2 e0       	ldi	r30, 0x02	; 2
 92a:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__epilogue_restores__+0x20>

0000092e <fwrite>:
 92e:	a0 e0       	ldi	r26, 0x00	; 0
 930:	b0 e0       	ldi	r27, 0x00	; 0
 932:	ed e9       	ldi	r30, 0x9D	; 157
 934:	f4 e0       	ldi	r31, 0x04	; 4
 936:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__prologue_saves__+0xc>
 93a:	5b 01       	movw	r10, r22
 93c:	4a 01       	movw	r8, r20
 93e:	79 01       	movw	r14, r18
 940:	d9 01       	movw	r26, r18
 942:	13 96       	adiw	r26, 0x03	; 3
 944:	2c 91       	ld	r18, X
 946:	21 ff       	sbrs	r18, 1
 948:	1d c0       	rjmp	.+58     	; 0x984 <fwrite+0x56>
 94a:	c0 e0       	ldi	r28, 0x00	; 0
 94c:	d0 e0       	ldi	r29, 0x00	; 0
 94e:	c8 15       	cp	r28, r8
 950:	d9 05       	cpc	r29, r9
 952:	d9 f0       	breq	.+54     	; 0x98a <fwrite+0x5c>
 954:	8c 01       	movw	r16, r24
 956:	6c 01       	movw	r12, r24
 958:	ca 0c       	add	r12, r10
 95a:	db 1c       	adc	r13, r11
 95c:	c8 01       	movw	r24, r16
 95e:	0c 15       	cp	r16, r12
 960:	1d 05       	cpc	r17, r13
 962:	71 f0       	breq	.+28     	; 0x980 <fwrite+0x52>
 964:	0f 5f       	subi	r16, 0xFF	; 255
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	d7 01       	movw	r26, r14
 96a:	18 96       	adiw	r26, 0x08	; 8
 96c:	ed 91       	ld	r30, X+
 96e:	fc 91       	ld	r31, X
 970:	19 97       	sbiw	r26, 0x09	; 9
 972:	b7 01       	movw	r22, r14
 974:	dc 01       	movw	r26, r24
 976:	8c 91       	ld	r24, X
 978:	09 95       	icall
 97a:	89 2b       	or	r24, r25
 97c:	79 f3       	breq	.-34     	; 0x95c <fwrite+0x2e>
 97e:	05 c0       	rjmp	.+10     	; 0x98a <fwrite+0x5c>
 980:	21 96       	adiw	r28, 0x01	; 1
 982:	e5 cf       	rjmp	.-54     	; 0x94e <fwrite+0x20>
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	01 c0       	rjmp	.+2      	; 0x98c <fwrite+0x5e>
 98a:	ce 01       	movw	r24, r28
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
 990:	ec e0       	ldi	r30, 0x0C	; 12
 992:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__epilogue_restores__+0xc>

00000996 <vfprintf>:
 996:	ac e0       	ldi	r26, 0x0C	; 12
 998:	b0 e0       	ldi	r27, 0x00	; 0
 99a:	e1 ed       	ldi	r30, 0xD1	; 209
 99c:	f4 e0       	ldi	r31, 0x04	; 4
 99e:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__prologue_saves__>
 9a2:	7c 01       	movw	r14, r24
 9a4:	6b 01       	movw	r12, r22
 9a6:	8a 01       	movw	r16, r20
 9a8:	fc 01       	movw	r30, r24
 9aa:	17 82       	std	Z+7, r1	; 0x07
 9ac:	16 82       	std	Z+6, r1	; 0x06
 9ae:	83 81       	ldd	r24, Z+3	; 0x03
 9b0:	81 ff       	sbrs	r24, 1
 9b2:	bd c1       	rjmp	.+890    	; 0xd2e <vfprintf+0x398>
 9b4:	ce 01       	movw	r24, r28
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	4c 01       	movw	r8, r24
 9ba:	f7 01       	movw	r30, r14
 9bc:	93 81       	ldd	r25, Z+3	; 0x03
 9be:	f6 01       	movw	r30, r12
 9c0:	93 fd       	sbrc	r25, 3
 9c2:	85 91       	lpm	r24, Z+
 9c4:	93 ff       	sbrs	r25, 3
 9c6:	81 91       	ld	r24, Z+
 9c8:	6f 01       	movw	r12, r30
 9ca:	88 23       	and	r24, r24
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <vfprintf+0x3a>
 9ce:	ab c1       	rjmp	.+854    	; 0xd26 <vfprintf+0x390>
 9d0:	85 32       	cpi	r24, 0x25	; 37
 9d2:	39 f4       	brne	.+14     	; 0x9e2 <vfprintf+0x4c>
 9d4:	93 fd       	sbrc	r25, 3
 9d6:	85 91       	lpm	r24, Z+
 9d8:	93 ff       	sbrs	r25, 3
 9da:	81 91       	ld	r24, Z+
 9dc:	6f 01       	movw	r12, r30
 9de:	85 32       	cpi	r24, 0x25	; 37
 9e0:	29 f4       	brne	.+10     	; 0x9ec <vfprintf+0x56>
 9e2:	b7 01       	movw	r22, r14
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 9ea:	e7 cf       	rjmp	.-50     	; 0x9ba <vfprintf+0x24>
 9ec:	51 2c       	mov	r5, r1
 9ee:	31 2c       	mov	r3, r1
 9f0:	20 e0       	ldi	r18, 0x00	; 0
 9f2:	20 32       	cpi	r18, 0x20	; 32
 9f4:	a0 f4       	brcc	.+40     	; 0xa1e <vfprintf+0x88>
 9f6:	8b 32       	cpi	r24, 0x2B	; 43
 9f8:	69 f0       	breq	.+26     	; 0xa14 <vfprintf+0x7e>
 9fa:	30 f4       	brcc	.+12     	; 0xa08 <vfprintf+0x72>
 9fc:	80 32       	cpi	r24, 0x20	; 32
 9fe:	59 f0       	breq	.+22     	; 0xa16 <vfprintf+0x80>
 a00:	83 32       	cpi	r24, 0x23	; 35
 a02:	69 f4       	brne	.+26     	; 0xa1e <vfprintf+0x88>
 a04:	20 61       	ori	r18, 0x10	; 16
 a06:	2c c0       	rjmp	.+88     	; 0xa60 <vfprintf+0xca>
 a08:	8d 32       	cpi	r24, 0x2D	; 45
 a0a:	39 f0       	breq	.+14     	; 0xa1a <vfprintf+0x84>
 a0c:	80 33       	cpi	r24, 0x30	; 48
 a0e:	39 f4       	brne	.+14     	; 0xa1e <vfprintf+0x88>
 a10:	21 60       	ori	r18, 0x01	; 1
 a12:	26 c0       	rjmp	.+76     	; 0xa60 <vfprintf+0xca>
 a14:	22 60       	ori	r18, 0x02	; 2
 a16:	24 60       	ori	r18, 0x04	; 4
 a18:	23 c0       	rjmp	.+70     	; 0xa60 <vfprintf+0xca>
 a1a:	28 60       	ori	r18, 0x08	; 8
 a1c:	21 c0       	rjmp	.+66     	; 0xa60 <vfprintf+0xca>
 a1e:	27 fd       	sbrc	r18, 7
 a20:	27 c0       	rjmp	.+78     	; 0xa70 <vfprintf+0xda>
 a22:	30 ed       	ldi	r19, 0xD0	; 208
 a24:	38 0f       	add	r19, r24
 a26:	3a 30       	cpi	r19, 0x0A	; 10
 a28:	78 f4       	brcc	.+30     	; 0xa48 <vfprintf+0xb2>
 a2a:	26 ff       	sbrs	r18, 6
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <vfprintf+0xa4>
 a2e:	fa e0       	ldi	r31, 0x0A	; 10
 a30:	5f 9e       	mul	r5, r31
 a32:	30 0d       	add	r19, r0
 a34:	11 24       	eor	r1, r1
 a36:	53 2e       	mov	r5, r19
 a38:	13 c0       	rjmp	.+38     	; 0xa60 <vfprintf+0xca>
 a3a:	8a e0       	ldi	r24, 0x0A	; 10
 a3c:	38 9e       	mul	r3, r24
 a3e:	30 0d       	add	r19, r0
 a40:	11 24       	eor	r1, r1
 a42:	33 2e       	mov	r3, r19
 a44:	20 62       	ori	r18, 0x20	; 32
 a46:	0c c0       	rjmp	.+24     	; 0xa60 <vfprintf+0xca>
 a48:	8e 32       	cpi	r24, 0x2E	; 46
 a4a:	21 f4       	brne	.+8      	; 0xa54 <vfprintf+0xbe>
 a4c:	26 fd       	sbrc	r18, 6
 a4e:	6b c1       	rjmp	.+726    	; 0xd26 <vfprintf+0x390>
 a50:	20 64       	ori	r18, 0x40	; 64
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <vfprintf+0xca>
 a54:	8c 36       	cpi	r24, 0x6C	; 108
 a56:	11 f4       	brne	.+4      	; 0xa5c <vfprintf+0xc6>
 a58:	20 68       	ori	r18, 0x80	; 128
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0xca>
 a5c:	88 36       	cpi	r24, 0x68	; 104
 a5e:	41 f4       	brne	.+16     	; 0xa70 <vfprintf+0xda>
 a60:	f6 01       	movw	r30, r12
 a62:	93 fd       	sbrc	r25, 3
 a64:	85 91       	lpm	r24, Z+
 a66:	93 ff       	sbrs	r25, 3
 a68:	81 91       	ld	r24, Z+
 a6a:	6f 01       	movw	r12, r30
 a6c:	81 11       	cpse	r24, r1
 a6e:	c1 cf       	rjmp	.-126    	; 0x9f2 <vfprintf+0x5c>
 a70:	98 2f       	mov	r25, r24
 a72:	9f 7d       	andi	r25, 0xDF	; 223
 a74:	95 54       	subi	r25, 0x45	; 69
 a76:	93 30       	cpi	r25, 0x03	; 3
 a78:	28 f4       	brcc	.+10     	; 0xa84 <vfprintf+0xee>
 a7a:	0c 5f       	subi	r16, 0xFC	; 252
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	ff e3       	ldi	r31, 0x3F	; 63
 a80:	f9 83       	std	Y+1, r31	; 0x01
 a82:	0d c0       	rjmp	.+26     	; 0xa9e <vfprintf+0x108>
 a84:	83 36       	cpi	r24, 0x63	; 99
 a86:	31 f0       	breq	.+12     	; 0xa94 <vfprintf+0xfe>
 a88:	83 37       	cpi	r24, 0x73	; 115
 a8a:	71 f0       	breq	.+28     	; 0xaa8 <vfprintf+0x112>
 a8c:	83 35       	cpi	r24, 0x53	; 83
 a8e:	09 f0       	breq	.+2      	; 0xa92 <vfprintf+0xfc>
 a90:	5b c0       	rjmp	.+182    	; 0xb48 <vfprintf+0x1b2>
 a92:	22 c0       	rjmp	.+68     	; 0xad8 <vfprintf+0x142>
 a94:	f8 01       	movw	r30, r16
 a96:	80 81       	ld	r24, Z
 a98:	89 83       	std	Y+1, r24	; 0x01
 a9a:	0e 5f       	subi	r16, 0xFE	; 254
 a9c:	1f 4f       	sbci	r17, 0xFF	; 255
 a9e:	44 24       	eor	r4, r4
 aa0:	43 94       	inc	r4
 aa2:	51 2c       	mov	r5, r1
 aa4:	54 01       	movw	r10, r8
 aa6:	15 c0       	rjmp	.+42     	; 0xad2 <vfprintf+0x13c>
 aa8:	38 01       	movw	r6, r16
 aaa:	f2 e0       	ldi	r31, 0x02	; 2
 aac:	6f 0e       	add	r6, r31
 aae:	71 1c       	adc	r7, r1
 ab0:	f8 01       	movw	r30, r16
 ab2:	a0 80       	ld	r10, Z
 ab4:	b1 80       	ldd	r11, Z+1	; 0x01
 ab6:	26 ff       	sbrs	r18, 6
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <vfprintf+0x12a>
 aba:	65 2d       	mov	r22, r5
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <vfprintf+0x12e>
 ac0:	6f ef       	ldi	r22, 0xFF	; 255
 ac2:	7f ef       	ldi	r23, 0xFF	; 255
 ac4:	c5 01       	movw	r24, r10
 ac6:	2c 87       	std	Y+12, r18	; 0x0c
 ac8:	0e 94 a8 06 	call	0xd50	; 0xd50 <strnlen>
 acc:	2c 01       	movw	r4, r24
 ace:	83 01       	movw	r16, r6
 ad0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ad2:	2f 77       	andi	r18, 0x7F	; 127
 ad4:	22 2e       	mov	r2, r18
 ad6:	17 c0       	rjmp	.+46     	; 0xb06 <vfprintf+0x170>
 ad8:	38 01       	movw	r6, r16
 ada:	f2 e0       	ldi	r31, 0x02	; 2
 adc:	6f 0e       	add	r6, r31
 ade:	71 1c       	adc	r7, r1
 ae0:	f8 01       	movw	r30, r16
 ae2:	a0 80       	ld	r10, Z
 ae4:	b1 80       	ldd	r11, Z+1	; 0x01
 ae6:	26 ff       	sbrs	r18, 6
 ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <vfprintf+0x15a>
 aea:	65 2d       	mov	r22, r5
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x15e>
 af0:	6f ef       	ldi	r22, 0xFF	; 255
 af2:	7f ef       	ldi	r23, 0xFF	; 255
 af4:	c5 01       	movw	r24, r10
 af6:	2c 87       	std	Y+12, r18	; 0x0c
 af8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <strnlen_P>
 afc:	2c 01       	movw	r4, r24
 afe:	2c 85       	ldd	r18, Y+12	; 0x0c
 b00:	20 68       	ori	r18, 0x80	; 128
 b02:	22 2e       	mov	r2, r18
 b04:	83 01       	movw	r16, r6
 b06:	23 fc       	sbrc	r2, 3
 b08:	1b c0       	rjmp	.+54     	; 0xb40 <vfprintf+0x1aa>
 b0a:	83 2d       	mov	r24, r3
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	48 16       	cp	r4, r24
 b10:	59 06       	cpc	r5, r25
 b12:	b0 f4       	brcc	.+44     	; 0xb40 <vfprintf+0x1aa>
 b14:	b7 01       	movw	r22, r14
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 b1e:	3a 94       	dec	r3
 b20:	f4 cf       	rjmp	.-24     	; 0xb0a <vfprintf+0x174>
 b22:	f5 01       	movw	r30, r10
 b24:	27 fc       	sbrc	r2, 7
 b26:	85 91       	lpm	r24, Z+
 b28:	27 fe       	sbrs	r2, 7
 b2a:	81 91       	ld	r24, Z+
 b2c:	5f 01       	movw	r10, r30
 b2e:	b7 01       	movw	r22, r14
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 b36:	31 10       	cpse	r3, r1
 b38:	3a 94       	dec	r3
 b3a:	f1 e0       	ldi	r31, 0x01	; 1
 b3c:	4f 1a       	sub	r4, r31
 b3e:	51 08       	sbc	r5, r1
 b40:	41 14       	cp	r4, r1
 b42:	51 04       	cpc	r5, r1
 b44:	71 f7       	brne	.-36     	; 0xb22 <vfprintf+0x18c>
 b46:	e5 c0       	rjmp	.+458    	; 0xd12 <vfprintf+0x37c>
 b48:	84 36       	cpi	r24, 0x64	; 100
 b4a:	11 f0       	breq	.+4      	; 0xb50 <vfprintf+0x1ba>
 b4c:	89 36       	cpi	r24, 0x69	; 105
 b4e:	39 f5       	brne	.+78     	; 0xb9e <vfprintf+0x208>
 b50:	f8 01       	movw	r30, r16
 b52:	27 ff       	sbrs	r18, 7
 b54:	07 c0       	rjmp	.+14     	; 0xb64 <vfprintf+0x1ce>
 b56:	60 81       	ld	r22, Z
 b58:	71 81       	ldd	r23, Z+1	; 0x01
 b5a:	82 81       	ldd	r24, Z+2	; 0x02
 b5c:	93 81       	ldd	r25, Z+3	; 0x03
 b5e:	0c 5f       	subi	r16, 0xFC	; 252
 b60:	1f 4f       	sbci	r17, 0xFF	; 255
 b62:	08 c0       	rjmp	.+16     	; 0xb74 <vfprintf+0x1de>
 b64:	60 81       	ld	r22, Z
 b66:	71 81       	ldd	r23, Z+1	; 0x01
 b68:	07 2e       	mov	r0, r23
 b6a:	00 0c       	add	r0, r0
 b6c:	88 0b       	sbc	r24, r24
 b6e:	99 0b       	sbc	r25, r25
 b70:	0e 5f       	subi	r16, 0xFE	; 254
 b72:	1f 4f       	sbci	r17, 0xFF	; 255
 b74:	2f 76       	andi	r18, 0x6F	; 111
 b76:	72 2e       	mov	r7, r18
 b78:	97 ff       	sbrs	r25, 7
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <vfprintf+0x1f8>
 b7c:	90 95       	com	r25
 b7e:	80 95       	com	r24
 b80:	70 95       	com	r23
 b82:	61 95       	neg	r22
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	20 68       	ori	r18, 0x80	; 128
 b8c:	72 2e       	mov	r7, r18
 b8e:	2a e0       	ldi	r18, 0x0A	; 10
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	a4 01       	movw	r20, r8
 b94:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__ultoa_invert>
 b98:	a8 2e       	mov	r10, r24
 b9a:	a8 18       	sub	r10, r8
 b9c:	44 c0       	rjmp	.+136    	; 0xc26 <vfprintf+0x290>
 b9e:	85 37       	cpi	r24, 0x75	; 117
 ba0:	29 f4       	brne	.+10     	; 0xbac <vfprintf+0x216>
 ba2:	2f 7e       	andi	r18, 0xEF	; 239
 ba4:	b2 2e       	mov	r11, r18
 ba6:	2a e0       	ldi	r18, 0x0A	; 10
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	25 c0       	rjmp	.+74     	; 0xbf6 <vfprintf+0x260>
 bac:	f2 2f       	mov	r31, r18
 bae:	f9 7f       	andi	r31, 0xF9	; 249
 bb0:	bf 2e       	mov	r11, r31
 bb2:	8f 36       	cpi	r24, 0x6F	; 111
 bb4:	c1 f0       	breq	.+48     	; 0xbe6 <vfprintf+0x250>
 bb6:	18 f4       	brcc	.+6      	; 0xbbe <vfprintf+0x228>
 bb8:	88 35       	cpi	r24, 0x58	; 88
 bba:	79 f0       	breq	.+30     	; 0xbda <vfprintf+0x244>
 bbc:	b4 c0       	rjmp	.+360    	; 0xd26 <vfprintf+0x390>
 bbe:	80 37       	cpi	r24, 0x70	; 112
 bc0:	19 f0       	breq	.+6      	; 0xbc8 <vfprintf+0x232>
 bc2:	88 37       	cpi	r24, 0x78	; 120
 bc4:	21 f0       	breq	.+8      	; 0xbce <vfprintf+0x238>
 bc6:	af c0       	rjmp	.+350    	; 0xd26 <vfprintf+0x390>
 bc8:	2f 2f       	mov	r18, r31
 bca:	20 61       	ori	r18, 0x10	; 16
 bcc:	b2 2e       	mov	r11, r18
 bce:	b4 fe       	sbrs	r11, 4
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <vfprintf+0x256>
 bd2:	8b 2d       	mov	r24, r11
 bd4:	84 60       	ori	r24, 0x04	; 4
 bd6:	b8 2e       	mov	r11, r24
 bd8:	09 c0       	rjmp	.+18     	; 0xbec <vfprintf+0x256>
 bda:	24 ff       	sbrs	r18, 4
 bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <vfprintf+0x25c>
 bde:	9f 2f       	mov	r25, r31
 be0:	96 60       	ori	r25, 0x06	; 6
 be2:	b9 2e       	mov	r11, r25
 be4:	06 c0       	rjmp	.+12     	; 0xbf2 <vfprintf+0x25c>
 be6:	28 e0       	ldi	r18, 0x08	; 8
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	05 c0       	rjmp	.+10     	; 0xbf6 <vfprintf+0x260>
 bec:	20 e1       	ldi	r18, 0x10	; 16
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x260>
 bf2:	20 e1       	ldi	r18, 0x10	; 16
 bf4:	32 e0       	ldi	r19, 0x02	; 2
 bf6:	f8 01       	movw	r30, r16
 bf8:	b7 fe       	sbrs	r11, 7
 bfa:	07 c0       	rjmp	.+14     	; 0xc0a <vfprintf+0x274>
 bfc:	60 81       	ld	r22, Z
 bfe:	71 81       	ldd	r23, Z+1	; 0x01
 c00:	82 81       	ldd	r24, Z+2	; 0x02
 c02:	93 81       	ldd	r25, Z+3	; 0x03
 c04:	0c 5f       	subi	r16, 0xFC	; 252
 c06:	1f 4f       	sbci	r17, 0xFF	; 255
 c08:	06 c0       	rjmp	.+12     	; 0xc16 <vfprintf+0x280>
 c0a:	60 81       	ld	r22, Z
 c0c:	71 81       	ldd	r23, Z+1	; 0x01
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 5f       	subi	r16, 0xFE	; 254
 c14:	1f 4f       	sbci	r17, 0xFF	; 255
 c16:	a4 01       	movw	r20, r8
 c18:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__ultoa_invert>
 c1c:	a8 2e       	mov	r10, r24
 c1e:	a8 18       	sub	r10, r8
 c20:	fb 2d       	mov	r31, r11
 c22:	ff 77       	andi	r31, 0x7F	; 127
 c24:	7f 2e       	mov	r7, r31
 c26:	76 fe       	sbrs	r7, 6
 c28:	0b c0       	rjmp	.+22     	; 0xc40 <vfprintf+0x2aa>
 c2a:	37 2d       	mov	r19, r7
 c2c:	3e 7f       	andi	r19, 0xFE	; 254
 c2e:	a5 14       	cp	r10, r5
 c30:	50 f4       	brcc	.+20     	; 0xc46 <vfprintf+0x2b0>
 c32:	74 fe       	sbrs	r7, 4
 c34:	0a c0       	rjmp	.+20     	; 0xc4a <vfprintf+0x2b4>
 c36:	72 fc       	sbrc	r7, 2
 c38:	08 c0       	rjmp	.+16     	; 0xc4a <vfprintf+0x2b4>
 c3a:	37 2d       	mov	r19, r7
 c3c:	3e 7e       	andi	r19, 0xEE	; 238
 c3e:	05 c0       	rjmp	.+10     	; 0xc4a <vfprintf+0x2b4>
 c40:	ba 2c       	mov	r11, r10
 c42:	37 2d       	mov	r19, r7
 c44:	03 c0       	rjmp	.+6      	; 0xc4c <vfprintf+0x2b6>
 c46:	ba 2c       	mov	r11, r10
 c48:	01 c0       	rjmp	.+2      	; 0xc4c <vfprintf+0x2b6>
 c4a:	b5 2c       	mov	r11, r5
 c4c:	34 ff       	sbrs	r19, 4
 c4e:	0d c0       	rjmp	.+26     	; 0xc6a <vfprintf+0x2d4>
 c50:	fe 01       	movw	r30, r28
 c52:	ea 0d       	add	r30, r10
 c54:	f1 1d       	adc	r31, r1
 c56:	80 81       	ld	r24, Z
 c58:	80 33       	cpi	r24, 0x30	; 48
 c5a:	11 f4       	brne	.+4      	; 0xc60 <vfprintf+0x2ca>
 c5c:	39 7e       	andi	r19, 0xE9	; 233
 c5e:	09 c0       	rjmp	.+18     	; 0xc72 <vfprintf+0x2dc>
 c60:	32 ff       	sbrs	r19, 2
 c62:	06 c0       	rjmp	.+12     	; 0xc70 <vfprintf+0x2da>
 c64:	b3 94       	inc	r11
 c66:	b3 94       	inc	r11
 c68:	04 c0       	rjmp	.+8      	; 0xc72 <vfprintf+0x2dc>
 c6a:	83 2f       	mov	r24, r19
 c6c:	86 78       	andi	r24, 0x86	; 134
 c6e:	09 f0       	breq	.+2      	; 0xc72 <vfprintf+0x2dc>
 c70:	b3 94       	inc	r11
 c72:	33 fd       	sbrc	r19, 3
 c74:	13 c0       	rjmp	.+38     	; 0xc9c <vfprintf+0x306>
 c76:	30 ff       	sbrs	r19, 0
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x2f0>
 c7a:	5a 2c       	mov	r5, r10
 c7c:	b3 14       	cp	r11, r3
 c7e:	18 f4       	brcc	.+6      	; 0xc86 <vfprintf+0x2f0>
 c80:	53 0c       	add	r5, r3
 c82:	5b 18       	sub	r5, r11
 c84:	b3 2c       	mov	r11, r3
 c86:	b3 14       	cp	r11, r3
 c88:	68 f4       	brcc	.+26     	; 0xca4 <vfprintf+0x30e>
 c8a:	b7 01       	movw	r22, r14
 c8c:	80 e2       	ldi	r24, 0x20	; 32
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	3c 87       	std	Y+12, r19	; 0x0c
 c92:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 c96:	b3 94       	inc	r11
 c98:	3c 85       	ldd	r19, Y+12	; 0x0c
 c9a:	f5 cf       	rjmp	.-22     	; 0xc86 <vfprintf+0x2f0>
 c9c:	b3 14       	cp	r11, r3
 c9e:	10 f4       	brcc	.+4      	; 0xca4 <vfprintf+0x30e>
 ca0:	3b 18       	sub	r3, r11
 ca2:	01 c0       	rjmp	.+2      	; 0xca6 <vfprintf+0x310>
 ca4:	31 2c       	mov	r3, r1
 ca6:	34 ff       	sbrs	r19, 4
 ca8:	12 c0       	rjmp	.+36     	; 0xcce <vfprintf+0x338>
 caa:	b7 01       	movw	r22, r14
 cac:	80 e3       	ldi	r24, 0x30	; 48
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	3c 87       	std	Y+12, r19	; 0x0c
 cb2:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 cb6:	3c 85       	ldd	r19, Y+12	; 0x0c
 cb8:	32 ff       	sbrs	r19, 2
 cba:	17 c0       	rjmp	.+46     	; 0xcea <vfprintf+0x354>
 cbc:	31 fd       	sbrc	r19, 1
 cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x330>
 cc0:	88 e7       	ldi	r24, 0x78	; 120
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x334>
 cc6:	88 e5       	ldi	r24, 0x58	; 88
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	b7 01       	movw	r22, r14
 ccc:	0c c0       	rjmp	.+24     	; 0xce6 <vfprintf+0x350>
 cce:	83 2f       	mov	r24, r19
 cd0:	86 78       	andi	r24, 0x86	; 134
 cd2:	59 f0       	breq	.+22     	; 0xcea <vfprintf+0x354>
 cd4:	31 ff       	sbrs	r19, 1
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <vfprintf+0x346>
 cd8:	8b e2       	ldi	r24, 0x2B	; 43
 cda:	01 c0       	rjmp	.+2      	; 0xcde <vfprintf+0x348>
 cdc:	80 e2       	ldi	r24, 0x20	; 32
 cde:	37 fd       	sbrc	r19, 7
 ce0:	8d e2       	ldi	r24, 0x2D	; 45
 ce2:	b7 01       	movw	r22, r14
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 cea:	a5 14       	cp	r10, r5
 cec:	38 f4       	brcc	.+14     	; 0xcfc <vfprintf+0x366>
 cee:	b7 01       	movw	r22, r14
 cf0:	80 e3       	ldi	r24, 0x30	; 48
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 cf8:	5a 94       	dec	r5
 cfa:	f7 cf       	rjmp	.-18     	; 0xcea <vfprintf+0x354>
 cfc:	aa 94       	dec	r10
 cfe:	f4 01       	movw	r30, r8
 d00:	ea 0d       	add	r30, r10
 d02:	f1 1d       	adc	r31, r1
 d04:	80 81       	ld	r24, Z
 d06:	b7 01       	movw	r22, r14
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 d0e:	a1 10       	cpse	r10, r1
 d10:	f5 cf       	rjmp	.-22     	; 0xcfc <vfprintf+0x366>
 d12:	33 20       	and	r3, r3
 d14:	09 f4       	brne	.+2      	; 0xd18 <vfprintf+0x382>
 d16:	51 ce       	rjmp	.-862    	; 0x9ba <vfprintf+0x24>
 d18:	b7 01       	movw	r22, r14
 d1a:	80 e2       	ldi	r24, 0x20	; 32
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 d22:	3a 94       	dec	r3
 d24:	f6 cf       	rjmp	.-20     	; 0xd12 <vfprintf+0x37c>
 d26:	f7 01       	movw	r30, r14
 d28:	86 81       	ldd	r24, Z+6	; 0x06
 d2a:	97 81       	ldd	r25, Z+7	; 0x07
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x39c>
 d2e:	8f ef       	ldi	r24, 0xFF	; 255
 d30:	9f ef       	ldi	r25, 0xFF	; 255
 d32:	2c 96       	adiw	r28, 0x0c	; 12
 d34:	e2 e1       	ldi	r30, 0x12	; 18
 d36:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__epilogue_restores__>

00000d3a <strnlen_P>:
 d3a:	fc 01       	movw	r30, r24
 d3c:	05 90       	lpm	r0, Z+
 d3e:	61 50       	subi	r22, 0x01	; 1
 d40:	70 40       	sbci	r23, 0x00	; 0
 d42:	01 10       	cpse	r0, r1
 d44:	d8 f7       	brcc	.-10     	; 0xd3c <strnlen_P+0x2>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	08 95       	ret

00000d50 <strnlen>:
 d50:	fc 01       	movw	r30, r24
 d52:	61 50       	subi	r22, 0x01	; 1
 d54:	70 40       	sbci	r23, 0x00	; 0
 d56:	01 90       	ld	r0, Z+
 d58:	01 10       	cpse	r0, r1
 d5a:	d8 f7       	brcc	.-10     	; 0xd52 <strnlen+0x2>
 d5c:	80 95       	com	r24
 d5e:	90 95       	com	r25
 d60:	8e 0f       	add	r24, r30
 d62:	9f 1f       	adc	r25, r31
 d64:	08 95       	ret

00000d66 <fputc>:
 d66:	0f 93       	push	r16
 d68:	1f 93       	push	r17
 d6a:	cf 93       	push	r28
 d6c:	df 93       	push	r29
 d6e:	fb 01       	movw	r30, r22
 d70:	23 81       	ldd	r18, Z+3	; 0x03
 d72:	21 fd       	sbrc	r18, 1
 d74:	03 c0       	rjmp	.+6      	; 0xd7c <fputc+0x16>
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	9f ef       	ldi	r25, 0xFF	; 255
 d7a:	28 c0       	rjmp	.+80     	; 0xdcc <fputc+0x66>
 d7c:	22 ff       	sbrs	r18, 2
 d7e:	16 c0       	rjmp	.+44     	; 0xdac <fputc+0x46>
 d80:	46 81       	ldd	r20, Z+6	; 0x06
 d82:	57 81       	ldd	r21, Z+7	; 0x07
 d84:	24 81       	ldd	r18, Z+4	; 0x04
 d86:	35 81       	ldd	r19, Z+5	; 0x05
 d88:	42 17       	cp	r20, r18
 d8a:	53 07       	cpc	r21, r19
 d8c:	44 f4       	brge	.+16     	; 0xd9e <fputc+0x38>
 d8e:	a0 81       	ld	r26, Z
 d90:	b1 81       	ldd	r27, Z+1	; 0x01
 d92:	9d 01       	movw	r18, r26
 d94:	2f 5f       	subi	r18, 0xFF	; 255
 d96:	3f 4f       	sbci	r19, 0xFF	; 255
 d98:	31 83       	std	Z+1, r19	; 0x01
 d9a:	20 83       	st	Z, r18
 d9c:	8c 93       	st	X, r24
 d9e:	26 81       	ldd	r18, Z+6	; 0x06
 da0:	37 81       	ldd	r19, Z+7	; 0x07
 da2:	2f 5f       	subi	r18, 0xFF	; 255
 da4:	3f 4f       	sbci	r19, 0xFF	; 255
 da6:	37 83       	std	Z+7, r19	; 0x07
 da8:	26 83       	std	Z+6, r18	; 0x06
 daa:	10 c0       	rjmp	.+32     	; 0xdcc <fputc+0x66>
 dac:	eb 01       	movw	r28, r22
 dae:	09 2f       	mov	r16, r25
 db0:	18 2f       	mov	r17, r24
 db2:	00 84       	ldd	r0, Z+8	; 0x08
 db4:	f1 85       	ldd	r31, Z+9	; 0x09
 db6:	e0 2d       	mov	r30, r0
 db8:	09 95       	icall
 dba:	89 2b       	or	r24, r25
 dbc:	e1 f6       	brne	.-72     	; 0xd76 <fputc+0x10>
 dbe:	8e 81       	ldd	r24, Y+6	; 0x06
 dc0:	9f 81       	ldd	r25, Y+7	; 0x07
 dc2:	01 96       	adiw	r24, 0x01	; 1
 dc4:	9f 83       	std	Y+7, r25	; 0x07
 dc6:	8e 83       	std	Y+6, r24	; 0x06
 dc8:	81 2f       	mov	r24, r17
 dca:	90 2f       	mov	r25, r16
 dcc:	df 91       	pop	r29
 dce:	cf 91       	pop	r28
 dd0:	1f 91       	pop	r17
 dd2:	0f 91       	pop	r16
 dd4:	08 95       	ret

00000dd6 <__ultoa_invert>:
 dd6:	fa 01       	movw	r30, r20
 dd8:	aa 27       	eor	r26, r26
 dda:	28 30       	cpi	r18, 0x08	; 8
 ddc:	51 f1       	breq	.+84     	; 0xe32 <__ultoa_invert+0x5c>
 dde:	20 31       	cpi	r18, 0x10	; 16
 de0:	81 f1       	breq	.+96     	; 0xe42 <__ultoa_invert+0x6c>
 de2:	e8 94       	clt
 de4:	6f 93       	push	r22
 de6:	6e 7f       	andi	r22, 0xFE	; 254
 de8:	6e 5f       	subi	r22, 0xFE	; 254
 dea:	7f 4f       	sbci	r23, 0xFF	; 255
 dec:	8f 4f       	sbci	r24, 0xFF	; 255
 dee:	9f 4f       	sbci	r25, 0xFF	; 255
 df0:	af 4f       	sbci	r26, 0xFF	; 255
 df2:	b1 e0       	ldi	r27, 0x01	; 1
 df4:	3e d0       	rcall	.+124    	; 0xe72 <__ultoa_invert+0x9c>
 df6:	b4 e0       	ldi	r27, 0x04	; 4
 df8:	3c d0       	rcall	.+120    	; 0xe72 <__ultoa_invert+0x9c>
 dfa:	67 0f       	add	r22, r23
 dfc:	78 1f       	adc	r23, r24
 dfe:	89 1f       	adc	r24, r25
 e00:	9a 1f       	adc	r25, r26
 e02:	a1 1d       	adc	r26, r1
 e04:	68 0f       	add	r22, r24
 e06:	79 1f       	adc	r23, r25
 e08:	8a 1f       	adc	r24, r26
 e0a:	91 1d       	adc	r25, r1
 e0c:	a1 1d       	adc	r26, r1
 e0e:	6a 0f       	add	r22, r26
 e10:	71 1d       	adc	r23, r1
 e12:	81 1d       	adc	r24, r1
 e14:	91 1d       	adc	r25, r1
 e16:	a1 1d       	adc	r26, r1
 e18:	20 d0       	rcall	.+64     	; 0xe5a <__ultoa_invert+0x84>
 e1a:	09 f4       	brne	.+2      	; 0xe1e <__ultoa_invert+0x48>
 e1c:	68 94       	set
 e1e:	3f 91       	pop	r19
 e20:	2a e0       	ldi	r18, 0x0A	; 10
 e22:	26 9f       	mul	r18, r22
 e24:	11 24       	eor	r1, r1
 e26:	30 19       	sub	r19, r0
 e28:	30 5d       	subi	r19, 0xD0	; 208
 e2a:	31 93       	st	Z+, r19
 e2c:	de f6       	brtc	.-74     	; 0xde4 <__ultoa_invert+0xe>
 e2e:	cf 01       	movw	r24, r30
 e30:	08 95       	ret
 e32:	46 2f       	mov	r20, r22
 e34:	47 70       	andi	r20, 0x07	; 7
 e36:	40 5d       	subi	r20, 0xD0	; 208
 e38:	41 93       	st	Z+, r20
 e3a:	b3 e0       	ldi	r27, 0x03	; 3
 e3c:	0f d0       	rcall	.+30     	; 0xe5c <__ultoa_invert+0x86>
 e3e:	c9 f7       	brne	.-14     	; 0xe32 <__ultoa_invert+0x5c>
 e40:	f6 cf       	rjmp	.-20     	; 0xe2e <__ultoa_invert+0x58>
 e42:	46 2f       	mov	r20, r22
 e44:	4f 70       	andi	r20, 0x0F	; 15
 e46:	40 5d       	subi	r20, 0xD0	; 208
 e48:	4a 33       	cpi	r20, 0x3A	; 58
 e4a:	18 f0       	brcs	.+6      	; 0xe52 <__ultoa_invert+0x7c>
 e4c:	49 5d       	subi	r20, 0xD9	; 217
 e4e:	31 fd       	sbrc	r19, 1
 e50:	40 52       	subi	r20, 0x20	; 32
 e52:	41 93       	st	Z+, r20
 e54:	02 d0       	rcall	.+4      	; 0xe5a <__ultoa_invert+0x84>
 e56:	a9 f7       	brne	.-22     	; 0xe42 <__ultoa_invert+0x6c>
 e58:	ea cf       	rjmp	.-44     	; 0xe2e <__ultoa_invert+0x58>
 e5a:	b4 e0       	ldi	r27, 0x04	; 4
 e5c:	a6 95       	lsr	r26
 e5e:	97 95       	ror	r25
 e60:	87 95       	ror	r24
 e62:	77 95       	ror	r23
 e64:	67 95       	ror	r22
 e66:	ba 95       	dec	r27
 e68:	c9 f7       	brne	.-14     	; 0xe5c <__ultoa_invert+0x86>
 e6a:	00 97       	sbiw	r24, 0x00	; 0
 e6c:	61 05       	cpc	r22, r1
 e6e:	71 05       	cpc	r23, r1
 e70:	08 95       	ret
 e72:	9b 01       	movw	r18, r22
 e74:	ac 01       	movw	r20, r24
 e76:	0a 2e       	mov	r0, r26
 e78:	06 94       	lsr	r0
 e7a:	57 95       	ror	r21
 e7c:	47 95       	ror	r20
 e7e:	37 95       	ror	r19
 e80:	27 95       	ror	r18
 e82:	ba 95       	dec	r27
 e84:	c9 f7       	brne	.-14     	; 0xe78 <__ultoa_invert+0xa2>
 e86:	62 0f       	add	r22, r18
 e88:	73 1f       	adc	r23, r19
 e8a:	84 1f       	adc	r24, r20
 e8c:	95 1f       	adc	r25, r21
 e8e:	a0 1d       	adc	r26, r0
 e90:	08 95       	ret

00000e92 <__divmodsi4>:
 e92:	05 2e       	mov	r0, r21
 e94:	97 fb       	bst	r25, 7
 e96:	1e f4       	brtc	.+6      	; 0xe9e <__divmodsi4+0xc>
 e98:	00 94       	com	r0
 e9a:	0e 94 60 07 	call	0xec0	; 0xec0 <__negsi2>
 e9e:	57 fd       	sbrc	r21, 7
 ea0:	07 d0       	rcall	.+14     	; 0xeb0 <__divmodsi4_neg2>
 ea2:	0e 94 b2 07 	call	0xf64	; 0xf64 <__udivmodsi4>
 ea6:	07 fc       	sbrc	r0, 7
 ea8:	03 d0       	rcall	.+6      	; 0xeb0 <__divmodsi4_neg2>
 eaa:	4e f4       	brtc	.+18     	; 0xebe <__divmodsi4_exit>
 eac:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__negsi2>

00000eb0 <__divmodsi4_neg2>:
 eb0:	50 95       	com	r21
 eb2:	40 95       	com	r20
 eb4:	30 95       	com	r19
 eb6:	21 95       	neg	r18
 eb8:	3f 4f       	sbci	r19, 0xFF	; 255
 eba:	4f 4f       	sbci	r20, 0xFF	; 255
 ebc:	5f 4f       	sbci	r21, 0xFF	; 255

00000ebe <__divmodsi4_exit>:
 ebe:	08 95       	ret

00000ec0 <__negsi2>:
 ec0:	90 95       	com	r25
 ec2:	80 95       	com	r24
 ec4:	70 95       	com	r23
 ec6:	61 95       	neg	r22
 ec8:	7f 4f       	sbci	r23, 0xFF	; 255
 eca:	8f 4f       	sbci	r24, 0xFF	; 255
 ecc:	9f 4f       	sbci	r25, 0xFF	; 255
 ece:	08 95       	ret

00000ed0 <__muluhisi3>:
 ed0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__umulhisi3>
 ed4:	a5 9f       	mul	r26, r21
 ed6:	90 0d       	add	r25, r0
 ed8:	b4 9f       	mul	r27, r20
 eda:	90 0d       	add	r25, r0
 edc:	a4 9f       	mul	r26, r20
 ede:	80 0d       	add	r24, r0
 ee0:	91 1d       	adc	r25, r1
 ee2:	11 24       	eor	r1, r1
 ee4:	08 95       	ret

00000ee6 <__mulshisi3>:
 ee6:	b7 ff       	sbrs	r27, 7
 ee8:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__muluhisi3>

00000eec <__mulohisi3>:
 eec:	0e 94 68 07 	call	0xed0	; 0xed0 <__muluhisi3>
 ef0:	82 1b       	sub	r24, r18
 ef2:	93 0b       	sbc	r25, r19
 ef4:	08 95       	ret

00000ef6 <__prologue_saves__>:
 ef6:	2f 92       	push	r2
 ef8:	3f 92       	push	r3
 efa:	4f 92       	push	r4
 efc:	5f 92       	push	r5
 efe:	6f 92       	push	r6
 f00:	7f 92       	push	r7
 f02:	8f 92       	push	r8
 f04:	9f 92       	push	r9
 f06:	af 92       	push	r10
 f08:	bf 92       	push	r11
 f0a:	cf 92       	push	r12
 f0c:	df 92       	push	r13
 f0e:	ef 92       	push	r14
 f10:	ff 92       	push	r15
 f12:	0f 93       	push	r16
 f14:	1f 93       	push	r17
 f16:	cf 93       	push	r28
 f18:	df 93       	push	r29
 f1a:	cd b7       	in	r28, 0x3d	; 61
 f1c:	de b7       	in	r29, 0x3e	; 62
 f1e:	ca 1b       	sub	r28, r26
 f20:	db 0b       	sbc	r29, r27
 f22:	0f b6       	in	r0, 0x3f	; 63
 f24:	f8 94       	cli
 f26:	de bf       	out	0x3e, r29	; 62
 f28:	0f be       	out	0x3f, r0	; 63
 f2a:	cd bf       	out	0x3d, r28	; 61
 f2c:	09 94       	ijmp

00000f2e <__epilogue_restores__>:
 f2e:	2a 88       	ldd	r2, Y+18	; 0x12
 f30:	39 88       	ldd	r3, Y+17	; 0x11
 f32:	48 88       	ldd	r4, Y+16	; 0x10
 f34:	5f 84       	ldd	r5, Y+15	; 0x0f
 f36:	6e 84       	ldd	r6, Y+14	; 0x0e
 f38:	7d 84       	ldd	r7, Y+13	; 0x0d
 f3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f40:	b9 84       	ldd	r11, Y+9	; 0x09
 f42:	c8 84       	ldd	r12, Y+8	; 0x08
 f44:	df 80       	ldd	r13, Y+7	; 0x07
 f46:	ee 80       	ldd	r14, Y+6	; 0x06
 f48:	fd 80       	ldd	r15, Y+5	; 0x05
 f4a:	0c 81       	ldd	r16, Y+4	; 0x04
 f4c:	1b 81       	ldd	r17, Y+3	; 0x03
 f4e:	aa 81       	ldd	r26, Y+2	; 0x02
 f50:	b9 81       	ldd	r27, Y+1	; 0x01
 f52:	ce 0f       	add	r28, r30
 f54:	d1 1d       	adc	r29, r1
 f56:	0f b6       	in	r0, 0x3f	; 63
 f58:	f8 94       	cli
 f5a:	de bf       	out	0x3e, r29	; 62
 f5c:	0f be       	out	0x3f, r0	; 63
 f5e:	cd bf       	out	0x3d, r28	; 61
 f60:	ed 01       	movw	r28, r26
 f62:	08 95       	ret

00000f64 <__udivmodsi4>:
 f64:	a1 e2       	ldi	r26, 0x21	; 33
 f66:	1a 2e       	mov	r1, r26
 f68:	aa 1b       	sub	r26, r26
 f6a:	bb 1b       	sub	r27, r27
 f6c:	fd 01       	movw	r30, r26
 f6e:	0d c0       	rjmp	.+26     	; 0xf8a <__udivmodsi4_ep>

00000f70 <__udivmodsi4_loop>:
 f70:	aa 1f       	adc	r26, r26
 f72:	bb 1f       	adc	r27, r27
 f74:	ee 1f       	adc	r30, r30
 f76:	ff 1f       	adc	r31, r31
 f78:	a2 17       	cp	r26, r18
 f7a:	b3 07       	cpc	r27, r19
 f7c:	e4 07       	cpc	r30, r20
 f7e:	f5 07       	cpc	r31, r21
 f80:	20 f0       	brcs	.+8      	; 0xf8a <__udivmodsi4_ep>
 f82:	a2 1b       	sub	r26, r18
 f84:	b3 0b       	sbc	r27, r19
 f86:	e4 0b       	sbc	r30, r20
 f88:	f5 0b       	sbc	r31, r21

00000f8a <__udivmodsi4_ep>:
 f8a:	66 1f       	adc	r22, r22
 f8c:	77 1f       	adc	r23, r23
 f8e:	88 1f       	adc	r24, r24
 f90:	99 1f       	adc	r25, r25
 f92:	1a 94       	dec	r1
 f94:	69 f7       	brne	.-38     	; 0xf70 <__udivmodsi4_loop>
 f96:	60 95       	com	r22
 f98:	70 95       	com	r23
 f9a:	80 95       	com	r24
 f9c:	90 95       	com	r25
 f9e:	9b 01       	movw	r18, r22
 fa0:	ac 01       	movw	r20, r24
 fa2:	bd 01       	movw	r22, r26
 fa4:	cf 01       	movw	r24, r30
 fa6:	08 95       	ret

00000fa8 <__umulhisi3>:
 fa8:	a2 9f       	mul	r26, r18
 faa:	b0 01       	movw	r22, r0
 fac:	b3 9f       	mul	r27, r19
 fae:	c0 01       	movw	r24, r0
 fb0:	a3 9f       	mul	r26, r19
 fb2:	70 0d       	add	r23, r0
 fb4:	81 1d       	adc	r24, r1
 fb6:	11 24       	eor	r1, r1
 fb8:	91 1d       	adc	r25, r1
 fba:	b2 9f       	mul	r27, r18
 fbc:	70 0d       	add	r23, r0
 fbe:	81 1d       	adc	r24, r1
 fc0:	11 24       	eor	r1, r1
 fc2:	91 1d       	adc	r25, r1
 fc4:	08 95       	ret

00000fc6 <_exit>:
 fc6:	f8 94       	cli

00000fc8 <__stop_program>:
 fc8:	ff cf       	rjmp	.-2      	; 0xfc8 <__stop_program>
