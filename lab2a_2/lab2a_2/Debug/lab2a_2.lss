
lab2a_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000241  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f6  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019a  00000000  00000000  00000537  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017e  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000156  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include<util/delay.h>

int main(void)
{
    DDRD = 0b11111111;  // All led's for PORTD set as output.
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b01111011;  // Pin 2 and 7 configured as inputs for bank B
  84:	8b e7       	ldi	r24, 0x7B	; 123
  86:	84 b9       	out	0x04, r24	; 4
	
							 // initial position of the blinking LED
	char c = 0b00000001;     // c will hold current position.  
  88:	81 e0       	ldi	r24, 0x01	; 1
			_delay_ms(100); // Small delay for led transition.
			c = c<<1;
			PORTD = c;	// Shift left 
			_delay_ms(100);
			if(c==0)
			c = 0b00000001;	// Reset the port.
  8a:	91 e0       	ldi	r25, 0x01	; 1
							 // initial position of the blinking LED
	char c = 0b00000001;     // c will hold current position.  
    while (1) 
    {
		
		if((switch1_pressed))
  8c:	1f 99       	sbic	0x03, 7	; 3
  8e:	15 c0       	rjmp	.+42     	; 0xba <main+0x3a>
		{
			PORTD = c;
  90:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f e3       	ldi	r18, 0x3F	; 63
  94:	3d e0       	ldi	r19, 0x0D	; 13
  96:	43 e0       	ldi	r20, 0x03	; 3
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	40 40       	sbci	r20, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x22>
  a2:	00 00       	nop
			_delay_ms(62.5);
			PORTD = 0;
  a4:	1b b8       	out	0x0b, r1	; 11
  a6:	2f e3       	ldi	r18, 0x3F	; 63
  a8:	3d e0       	ldi	r19, 0x0D	; 13
  aa:	43 e0       	ldi	r20, 0x03	; 3
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
  b8:	e9 cf       	rjmp	.-46     	; 0x8c <main+0xc>
			_delay_ms(62.5);
			
						
		}
		else if((switch2_pressed))
  ba:	1a 99       	sbic	0x03, 2	; 3
  bc:	18 c0       	rjmp	.+48     	; 0xee <main+0x6e>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	31 ee       	ldi	r19, 0xE1	; 225
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
		{
			_delay_ms(100); // Small delay for led transition.
			c = c<<1;
  d0:	88 0f       	add	r24, r24
			PORTD = c;	// Shift left 
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	31 ee       	ldi	r19, 0xE1	; 225
  d8:	44 e0       	ldi	r20, 0x04	; 4
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	40 40       	sbci	r20, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x64>
  e4:	00 00       	nop
			_delay_ms(100);
			if(c==0)
  e6:	81 11       	cpse	r24, r1
  e8:	d1 cf       	rjmp	.-94     	; 0x8c <main+0xc>
			c = 0b00000001;	// Reset the port.
  ea:	89 2f       	mov	r24, r25
  ec:	cf cf       	rjmp	.-98     	; 0x8c <main+0xc>
		}
		else
		{
			PORTD = c;
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	34 e3       	ldi	r19, 0x34	; 52
  f4:	4c e0       	ldi	r20, 0x0C	; 12
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
			_delay_ms(250);
			PORTD = 0;
 102:	1b b8       	out	0x0b, r1	; 11
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	34 e3       	ldi	r19, 0x34	; 52
 108:	4c e0       	ldi	r20, 0x0C	; 12
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	30 40       	sbci	r19, 0x00	; 0
 10e:	40 40       	sbci	r20, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x8a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x94>
 114:	00 00       	nop
 116:	ba cf       	rjmp	.-140    	; 0x8c <main+0xc>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
