
labassignment_3c_isr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000492  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800104  00800104  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de6  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c1  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b9  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f8  00000000  00000000  0000287d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00002f75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	ea 00       	.word	0x00ea	; ????
  6a:	ff 00       	.word	0x00ff	; ????
  6c:	04 01       	movw	r0, r8
  6e:	11 01       	movw	r2, r2
  70:	30 01       	movw	r6, r0
  72:	44 01       	movw	r8, r8
  74:	49 01       	movw	r8, r18
  76:	56 01       	movw	r10, r12
  78:	5b 01       	movw	r10, r22
  7a:	20 01       	movw	r4, r0

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e9       	ldi	r30, 0x92	; 146
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 37       	cpi	r26, 0x74	; 116
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  b2:	0c 94 47 02 	jmp	0x48e	; 0x48e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <LDCPortConfig>:
	LcdCommandWrite(0x0E);
}

void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LcdCommandWrite(0x0F);
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	87 b9       	out	0x07, r24	; 7
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	80 63       	ori	r24, 0x30	; 48
  c4:	87 b9       	out	0x07, r24	; 7
  c6:	08 95       	ret

000000c8 <LcdCommandWrite_UpperNibble>:
  c8:	98 b1       	in	r25, 0x08	; 8
  ca:	82 95       	swap	r24
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	44 98       	cbi	0x08, 4	; 8
  d6:	45 9a       	sbi	0x08, 5	; 8
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LcdCommandWrite_UpperNibble+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LcdCommandWrite_UpperNibble+0x1a>
  e2:	00 00       	nop
  e4:	45 98       	cbi	0x08, 5	; 8
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LcdCommandWrite_UpperNibble+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LcdCommandWrite_UpperNibble+0x28>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <LcdCommandWrite>:
  f4:	98 b1       	in	r25, 0x08	; 8
  f6:	28 2f       	mov	r18, r24
  f8:	22 95       	swap	r18
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	92 2b       	or	r25, r18
 100:	98 b9       	out	0x08, r25	; 8
 102:	44 98       	cbi	0x08, 4	; 8
 104:	45 9a       	sbi	0x08, 5	; 8
 106:	ef e9       	ldi	r30, 0x9F	; 159
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LcdCommandWrite+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LcdCommandWrite+0x1c>
 110:	00 00       	nop
 112:	45 98       	cbi	0x08, 5	; 8
 114:	ef e3       	ldi	r30, 0x3F	; 63
 116:	ff e1       	ldi	r31, 0x1F	; 31
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LcdCommandWrite+0x24>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LcdCommandWrite+0x2a>
 11e:	00 00       	nop
 120:	98 b1       	in	r25, 0x08	; 8
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	90 7f       	andi	r25, 0xF0	; 240
 126:	89 2b       	or	r24, r25
 128:	88 b9       	out	0x08, r24	; 8
 12a:	44 98       	cbi	0x08, 4	; 8
 12c:	45 9a       	sbi	0x08, 5	; 8
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LcdCommandWrite+0x3e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LcdCommandWrite+0x44>
 138:	00 00       	nop
 13a:	45 98       	cbi	0x08, 5	; 8
 13c:	ef e3       	ldi	r30, 0x3F	; 63
 13e:	ff e1       	ldi	r31, 0x1F	; 31
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LcdCommandWrite+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LcdCommandWrite+0x52>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <initialize_LCD>:
 14a:	0e 94 5d 00 	call	0xba	; 0xba <LDCPortConfig>
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	0e 94 64 00 	call	0xc8	; 0xc8 <LcdCommandWrite_UpperNibble>
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	90 e4       	ldi	r25, 0x40	; 64
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <initialize_LCD+0xe>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <initialize_LCD+0x14>
 15e:	00 00       	nop
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	0e 94 64 00 	call	0xc8	; 0xc8 <LcdCommandWrite_UpperNibble>
 166:	8f e8       	ldi	r24, 0x8F	; 143
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <initialize_LCD+0x20>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <initialize_LCD+0x26>
 170:	00 00       	nop
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	0e 94 64 00 	call	0xc8	; 0xc8 <LcdCommandWrite_UpperNibble>
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	0e 94 64 00 	call	0xc8	; 0xc8 <LcdCommandWrite_UpperNibble>
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	0e 94 7a 00 	call	0xf4	; 0xf4 <LcdCommandWrite>
 184:	88 e0       	ldi	r24, 0x08	; 8
 186:	0e 94 7a 00 	call	0xf4	; 0xf4 <LcdCommandWrite>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 7a 00 	call	0xf4	; 0xf4 <LcdCommandWrite>
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	0e 94 7a 00 	call	0xf4	; 0xf4 <LcdCommandWrite>
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	0e 94 7a 00 	call	0xf4	; 0xf4 <LcdCommandWrite>
 19c:	9f ef       	ldi	r25, 0xFF	; 255
 19e:	2b ed       	ldi	r18, 0xDB	; 219
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	91 50       	subi	r25, 0x01	; 1
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <initialize_LCD+0x58>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <initialize_LCD+0x62>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <LCDcursorOFF>:
}

void LCDcursorOFF(void)	//turns OFF cursor
{
	LcdCommandWrite(0x0C);
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 7a 00 	call	0xf4	; 0xf4 <LcdCommandWrite>
 1b6:	08 95       	ret

000001b8 <LCD_STATE_MACHINE>:
void PrintString(char* c)
{
	for(int i = 0; i<strlen(c); i++)
	LCD_DataWrite_noBlock((uint8_t)c[i]);
	
}
 1b8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <curr_state>
 1bc:	8e 2f       	mov	r24, r30
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	ea 30       	cpi	r30, 0x0A	; 10
 1c6:	f1 05       	cpc	r31, r1
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <LCD_STATE_MACHINE+0x14>
 1ca:	80 c0       	rjmp	.+256    	; 0x2cc <LCD_STATE_MACHINE+0x114>
 1cc:	ec 5c       	subi	r30, 0xCC	; 204
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	0c 94 41 02 	jmp	0x482	; 0x482 <__tablejump2__>
 1d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <new_req>
 1d8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <new_req+0x1>
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <LCD_STATE_MACHINE+0x2a>
 1e0:	75 c0       	rjmp	.+234    	; 0x2cc <LCD_STATE_MACHINE+0x114>
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd_write+0x1>
 1e8:	92 95       	swap	r25
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	80 7f       	andi	r24, 0xF0	; 240
 1ee:	89 2b       	or	r24, r25
 1f0:	88 b9       	out	0x08, r24	; 8
 1f2:	44 98       	cbi	0x08, 4	; 8
 1f4:	45 9a       	sbi	0x08, 5	; 8
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 1fc:	08 95       	ret
 1fe:	45 98       	cbi	0x08, 5	; 8
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 206:	08 95       	ret
 208:	88 b1       	in	r24, 0x08	; 8
 20a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd_write+0x1>
 20e:	9f 70       	andi	r25, 0x0F	; 15
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	89 2b       	or	r24, r25
 214:	88 b9       	out	0x08, r24	; 8
 216:	44 98       	cbi	0x08, 4	; 8
 218:	45 9a       	sbi	0x08, 5	; 8
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 220:	08 95       	ret
 222:	45 98       	cbi	0x08, 5	; 8
 224:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 228:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	21 f4       	brne	.+8      	; 0x238 <LCD_STATE_MACHINE+0x80>
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 236:	08 95       	ret
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 23e:	08 95       	ret
 240:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd_busy+0x1>
 244:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd_busy>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 24e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <new_req+0x1>
 252:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <new_req>
 256:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 25a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 25e:	08 95       	ret
 260:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <new_req>
 264:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <new_req+0x1>
 268:	89 2b       	or	r24, r25
 26a:	81 f1       	breq	.+96     	; 0x2cc <LCD_STATE_MACHINE+0x114>
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <lcd_write>
 272:	92 95       	swap	r25
 274:	9f 70       	andi	r25, 0x0F	; 15
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	89 2b       	or	r24, r25
 27a:	88 b9       	out	0x08, r24	; 8
 27c:	44 9a       	sbi	0x08, 4	; 8
 27e:	45 9a       	sbi	0x08, 5	; 8
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 286:	08 95       	ret
 288:	45 98       	cbi	0x08, 5	; 8
 28a:	87 e0       	ldi	r24, 0x07	; 7
 28c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 290:	08 95       	ret
 292:	88 b1       	in	r24, 0x08	; 8
 294:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <lcd_write>
 298:	9f 70       	andi	r25, 0x0F	; 15
 29a:	80 7f       	andi	r24, 0xF0	; 240
 29c:	89 2b       	or	r24, r25
 29e:	88 b9       	out	0x08, r24	; 8
 2a0:	44 9a       	sbi	0x08, 4	; 8
 2a2:	45 9a       	sbi	0x08, 5	; 8
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 2aa:	08 95       	ret
 2ac:	45 98       	cbi	0x08, 5	; 8
 2ae:	89 e0       	ldi	r24, 0x09	; 9
 2b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 2b4:	08 95       	ret
 2b6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd_busy+0x1>
 2ba:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd_busy>
 2be:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <new_req+0x1>
 2c2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <new_req>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curr_state>
 2cc:	08 95       	ret

000002ce <LCD_GoTo_and_Write>:
 2ce:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd_busy>
 2d2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd_busy+0x1>
 2d6:	23 2b       	or	r18, r19
 2d8:	d1 f7       	brne	.-12     	; 0x2ce <LCD_GoTo_and_Write>
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <lcd_busy+0x1>
 2e2:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <lcd_busy>
 2e6:	61 15       	cp	r22, r1
 2e8:	71 05       	cpc	r23, r1
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <LCD_GoTo_and_Write+0x26>
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	71 05       	cpc	r23, r1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <LCD_GoTo_and_Write+0x26>
 2f2:	80 5c       	subi	r24, 0xC0	; 192
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <new_req+0x1>
 2fc:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <new_req>
 300:	80 68       	ori	r24, 0x80	; 128
 302:	ee e0       	ldi	r30, 0x0E	; 14
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	81 83       	std	Z+1, r24	; 0x01
 308:	40 83       	st	Z, r20
 30a:	08 95       	ret

0000030c <LCD_CommandWrite_noBlock>:
 30c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd_busy>
 310:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd_busy+0x1>
 314:	23 2b       	or	r18, r19
 316:	d1 f7       	brne	.-12     	; 0x30c <LCD_CommandWrite_noBlock>
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <lcd_busy+0x1>
 320:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <lcd_busy>
 324:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 328:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 32c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <lcd_write+0x1>
 330:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <new_req+0x1>
 334:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <new_req>
 338:	08 95       	ret

0000033a <__vector_11>:
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
 35c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 360:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 364:	18 16       	cp	r1, r24
 366:	19 06       	cpc	r1, r25
 368:	4c f4       	brge	.+18     	; 0x37c <__vector_11+0x42>
 36a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 36e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <SWTaskTimer1+0x1>
 378:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <SWTaskTimer1>
 37c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_STATE_MACHINE>
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <InitTimer1>:
 3a2:	8f ec       	ldi	r24, 0xCF	; 207
 3a4:	97 e0       	ldi	r25, 0x07	; 7
 3a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3ae:	ef e6       	ldi	r30, 0x6F	; 111
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	80 83       	st	Z, r24
 3b8:	e1 e8       	ldi	r30, 0x81	; 129
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	88 60       	ori	r24, 0x08	; 8
 3c0:	80 83       	st	Z, r24
 3c2:	80 81       	ld	r24, Z
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	80 83       	st	Z, r24
 3c8:	08 95       	ret

000003ca <init_all>:
 3ca:	25 9a       	sbi	0x04, 5	; 4
 3cc:	0e 94 a5 00 	call	0x14a	; 0x14a <initialize_LCD>
 3d0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDcursorOFF>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_CommandWrite_noBlock>
 3dc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <InitTimer1>
 3e0:	08 95       	ret

000003e2 <LCD_REFRESH>:


void LCD_REFRESH(void)
{	
	uint8_t lcd_data = (toggle)?'0':'1';             // if toggle is 1, set to 0 else set to 1.
 3e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <toggle>
 3e6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <toggle+0x1>
 3ea:	89 2b       	or	r24, r25
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <LCD_REFRESH+0x10>
 3ee:	41 e3       	ldi	r20, 0x31	; 49
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <LCD_REFRESH+0x12>
 3f2:	40 e3       	ldi	r20, 0x30	; 48
    LCD_GoTo_and_Write(0,0,lcd_data);	             // If 1 print 0, otherwise print 1.
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_GoTo_and_Write>
	LCD_GoTo_and_Write(0,1,(uint8_t)(toggle + '0')); // convert into to char, then to an 8 bit integer.
 400:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <toggle>
 404:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <toggle+0x1>
 408:	40 5d       	subi	r20, 0xD0	; 208
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_GoTo_and_Write>
    char_counter++;
 416:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <char_counter>
 41a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <char_counter+0x1>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <char_counter+0x1>
 424:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <char_counter>
	toggle ^= 1;						             // Change toggle value. 
 428:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <toggle>
 42c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <toggle+0x1>
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	82 27       	eor	r24, r18
 434:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <toggle+0x1>
 438:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <toggle>
 43c:	08 95       	ret

0000043e <main>:
}


int main(void)
{
    init_all();
 43e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <init_all>
	sei();
 442:	78 94       	sei
	DDRB = 1<<DDB5;
 444:	80 e2       	ldi	r24, 0x20	; 32
 446:	84 b9       	out	0x04, r24	; 4
		  
		  if(char_counter==16) // print 5 chars then clear test. 
		  {
			  LCD_CommandWrite_noBlock(0x01);
		  }	  
		  PORTB ^= 1<<PORTB5; 
 448:	10 e2       	ldi	r17, 0x20	; 32
		  LCD_REFRESH();
		  SWTaskTimer1 = initTime;
 44a:	c8 ee       	ldi	r28, 0xE8	; 232
 44c:	d3 e0       	ldi	r29, 0x03	; 3
	sei();
	DDRB = 1<<DDB5;
    while (1) 
    {
	   
	  if(SWTaskTimer1<=0) // Data-write will occur every second.
 44e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 452:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 456:	18 16       	cp	r1, r24
 458:	19 06       	cpc	r1, r25
 45a:	cc f3       	brlt	.-14     	; 0x44e <main+0x10>
	  {
		  
		  if(char_counter==16) // print 5 chars then clear test. 
 45c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <char_counter>
 460:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <char_counter+0x1>
 464:	40 97       	sbiw	r24, 0x10	; 16
 466:	19 f4       	brne	.+6      	; 0x46e <main+0x30>
		  {
			  LCD_CommandWrite_noBlock(0x01);
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_CommandWrite_noBlock>
		  }	  
		  PORTB ^= 1<<PORTB5; 
 46e:	85 b1       	in	r24, 0x05	; 5
 470:	81 27       	eor	r24, r17
 472:	85 b9       	out	0x05, r24	; 5
		  LCD_REFRESH();
 474:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_REFRESH>
		  SWTaskTimer1 = initTime;
 478:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <SWTaskTimer1+0x1>
 47c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <SWTaskTimer1>
 480:	e6 cf       	rjmp	.-52     	; 0x44e <main+0x10>

00000482 <__tablejump2__>:
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	05 90       	lpm	r0, Z+
 488:	f4 91       	lpm	r31, Z
 48a:	e0 2d       	mov	r30, r0
 48c:	09 94       	ijmp

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>
