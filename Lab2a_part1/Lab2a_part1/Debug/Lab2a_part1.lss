
Lab2a_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b7  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e5  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000170  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000186  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    DDRB |= 1<<DDB5;						// Set the fifth pin of DDRB as output.           
  80:	25 9a       	sbi	0x04, 5	; 4
	DDRD = 0b11111111;						// Set all of the bank D pins as output. 
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a b9       	out	0x0a, r24	; 10
	
    while (1) 
    {
		if(!(PINB & (1<<PINB7)))			// If the button is pressed, blink @ 8Hz
  86:	1f 99       	sbic	0x03, 7	; 3
  88:	19 c0       	rjmp	.+50     	; 0xbc <main+0x3c>
		{
			PORTB |= 1<<PORTB5;				// LED turns on.
  8a:	2d 9a       	sbi	0x05, 5	; 5
			PORTD = 0b111111111;			// Turn on all of PORTD.
  8c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	36 e0       	ldi	r19, 0x06	; 6
  92:	93 e0       	ldi	r25, 0x03	; 3
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1e>
  9e:	00 00       	nop
			_delay_ms(125/2);				// Wait 125 ms
			PORTB &= 0;						// LED turns off.
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	15 b8       	out	0x05, r1	; 5
			PORTD &= 0;						// Turn off all of PORTD.
  a4:	9b b1       	in	r25, 0x0b	; 11
  a6:	1b b8       	out	0x0b, r1	; 11
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	36 e0       	ldi	r19, 0x06	; 6
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
  ba:	e5 cf       	rjmp	.-54     	; 0x86 <main+0x6>
			_delay_ms(125/2);				// Wait 125 ms. 
		}
		else
		{
			PORTB |= 1<<PORTB5;				// Turn the LED on.
  bc:	2d 9a       	sbi	0x05, 5	; 5
			PORTD = 0b111111111;			// Turn on all of PORTD
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	34 e3       	ldi	r19, 0x34	; 52
  c4:	9c e0       	ldi	r25, 0x0C	; 12
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
			_delay_ms(250);					// Wait for 250 ms
			PORTB &= 0;						// Turn LED off.
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	15 b8       	out	0x05, r1	; 5
			PORTD &= 0;						// Turn off PORTD
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	1b b8       	out	0x0b, r1	; 11
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	34 e3       	ldi	r19, 0x34	; 52
  de:	9c e0       	ldi	r25, 0x0C	; 12
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	30 40       	sbci	r19, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x60>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x6a>
  ea:	00 00       	nop
  ec:	cc cf       	rjmp	.-104    	; 0x86 <main+0x6>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
