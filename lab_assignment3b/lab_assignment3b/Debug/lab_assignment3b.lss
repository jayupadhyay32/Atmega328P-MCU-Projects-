
lab_assignment3b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  00000b82  00000c16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800204  00800204  00000d1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001473  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064f  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a36  00000000  00000000  0000297e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000033b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a35  00000000  00000000  00003b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3c       	cpi	r26, 0xC9	; 201
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 46 02 	call	0x48c	; 0x48c <main>
  9e:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	_delay_ms(2);  // allow long enough delay 

}
 
void DisableJTAG(void)
{
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
}
 
void initialize_LCD(void)
{
	//DisableJTAG();
	LDCPortConfig();
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
	
	
	// initialize LCD
	LcdCommandWrite_UpperNibble(0x30);   // function set: 8-bit interface
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
	_delay_ms(4.1);
	LcdCommandWrite_UpperNibble(0x30);
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
	_delay_us(100);
	LcdCommandWrite_UpperNibble(0x30);
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	//_delay_ms(4.1);
	LcdCommandWrite_UpperNibble(0x20);
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	
	//LcdCommandWrite(0x38);   // function set: 0x38 means,  8-bit interface, 2 lines, 5x8 font
	LcdCommandWrite(0x28);   // function set: 0x28 means,  4-bit interface, 2 lines, 5x8 font
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	LcdCommandWrite(0x08);   // display control: turn display off, cursor off, no blinking
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	LcdCommandWrite(0x01);   // clear display, set address counter  to zero
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	LcdCommandWrite(0x06);   // entry mode set:
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	
	//   cursor increments automatically, no display shift
	LcdCommandWrite(0x0f);   // display on, cursor on, cursor blinking
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
	
}

void LCDclr(void) //Clears LCD
{
	LcdCommandWrite(0x01);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1f8:	08 95       	ret

000001fa <__vector_18>:
int toggle = 0;
int time_counter = 0;
int waiting = 0;

ISR(USART_RX_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	char r_char = UDR0;
 220:	e6 ec       	ldi	r30, 0xC6	; 198
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
	UDR0 = r_char; // Echo char back out of the system that the human user can see it.
 226:	80 83       	st	Z, r24
	
	if(r_char != '\r') // compare the enter character. 
 228:	8d 30       	cpi	r24, 0x0D	; 13
 22a:	89 f1       	breq	.+98     	; 0x28e <__vector_18+0x94>
	{
		if(r_char == 127) // compare backspace character. 
 22c:	8f 37       	cpi	r24, 0x7F	; 127
 22e:	c1 f4       	brne	.+48     	; 0x260 <__vector_18+0x66>
		{
			putchar(' '); // remove the character on the screen.
 230:	c3 ec       	ldi	r28, 0xC3	; 195
 232:	d2 e0       	ldi	r29, 0x02	; 2
 234:	6a 81       	ldd	r22, Y+2	; 0x02
 236:	7b 81       	ldd	r23, Y+3	; 0x03
 238:	80 e2       	ldi	r24, 0x20	; 32
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 1c 05 	call	0xa38	; 0xa38 <fputc>
			putchar('\b'); // backspace.
 240:	6a 81       	ldd	r22, Y+2	; 0x02
 242:	7b 81       	ldd	r23, Y+3	; 0x03
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 1c 05 	call	0xa38	; 0xa38 <fputc>
			--r_index; // erase previously read character in the r_buffer. 
 24c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <r_index>
 250:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <r_index+0x1>
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <r_index+0x1>
 25a:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <r_index>
 25e:	2e c0       	rjmp	.+92     	; 0x2bc <__vector_18+0xc2>
		}
		else
		{
			r_buffer[r_index] = r_char;
 260:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <r_index>
 264:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <r_index+0x1>
 268:	f9 01       	movw	r30, r18
 26a:	e1 5a       	subi	r30, 0xA1	; 161
 26c:	fd 4f       	sbci	r31, 0xFD	; 253
 26e:	80 83       	st	Z, r24
			if(r_index < r_buffer_size-1){r_index++;}
 270:	21 33       	cpi	r18, 0x31	; 49
 272:	31 05       	cpc	r19, r1
 274:	3c f4       	brge	.+14     	; 0x284 <__vector_18+0x8a>
 276:	2f 5f       	subi	r18, 0xFF	; 255
 278:	3f 4f       	sbci	r19, 0xFF	; 255
 27a:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <r_index+0x1>
 27e:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <r_index>
 282:	1c c0       	rjmp	.+56     	; 0x2bc <__vector_18+0xc2>
				else {r_index=0;}
 284:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <r_index+0x1>
 288:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <r_index>
 28c:	17 c0       	rjmp	.+46     	; 0x2bc <__vector_18+0xc2>
		}
	}
	else
	{
		putchar('\n');  // generate a new line.
 28e:	60 91 c5 02 	lds	r22, 0x02C5	; 0x8002c5 <__iob+0x2>
 292:	70 91 c6 02 	lds	r23, 0x02C6	; 0x8002c6 <__iob+0x3>
 296:	8a e0       	ldi	r24, 0x0A	; 10
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 1c 05 	call	0xa38	; 0xa38 <fputc>
		r_buffer[r_index]=0; // strings are terminated with a 0.
 29e:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <r_index>
 2a2:	f0 91 5e 02 	lds	r31, 0x025E	; 0x80025e <r_index+0x1>
 2a6:	e1 5a       	subi	r30, 0xA1	; 161
 2a8:	fd 4f       	sbci	r31, 0xFD	; 253
 2aa:	10 82       	st	Z, r1
		r_ready = 1;		
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <r_ready>
		UCSR0B ^= (1<<RXCIE0); // turn off receive interrupt. 
 2b2:	e1 ec       	ldi	r30, 0xC1	; 193
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	80 58       	subi	r24, 0x80	; 128
 2ba:	80 83       	st	Z, r24
	}
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <getstr>:

void getstr()
{
	r_ready = 0;						// Clear ready flag.
 2e2:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <r_ready>
	r_index = 0;						// Clear the buffer.
 2e6:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <r_index+0x1>
 2ea:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <r_index>
	UCSR0B |= (1<<RXCIE0);
 2ee:	e1 ec       	ldi	r30, 0xC1	; 193
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <printLCD>:
}  

void printLCD(char* c)
{
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	8c 01       	movw	r16, r24
	LCDclr();
 308:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
 30c:	78 01       	movw	r14, r16
	for(int i = 0; i<strlen(c); i++)
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	07 c0       	rjmp	.+14     	; 0x322 <printLCD+0x28>
	LcdDataWrite(c[i]);
 314:	f7 01       	movw	r30, r14
 316:	81 91       	ld	r24, Z+
 318:	7f 01       	movw	r14, r30
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
}  

void printLCD(char* c)
{
	LCDclr();
	for(int i = 0; i<strlen(c); i++)
 320:	21 96       	adiw	r28, 0x01	; 1
 322:	f8 01       	movw	r30, r16
 324:	01 90       	ld	r0, Z+
 326:	00 20       	and	r0, r0
 328:	e9 f7       	brne	.-6      	; 0x324 <printLCD+0x2a>
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	e0 1b       	sub	r30, r16
 32e:	f1 0b       	sbc	r31, r17
 330:	ce 17       	cp	r28, r30
 332:	df 07       	cpc	r29, r31
 334:	78 f3       	brcs	.-34     	; 0x314 <printLCD+0x1a>
	LcdDataWrite(c[i]);
	
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	08 95       	ret

00000344 <Task_InterpretReadBuffer>:

void Task_InterpretReadBuffer(void)			// Toggle from 2hz to 8hz if yes, otherwise no. Also print on LCD the current mode. 
{
	if(!strcmp("yes",r_buffer))			    // If the user would like to toggle. Value will only toggle if there is some value in the buffer and it's a yes.  
 344:	6f e5       	ldi	r22, 0x5F	; 95
 346:	72 e0       	ldi	r23, 0x02	; 2
 348:	8e e0       	ldi	r24, 0x0E	; 14
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 13 05 	call	0xa26	; 0xa26 <strcmp>
 350:	89 2b       	or	r24, r25
 352:	79 f4       	brne	.+30     	; 0x372 <Task_InterpretReadBuffer+0x2e>
	{
		toggle = !toggle;					// The LED mode has been toggled.   0 = 2hz,   1 = 8hz. 	
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <toggle>
 35c:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <toggle+0x1>
 360:	23 2b       	or	r18, r19
 362:	11 f0       	breq	.+4      	; 0x368 <Task_InterpretReadBuffer+0x24>
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <toggle+0x1>
 36c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <toggle>
 370:	21 c0       	rjmp	.+66     	; 0x3b4 <Task_InterpretReadBuffer+0x70>
	}
	else if(!strcmp("no",r_buffer))
 372:	6f e5       	ldi	r22, 0x5F	; 95
 374:	72 e0       	ldi	r23, 0x02	; 2
 376:	82 e1       	ldi	r24, 0x12	; 18
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 13 05 	call	0xa26	; 0xa26 <strcmp>
 37e:	89 2b       	or	r24, r25
 380:	69 f4       	brne	.+26     	; 0x39c <Task_InterpretReadBuffer+0x58>
	fprintf(stdout,"Fine, no mode will be changed.\n");
 382:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <__iob+0x2>
 386:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <__iob+0x3>
 38a:	4f e1       	ldi	r20, 0x1F	; 31
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	85 e1       	ldi	r24, 0x15	; 21
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 54 05 	call	0xaa8	; 0xaa8 <fwrite>
 39a:	0c c0       	rjmp	.+24     	; 0x3b4 <Task_InterpretReadBuffer+0x70>
	else
	fprintf(stdout,"hmm... weird input? I need a yes or a no!\n");
 39c:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <__iob+0x2>
 3a0:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <__iob+0x3>
 3a4:	4a e2       	ldi	r20, 0x2A	; 42
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	85 e3       	ldi	r24, 0x35	; 53
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <fwrite>
	
	if(toggle == 0){
 3b4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <toggle>
 3b8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <toggle+0x1>
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	89 f4       	brne	.+34     	; 0x3e2 <Task_InterpretReadBuffer+0x9e>
	printLCD("2 Hertz Mode!!");
 3c0:	80 e6       	ldi	r24, 0x60	; 96
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <printLCD>
	fprintf(stdout,"Changing to 2Hz mode. \n");
 3c8:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <__iob+0x2>
 3cc:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <__iob+0x3>
 3d0:	47 e1       	ldi	r20, 0x17	; 23
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	8f e6       	ldi	r24, 0x6F	; 111
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <fwrite>
 3e0:	12 c0       	rjmp	.+36     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
	}
	else if(toggle == 1)
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	81 f4       	brne	.+32     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
	{ 
	printLCD("8 Hertz Mode!!");
 3e6:	87 e8       	ldi	r24, 0x87	; 135
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 7d 01 	call	0x2fa	; 0x2fa <printLCD>
	fprintf(stdout,"Changing to 8Hz mode. \n");
 3ee:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <__iob+0x2>
 3f2:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <__iob+0x3>
 3f6:	47 e1       	ldi	r20, 0x17	; 23
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	86 e9       	ldi	r24, 0x96	; 150
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 54 05 	call	0xaa8	; 0xaa8 <fwrite>
	}
	
	time_counter = 0;					 // Reset the time counter.
 406:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <time_counter+0x1>
 40a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <time_counter>
 40e:	08 95       	ret

00000410 <led_blink>:
}

void led_blink(int a)
{
	if(a==0)
 410:	89 2b       	or	r24, r25
 412:	c1 f4       	brne	.+48     	; 0x444 <led_blink+0x34>
	{
		PORTB ^= 1<<PORTB5;
 414:	95 b1       	in	r25, 0x05	; 5
 416:	80 e2       	ldi	r24, 0x20	; 32
 418:	89 27       	eor	r24, r25
 41a:	85 b9       	out	0x05, r24	; 5
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	84 e3       	ldi	r24, 0x34	; 52
 420:	9c e0       	ldi	r25, 0x0C	; 12
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <led_blink+0x12>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <led_blink+0x1c>
 42c:	00 00       	nop
		_delay_ms(250);
		time_counter += 250;
 42e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <time_counter>
 432:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <time_counter+0x1>
 436:	86 50       	subi	r24, 0x06	; 6
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <time_counter+0x1>
 43e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <time_counter>
 442:	08 95       	ret
	}
	else
	{
		PORTB ^= 1<<PORTB5;
 444:	95 b1       	in	r25, 0x05	; 5
 446:	80 e2       	ldi	r24, 0x20	; 32
 448:	89 27       	eor	r24, r25
 44a:	85 b9       	out	0x05, r24	; 5
 44c:	2f e3       	ldi	r18, 0x3F	; 63
 44e:	8d e0       	ldi	r24, 0x0D	; 13
 450:	93 e0       	ldi	r25, 0x03	; 3
 452:	21 50       	subi	r18, 0x01	; 1
 454:	80 40       	sbci	r24, 0x00	; 0
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <led_blink+0x42>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <led_blink+0x4c>
 45c:	00 00       	nop
		_delay_ms(62.5);
		time_counter += 62.5;
 45e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <time_counter>
 462:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <time_counter+0x1>
 466:	07 2e       	mov	r0, r23
 468:	00 0c       	add	r0, r0
 46a:	88 0b       	sbc	r24, r24
 46c:	99 0b       	sbc	r25, r25
 46e:	0e 94 87 04 	call	0x90e	; 0x90e <__floatsisf>
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	4a e7       	ldi	r20, 0x7A	; 122
 478:	52 e4       	ldi	r21, 0x42	; 66
 47a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 47e:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixsfsi>
 482:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <time_counter+0x1>
 486:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <time_counter>
 48a:	08 95       	ret

0000048c <main>:
}


int main(void)
{
	DDRB = 1<<DDB5;   // Pin 5 is the output.
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	84 b9       	out	0x04, r24	; 4
	
	uart_init();      // Initialize the UART. 
 490:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_init>
	initialize_LCD(); // LCD is initialized. 
 494:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
	stdout=stdin=stderr=&uart_str;
 498:	c3 ec       	ldi	r28, 0xC3	; 195
 49a:	d2 e0       	ldi	r29, 0x02	; 2
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	9d 83       	std	Y+5, r25	; 0x05
 4a2:	8c 83       	std	Y+4, r24	; 0x04
 4a4:	99 83       	std	Y+1, r25	; 0x01
 4a6:	88 83       	st	Y, r24
 4a8:	9b 83       	std	Y+3, r25	; 0x03
 4aa:	8a 83       	std	Y+2, r24	; 0x02
	sei();						   // Global interrupts initialized. 
 4ac:	78 94       	sei
    getstr();					   // Reset the r_buffer
 4ae:	0e 94 71 01 	call	0x2e2	; 0x2e2 <getstr>
    fprintf(stdout,"Hello, welcome to Lab Assignment 3B \n");    
 4b2:	2a 81       	ldd	r18, Y+2	; 0x02
 4b4:	3b 81       	ldd	r19, Y+3	; 0x03
 4b6:	45 e2       	ldi	r20, 0x25	; 37
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	8e ea       	ldi	r24, 0xAE	; 174
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <fwrite>
	printLCD("2 Hertz Mode!!");
 4c6:	80 e6       	ldi	r24, 0x60	; 96
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 7d 01 	call	0x2fa	; 0x2fa <printLCD>
	
    while (1)					   // Main loop 
    {
		led_blink(toggle);
 4ce:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <toggle>
 4d2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <toggle+0x1>
 4d6:	0e 94 08 02 	call	0x410	; 0x410 <led_blink>
		
		if(time_counter>=10000)	   // If our value is above or equal to 10 seconds.
 4da:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <time_counter>
 4de:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <time_counter+0x1>
 4e2:	80 31       	cpi	r24, 0x10	; 16
 4e4:	97 42       	sbci	r25, 0x27	; 39
 4e6:	7c f1       	brlt	.+94     	; 0x546 <main+0xba>
		{   
			if(!waiting){
 4e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 4ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
 4f0:	89 2b       	or	r24, r25
 4f2:	21 f5       	brne	.+72     	; 0x53c <main+0xb0>
			fprintf(stdout,"Would you like to change modes? yes/no\n");
 4f4:	2a 81       	ldd	r18, Y+2	; 0x02
 4f6:	3b 81       	ldd	r19, Y+3	; 0x03
 4f8:	47 e2       	ldi	r20, 0x27	; 39
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	84 ed       	ldi	r24, 0xD4	; 212
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 54 05 	call	0xaa8	; 0xaa8 <fwrite>
			waiting = 1;		// Set the flag to wait so the print does not pop up again until something is entered. 
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
 510:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
			}
		}
		
		if(r_ready == 1 && time_counter>=10000)	   // If there is something in the buffer, aka some input was received.
 514:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <r_ready>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	c9 f6       	brne	.-78     	; 0x4ce <main+0x42>
 51c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <time_counter>
 520:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <time_counter+0x1>
 524:	80 31       	cpi	r24, 0x10	; 16
 526:	97 42       	sbci	r25, 0x27	; 39
 528:	94 f2       	brlt	.-92     	; 0x4ce <main+0x42>
		{
			getstr();
 52a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <getstr>
			Task_InterpretReadBuffer();
 52e:	0e 94 a2 01 	call	0x344	; 0x344 <Task_InterpretReadBuffer>
			waiting = 0;						 // Wait flag is reset and after 10 seconds, it will be set.
 532:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
 536:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
 53a:	c9 cf       	rjmp	.-110    	; 0x4ce <main+0x42>
			fprintf(stdout,"Would you like to change modes? yes/no\n");
			waiting = 1;		// Set the flag to wait so the print does not pop up again until something is entered. 
			}
		}
		
		if(r_ready == 1 && time_counter>=10000)	   // If there is something in the buffer, aka some input was received.
 53c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <r_ready>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	29 f6       	brne	.-118    	; 0x4ce <main+0x42>
 544:	f2 cf       	rjmp	.-28     	; 0x52a <main+0x9e>
 546:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <r_ready>
 54a:	c1 cf       	rjmp	.-126    	; 0x4ce <main+0x42>

0000054c <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 54c:	87 e6       	ldi	r24, 0x67	; 103
 54e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 552:	88 e1       	ldi	r24, 0x18	; 24
 554:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 558:	08 95       	ret

0000055a <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 55a:	cf 93       	push	r28
 55c:	c8 2f       	mov	r28, r24

  if (c == '\a')
 55e:	87 30       	cpi	r24, 0x07	; 7
 560:	69 f4       	brne	.+26     	; 0x57c <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 562:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <__iob+0x4>
 566:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <__iob+0x5>
 56a:	47 e0       	ldi	r20, 0x07	; 7
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	8c ef       	ldi	r24, 0xFC	; 252
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 54 05 	call	0xaa8	; 0xaa8 <fwrite>
      return 0;
 57a:	0c c0       	rjmp	.+24     	; 0x594 <uart_putchar+0x3a>
    }

  if (c == '\n')
 57c:	8a 30       	cpi	r24, 0x0A	; 10
 57e:	19 f4       	brne	.+6      	; 0x586 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 580:	8d e0       	ldi	r24, 0x0D	; 13
 582:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 586:	e0 ec       	ldi	r30, 0xC0	; 192
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	90 81       	ld	r25, Z
 58c:	95 ff       	sbrs	r25, 5
 58e:	fd cf       	rjmp	.-6      	; 0x58a <uart_putchar+0x30>
  UDR0 = c;
 590:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 59c:	6f 92       	push	r6
 59e:	7f 92       	push	r7
 5a0:	8f 92       	push	r8
 5a2:	9f 92       	push	r9
 5a4:	af 92       	push	r10
 5a6:	bf 92       	push	r11
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 5b8:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <rxp.1708>
 5bc:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <rxp.1708+0x1>
 5c0:	23 2b       	or	r18, r19
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <uart_getchar+0x2a>
 5c4:	d5 c0       	rjmp	.+426    	; 0x770 <uart_getchar+0x1d4>
 5c6:	8c 01       	movw	r16, r24
 5c8:	0f 2e       	mov	r0, r31
 5ca:	fa e0       	ldi	r31, 0x0A	; 10
 5cc:	8f 2e       	mov	r8, r31
 5ce:	f2 e0       	ldi	r31, 0x02	; 2
 5d0:	9f 2e       	mov	r9, r31
 5d2:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 5d4:	c0 ec       	ldi	r28, 0xC0	; 192
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 5d8:	0f 2e       	mov	r0, r31
 5da:	f6 ec       	ldi	r31, 0xC6	; 198
 5dc:	cf 2e       	mov	r12, r31
 5de:	d1 2c       	mov	r13, r1
 5e0:	f0 2d       	mov	r31, r0
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 5e2:	54 01       	movw	r10, r8
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f9 e0       	ldi	r31, 0x09	; 9
 5e8:	6f 2e       	mov	r6, r31
 5ea:	f2 e0       	ldi	r31, 0x02	; 2
 5ec:	7f 2e       	mov	r7, r31
 5ee:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 5f0:	88 81       	ld	r24, Y
 5f2:	88 23       	and	r24, r24
 5f4:	ec f7       	brge	.-6      	; 0x5f0 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 5f6:	88 81       	ld	r24, Y
 5f8:	84 fd       	sbrc	r24, 4
 5fa:	cd c0       	rjmp	.+410    	; 0x796 <uart_getchar+0x1fa>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 5fc:	88 81       	ld	r24, Y
 5fe:	83 fd       	sbrc	r24, 3
 600:	cd c0       	rjmp	.+410    	; 0x79c <uart_getchar+0x200>
	  return _FDEV_ERR;
	c = UDR0;
 602:	f6 01       	movw	r30, r12
 604:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 606:	8d 30       	cpi	r24, 0x0D	; 13
 608:	11 f0       	breq	.+4      	; 0x60e <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 60a:	8a 30       	cpi	r24, 0x0A	; 10
 60c:	69 f4       	brne	.+26     	; 0x628 <uart_getchar+0x8c>
	  {
	    *cp = c;
 60e:	8a e0       	ldi	r24, 0x0A	; 10
 610:	f4 01       	movw	r30, r8
 612:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 614:	b8 01       	movw	r22, r16
 616:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
	    rxp = b;
 61a:	8a e0       	ldi	r24, 0x0A	; 10
 61c:	92 e0       	ldi	r25, 0x02	; 2
 61e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <rxp.1708+0x1>
 622:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <rxp.1708>
	    break;
 626:	a4 c0       	rjmp	.+328    	; 0x770 <uart_getchar+0x1d4>
	  }
	else if (c == '\t')
 628:	89 30       	cpi	r24, 0x09	; 9
 62a:	39 f0       	breq	.+14     	; 0x63a <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 62c:	90 ee       	ldi	r25, 0xE0	; 224
 62e:	98 0f       	add	r25, r24
 630:	9f 35       	cpi	r25, 0x5F	; 95
 632:	20 f0       	brcs	.+8      	; 0x63c <uart_getchar+0xa0>
 634:	80 3a       	cpi	r24, 0xA0	; 160
 636:	b8 f0       	brcs	.+46     	; 0x666 <uart_getchar+0xca>
 638:	01 c0       	rjmp	.+2      	; 0x63c <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 63a:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 63c:	f9 e5       	ldi	r31, 0x59	; 89
 63e:	8f 16       	cp	r8, r31
 640:	f2 e0       	ldi	r31, 0x02	; 2
 642:	9f 06       	cpc	r9, r31
 644:	29 f4       	brne	.+10     	; 0x650 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 646:	b8 01       	movw	r22, r16
 648:	87 e0       	ldi	r24, 0x07	; 7
 64a:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
 64e:	d0 cf       	rjmp	.-96     	; 0x5f0 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 650:	74 01       	movw	r14, r8
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	e9 1a       	sub	r14, r25
 656:	f9 0a       	sbc	r15, r25
 658:	f4 01       	movw	r30, r8
 65a:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 65c:	b8 01       	movw	r22, r16
 65e:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 662:	47 01       	movw	r8, r14
 664:	c5 cf       	rjmp	.-118    	; 0x5f0 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 666:	82 31       	cpi	r24, 0x12	; 18
 668:	d1 f1       	breq	.+116    	; 0x6de <uart_getchar+0x142>
 66a:	30 f4       	brcc	.+12     	; 0x678 <uart_getchar+0xdc>
 66c:	83 30       	cpi	r24, 0x03	; 3
 66e:	09 f4       	brne	.+2      	; 0x672 <uart_getchar+0xd6>
 670:	98 c0       	rjmp	.+304    	; 0x7a2 <uart_getchar+0x206>
 672:	88 30       	cpi	r24, 0x08	; 8
 674:	e9 f0       	breq	.+58     	; 0x6b0 <uart_getchar+0x114>
 676:	bc cf       	rjmp	.-136    	; 0x5f0 <uart_getchar+0x54>
 678:	87 31       	cpi	r24, 0x17	; 23
 67a:	29 f0       	breq	.+10     	; 0x686 <uart_getchar+0xea>
 67c:	8f 37       	cpi	r24, 0x7F	; 127
 67e:	c1 f0       	breq	.+48     	; 0x6b0 <uart_getchar+0x114>
 680:	85 31       	cpi	r24, 0x15	; 21
 682:	79 f0       	breq	.+30     	; 0x6a2 <uart_getchar+0x106>
 684:	b5 cf       	rjmp	.-150    	; 0x5f0 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 686:	fa e0       	ldi	r31, 0x0A	; 10
 688:	8f 16       	cp	r8, r31
 68a:	f2 e0       	ldi	r31, 0x02	; 2
 68c:	9f 06       	cpc	r9, r31
 68e:	09 f0       	breq	.+2      	; 0x692 <uart_getchar+0xf6>
 690:	08 f4       	brcc	.+2      	; 0x694 <uart_getchar+0xf8>
 692:	ae cf       	rjmp	.-164    	; 0x5f0 <uart_getchar+0x54>
 694:	f4 01       	movw	r30, r8
 696:	31 97       	sbiw	r30, 0x01	; 1
 698:	80 81       	ld	r24, Z
 69a:	80 32       	cpi	r24, 0x20	; 32
 69c:	09 f0       	breq	.+2      	; 0x6a0 <uart_getchar+0x104>
 69e:	4d c0       	rjmp	.+154    	; 0x73a <uart_getchar+0x19e>
 6a0:	a7 cf       	rjmp	.-178    	; 0x5f0 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 6a2:	8a e0       	ldi	r24, 0x0A	; 10
 6a4:	88 16       	cp	r8, r24
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	98 06       	cpc	r9, r24
 6aa:	09 f0       	breq	.+2      	; 0x6ae <uart_getchar+0x112>
 6ac:	70 f5       	brcc	.+92     	; 0x70a <uart_getchar+0x16e>
 6ae:	a0 cf       	rjmp	.-192    	; 0x5f0 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 6b0:	9a e0       	ldi	r25, 0x0A	; 10
 6b2:	89 16       	cp	r8, r25
 6b4:	92 e0       	ldi	r25, 0x02	; 2
 6b6:	99 06       	cpc	r9, r25
 6b8:	09 f0       	breq	.+2      	; 0x6bc <uart_getchar+0x120>
 6ba:	08 f4       	brcc	.+2      	; 0x6be <uart_getchar+0x122>
 6bc:	99 cf       	rjmp	.-206    	; 0x5f0 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 6be:	b8 01       	movw	r22, r16
 6c0:	88 e0       	ldi	r24, 0x08	; 8
 6c2:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		uart_putchar(' ', stream);
 6c6:	b8 01       	movw	r22, r16
 6c8:	80 e2       	ldi	r24, 0x20	; 32
 6ca:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		uart_putchar('\b', stream);
 6ce:	b8 01       	movw	r22, r16
 6d0:	88 e0       	ldi	r24, 0x08	; 8
 6d2:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		cp--;
 6d6:	e1 e0       	ldi	r30, 0x01	; 1
 6d8:	8e 1a       	sub	r8, r30
 6da:	91 08       	sbc	r9, r1
 6dc:	89 cf       	rjmp	.-238    	; 0x5f0 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 6de:	b8 01       	movw	r22, r16
 6e0:	8d e0       	ldi	r24, 0x0D	; 13
 6e2:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 6e6:	fa e0       	ldi	r31, 0x0A	; 10
 6e8:	8f 16       	cp	r8, r31
 6ea:	f2 e0       	ldi	r31, 0x02	; 2
 6ec:	9f 06       	cpc	r9, r31
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <uart_getchar+0x156>
 6f0:	08 f4       	brcc	.+2      	; 0x6f4 <uart_getchar+0x158>
 6f2:	7e cf       	rjmp	.-260    	; 0x5f0 <uart_getchar+0x54>
 6f4:	75 01       	movw	r14, r10
	      uart_putchar(*cp2, stream);
 6f6:	b8 01       	movw	r22, r16
 6f8:	f7 01       	movw	r30, r14
 6fa:	81 91       	ld	r24, Z+
 6fc:	7f 01       	movw	r14, r30
 6fe:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 702:	e8 14       	cp	r14, r8
 704:	f9 04       	cpc	r15, r9
 706:	b9 f7       	brne	.-18     	; 0x6f6 <uart_getchar+0x15a>
 708:	73 cf       	rjmp	.-282    	; 0x5f0 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 70a:	b8 01       	movw	r22, r16
 70c:	88 e0       	ldi	r24, 0x08	; 8
 70e:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		uart_putchar(' ', stream);
 712:	b8 01       	movw	r22, r16
 714:	80 e2       	ldi	r24, 0x20	; 32
 716:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		uart_putchar('\b', stream);
 71a:	b8 01       	movw	r22, r16
 71c:	88 e0       	ldi	r24, 0x08	; 8
 71e:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		cp--;
 722:	f1 e0       	ldi	r31, 0x01	; 1
 724:	8f 1a       	sub	r8, r31
 726:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 728:	8a e0       	ldi	r24, 0x0A	; 10
 72a:	88 16       	cp	r8, r24
 72c:	82 e0       	ldi	r24, 0x02	; 2
 72e:	98 06       	cpc	r9, r24
 730:	61 f7       	brne	.-40     	; 0x70a <uart_getchar+0x16e>
 732:	f3 01       	movw	r30, r6
 734:	31 96       	adiw	r30, 0x01	; 1
 736:	4f 01       	movw	r8, r30
 738:	5b cf       	rjmp	.-330    	; 0x5f0 <uart_getchar+0x54>
 73a:	74 01       	movw	r14, r8
 73c:	f1 e0       	ldi	r31, 0x01	; 1
 73e:	ef 1a       	sub	r14, r31
 740:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 742:	b8 01       	movw	r22, r16
 744:	88 e0       	ldi	r24, 0x08	; 8
 746:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		uart_putchar(' ', stream);
 74a:	b8 01       	movw	r22, r16
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		uart_putchar('\b', stream);
 752:	b8 01       	movw	r22, r16
 754:	88 e0       	ldi	r24, 0x08	; 8
 756:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putchar>
		cp--;
 75a:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 75c:	ea 14       	cp	r14, r10
 75e:	fb 04       	cpc	r15, r11
 760:	09 f4       	brne	.+2      	; 0x764 <uart_getchar+0x1c8>
 762:	46 cf       	rjmp	.-372    	; 0x5f0 <uart_getchar+0x54>
 764:	f7 01       	movw	r30, r14
 766:	82 91       	ld	r24, -Z
 768:	7f 01       	movw	r14, r30
 76a:	80 32       	cpi	r24, 0x20	; 32
 76c:	51 f7       	brne	.-44     	; 0x742 <uart_getchar+0x1a6>
 76e:	40 cf       	rjmp	.-384    	; 0x5f0 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 770:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <rxp.1708>
 774:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <rxp.1708+0x1>
 778:	cf 01       	movw	r24, r30
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <rxp.1708+0x1>
 780:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <rxp.1708>
 784:	80 81       	ld	r24, Z
  if (c == '\n')
 786:	8a 30       	cpi	r24, 0x0A	; 10
 788:	21 f4       	brne	.+8      	; 0x792 <uart_getchar+0x1f6>
    rxp = 0;
 78a:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <rxp.1708+0x1>
 78e:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <rxp.1708>

  return c;
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	08 c0       	rjmp	.+16     	; 0x7a6 <uart_getchar+0x20a>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 796:	8e ef       	ldi	r24, 0xFE	; 254
 798:	9f ef       	ldi	r25, 0xFF	; 255
 79a:	05 c0       	rjmp	.+10     	; 0x7a6 <uart_getchar+0x20a>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	9f ef       	ldi	r25, 0xFF	; 255
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <uart_getchar+0x20a>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	df 90       	pop	r13
 7b4:	cf 90       	pop	r12
 7b6:	bf 90       	pop	r11
 7b8:	af 90       	pop	r10
 7ba:	9f 90       	pop	r9
 7bc:	8f 90       	pop	r8
 7be:	7f 90       	pop	r7
 7c0:	6f 90       	pop	r6
 7c2:	08 95       	ret

000007c4 <__subsf3>:
 7c4:	50 58       	subi	r21, 0x80	; 128

000007c6 <__addsf3>:
 7c6:	bb 27       	eor	r27, r27
 7c8:	aa 27       	eor	r26, r26
 7ca:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__addsf3x>
 7ce:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_round>
 7d2:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscA>
 7d6:	38 f0       	brcs	.+14     	; 0x7e6 <__addsf3+0x20>
 7d8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_pscB>
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__addsf3+0x20>
 7de:	39 f4       	brne	.+14     	; 0x7ee <__addsf3+0x28>
 7e0:	9f 3f       	cpi	r25, 0xFF	; 255
 7e2:	19 f4       	brne	.+6      	; 0x7ea <__addsf3+0x24>
 7e4:	26 f4       	brtc	.+8      	; 0x7ee <__addsf3+0x28>
 7e6:	0c 94 c8 04 	jmp	0x990	; 0x990 <__fp_nan>
 7ea:	0e f4       	brtc	.+2      	; 0x7ee <__addsf3+0x28>
 7ec:	e0 95       	com	r30
 7ee:	e7 fb       	bst	r30, 7
 7f0:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>

000007f4 <__addsf3x>:
 7f4:	e9 2f       	mov	r30, r25
 7f6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_split3>
 7fa:	58 f3       	brcs	.-42     	; 0x7d2 <__addsf3+0xc>
 7fc:	ba 17       	cp	r27, r26
 7fe:	62 07       	cpc	r22, r18
 800:	73 07       	cpc	r23, r19
 802:	84 07       	cpc	r24, r20
 804:	95 07       	cpc	r25, r21
 806:	20 f0       	brcs	.+8      	; 0x810 <__addsf3x+0x1c>
 808:	79 f4       	brne	.+30     	; 0x828 <__addsf3x+0x34>
 80a:	a6 f5       	brtc	.+104    	; 0x874 <__addsf3x+0x80>
 80c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_zero>
 810:	0e f4       	brtc	.+2      	; 0x814 <__addsf3x+0x20>
 812:	e0 95       	com	r30
 814:	0b 2e       	mov	r0, r27
 816:	ba 2f       	mov	r27, r26
 818:	a0 2d       	mov	r26, r0
 81a:	0b 01       	movw	r0, r22
 81c:	b9 01       	movw	r22, r18
 81e:	90 01       	movw	r18, r0
 820:	0c 01       	movw	r0, r24
 822:	ca 01       	movw	r24, r20
 824:	a0 01       	movw	r20, r0
 826:	11 24       	eor	r1, r1
 828:	ff 27       	eor	r31, r31
 82a:	59 1b       	sub	r21, r25
 82c:	99 f0       	breq	.+38     	; 0x854 <__addsf3x+0x60>
 82e:	59 3f       	cpi	r21, 0xF9	; 249
 830:	50 f4       	brcc	.+20     	; 0x846 <__addsf3x+0x52>
 832:	50 3e       	cpi	r21, 0xE0	; 224
 834:	68 f1       	brcs	.+90     	; 0x890 <__addsf3x+0x9c>
 836:	1a 16       	cp	r1, r26
 838:	f0 40       	sbci	r31, 0x00	; 0
 83a:	a2 2f       	mov	r26, r18
 83c:	23 2f       	mov	r18, r19
 83e:	34 2f       	mov	r19, r20
 840:	44 27       	eor	r20, r20
 842:	58 5f       	subi	r21, 0xF8	; 248
 844:	f3 cf       	rjmp	.-26     	; 0x82c <__addsf3x+0x38>
 846:	46 95       	lsr	r20
 848:	37 95       	ror	r19
 84a:	27 95       	ror	r18
 84c:	a7 95       	ror	r26
 84e:	f0 40       	sbci	r31, 0x00	; 0
 850:	53 95       	inc	r21
 852:	c9 f7       	brne	.-14     	; 0x846 <__addsf3x+0x52>
 854:	7e f4       	brtc	.+30     	; 0x874 <__addsf3x+0x80>
 856:	1f 16       	cp	r1, r31
 858:	ba 0b       	sbc	r27, r26
 85a:	62 0b       	sbc	r22, r18
 85c:	73 0b       	sbc	r23, r19
 85e:	84 0b       	sbc	r24, r20
 860:	ba f0       	brmi	.+46     	; 0x890 <__addsf3x+0x9c>
 862:	91 50       	subi	r25, 0x01	; 1
 864:	a1 f0       	breq	.+40     	; 0x88e <__addsf3x+0x9a>
 866:	ff 0f       	add	r31, r31
 868:	bb 1f       	adc	r27, r27
 86a:	66 1f       	adc	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	c2 f7       	brpl	.-16     	; 0x862 <__addsf3x+0x6e>
 872:	0e c0       	rjmp	.+28     	; 0x890 <__addsf3x+0x9c>
 874:	ba 0f       	add	r27, r26
 876:	62 1f       	adc	r22, r18
 878:	73 1f       	adc	r23, r19
 87a:	84 1f       	adc	r24, r20
 87c:	48 f4       	brcc	.+18     	; 0x890 <__addsf3x+0x9c>
 87e:	87 95       	ror	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	b7 95       	ror	r27
 886:	f7 95       	ror	r31
 888:	9e 3f       	cpi	r25, 0xFE	; 254
 88a:	08 f0       	brcs	.+2      	; 0x88e <__addsf3x+0x9a>
 88c:	b0 cf       	rjmp	.-160    	; 0x7ee <__addsf3+0x28>
 88e:	93 95       	inc	r25
 890:	88 0f       	add	r24, r24
 892:	08 f0       	brcs	.+2      	; 0x896 <__addsf3x+0xa2>
 894:	99 27       	eor	r25, r25
 896:	ee 0f       	add	r30, r30
 898:	97 95       	ror	r25
 89a:	87 95       	ror	r24
 89c:	08 95       	ret

0000089e <__fixsfsi>:
 89e:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fixunssfsi>
 8a2:	68 94       	set
 8a4:	b1 11       	cpse	r27, r1
 8a6:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_szero>
 8aa:	08 95       	ret

000008ac <__fixunssfsi>:
 8ac:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_splitA>
 8b0:	88 f0       	brcs	.+34     	; 0x8d4 <__fixunssfsi+0x28>
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	98 f0       	brcs	.+38     	; 0x8dc <__fixunssfsi+0x30>
 8b6:	b9 2f       	mov	r27, r25
 8b8:	99 27       	eor	r25, r25
 8ba:	b7 51       	subi	r27, 0x17	; 23
 8bc:	b0 f0       	brcs	.+44     	; 0x8ea <__fixunssfsi+0x3e>
 8be:	e1 f0       	breq	.+56     	; 0x8f8 <__fixunssfsi+0x4c>
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	1a f0       	brmi	.+6      	; 0x8d0 <__fixunssfsi+0x24>
 8ca:	ba 95       	dec	r27
 8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__fixunssfsi+0x14>
 8ce:	14 c0       	rjmp	.+40     	; 0x8f8 <__fixunssfsi+0x4c>
 8d0:	b1 30       	cpi	r27, 0x01	; 1
 8d2:	91 f0       	breq	.+36     	; 0x8f8 <__fixunssfsi+0x4c>
 8d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_zero>
 8d8:	b1 e0       	ldi	r27, 0x01	; 1
 8da:	08 95       	ret
 8dc:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_zero>
 8e0:	67 2f       	mov	r22, r23
 8e2:	78 2f       	mov	r23, r24
 8e4:	88 27       	eor	r24, r24
 8e6:	b8 5f       	subi	r27, 0xF8	; 248
 8e8:	39 f0       	breq	.+14     	; 0x8f8 <__fixunssfsi+0x4c>
 8ea:	b9 3f       	cpi	r27, 0xF9	; 249
 8ec:	cc f3       	brlt	.-14     	; 0x8e0 <__fixunssfsi+0x34>
 8ee:	86 95       	lsr	r24
 8f0:	77 95       	ror	r23
 8f2:	67 95       	ror	r22
 8f4:	b3 95       	inc	r27
 8f6:	d9 f7       	brne	.-10     	; 0x8ee <__fixunssfsi+0x42>
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__stack+0x9>
 8fa:	90 95       	com	r25
 8fc:	80 95       	com	r24
 8fe:	70 95       	com	r23
 900:	61 95       	neg	r22
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	08 95       	ret

0000090a <__floatunsisf>:
 90a:	e8 94       	clt
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__floatsisf+0x12>

0000090e <__floatsisf>:
 90e:	97 fb       	bst	r25, 7
 910:	3e f4       	brtc	.+14     	; 0x920 <__floatsisf+0x12>
 912:	90 95       	com	r25
 914:	80 95       	com	r24
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255
 91c:	8f 4f       	sbci	r24, 0xFF	; 255
 91e:	9f 4f       	sbci	r25, 0xFF	; 255
 920:	99 23       	and	r25, r25
 922:	a9 f0       	breq	.+42     	; 0x94e <__floatsisf+0x40>
 924:	f9 2f       	mov	r31, r25
 926:	96 e9       	ldi	r25, 0x96	; 150
 928:	bb 27       	eor	r27, r27
 92a:	93 95       	inc	r25
 92c:	f6 95       	lsr	r31
 92e:	87 95       	ror	r24
 930:	77 95       	ror	r23
 932:	67 95       	ror	r22
 934:	b7 95       	ror	r27
 936:	f1 11       	cpse	r31, r1
 938:	f8 cf       	rjmp	.-16     	; 0x92a <__floatsisf+0x1c>
 93a:	fa f4       	brpl	.+62     	; 0x97a <__floatsisf+0x6c>
 93c:	bb 0f       	add	r27, r27
 93e:	11 f4       	brne	.+4      	; 0x944 <__floatsisf+0x36>
 940:	60 ff       	sbrs	r22, 0
 942:	1b c0       	rjmp	.+54     	; 0x97a <__floatsisf+0x6c>
 944:	6f 5f       	subi	r22, 0xFF	; 255
 946:	7f 4f       	sbci	r23, 0xFF	; 255
 948:	8f 4f       	sbci	r24, 0xFF	; 255
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	16 c0       	rjmp	.+44     	; 0x97a <__floatsisf+0x6c>
 94e:	88 23       	and	r24, r24
 950:	11 f0       	breq	.+4      	; 0x956 <__floatsisf+0x48>
 952:	96 e9       	ldi	r25, 0x96	; 150
 954:	11 c0       	rjmp	.+34     	; 0x978 <__floatsisf+0x6a>
 956:	77 23       	and	r23, r23
 958:	21 f0       	breq	.+8      	; 0x962 <__floatsisf+0x54>
 95a:	9e e8       	ldi	r25, 0x8E	; 142
 95c:	87 2f       	mov	r24, r23
 95e:	76 2f       	mov	r23, r22
 960:	05 c0       	rjmp	.+10     	; 0x96c <__floatsisf+0x5e>
 962:	66 23       	and	r22, r22
 964:	71 f0       	breq	.+28     	; 0x982 <__floatsisf+0x74>
 966:	96 e8       	ldi	r25, 0x86	; 134
 968:	86 2f       	mov	r24, r22
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	2a f0       	brmi	.+10     	; 0x97a <__floatsisf+0x6c>
 970:	9a 95       	dec	r25
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	da f7       	brpl	.-10     	; 0x970 <__floatsisf+0x62>
 97a:	88 0f       	add	r24, r24
 97c:	96 95       	lsr	r25
 97e:	87 95       	ror	r24
 980:	97 f9       	bld	r25, 7
 982:	08 95       	ret

00000984 <__fp_inf>:
 984:	97 f9       	bld	r25, 7
 986:	9f 67       	ori	r25, 0x7F	; 127
 988:	80 e8       	ldi	r24, 0x80	; 128
 98a:	70 e0       	ldi	r23, 0x00	; 0
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	08 95       	ret

00000990 <__fp_nan>:
 990:	9f ef       	ldi	r25, 0xFF	; 255
 992:	80 ec       	ldi	r24, 0xC0	; 192
 994:	08 95       	ret

00000996 <__fp_pscA>:
 996:	00 24       	eor	r0, r0
 998:	0a 94       	dec	r0
 99a:	16 16       	cp	r1, r22
 99c:	17 06       	cpc	r1, r23
 99e:	18 06       	cpc	r1, r24
 9a0:	09 06       	cpc	r0, r25
 9a2:	08 95       	ret

000009a4 <__fp_pscB>:
 9a4:	00 24       	eor	r0, r0
 9a6:	0a 94       	dec	r0
 9a8:	12 16       	cp	r1, r18
 9aa:	13 06       	cpc	r1, r19
 9ac:	14 06       	cpc	r1, r20
 9ae:	05 06       	cpc	r0, r21
 9b0:	08 95       	ret

000009b2 <__fp_round>:
 9b2:	09 2e       	mov	r0, r25
 9b4:	03 94       	inc	r0
 9b6:	00 0c       	add	r0, r0
 9b8:	11 f4       	brne	.+4      	; 0x9be <__fp_round+0xc>
 9ba:	88 23       	and	r24, r24
 9bc:	52 f0       	brmi	.+20     	; 0x9d2 <__fp_round+0x20>
 9be:	bb 0f       	add	r27, r27
 9c0:	40 f4       	brcc	.+16     	; 0x9d2 <__fp_round+0x20>
 9c2:	bf 2b       	or	r27, r31
 9c4:	11 f4       	brne	.+4      	; 0x9ca <__fp_round+0x18>
 9c6:	60 ff       	sbrs	r22, 0
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fp_round+0x20>
 9ca:	6f 5f       	subi	r22, 0xFF	; 255
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	08 95       	ret

000009d4 <__fp_split3>:
 9d4:	57 fd       	sbrc	r21, 7
 9d6:	90 58       	subi	r25, 0x80	; 128
 9d8:	44 0f       	add	r20, r20
 9da:	55 1f       	adc	r21, r21
 9dc:	59 f0       	breq	.+22     	; 0x9f4 <__fp_splitA+0x10>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	71 f0       	breq	.+28     	; 0x9fe <__fp_splitA+0x1a>
 9e2:	47 95       	ror	r20

000009e4 <__fp_splitA>:
 9e4:	88 0f       	add	r24, r24
 9e6:	97 fb       	bst	r25, 7
 9e8:	99 1f       	adc	r25, r25
 9ea:	61 f0       	breq	.+24     	; 0xa04 <__fp_splitA+0x20>
 9ec:	9f 3f       	cpi	r25, 0xFF	; 255
 9ee:	79 f0       	breq	.+30     	; 0xa0e <__fp_splitA+0x2a>
 9f0:	87 95       	ror	r24
 9f2:	08 95       	ret
 9f4:	12 16       	cp	r1, r18
 9f6:	13 06       	cpc	r1, r19
 9f8:	14 06       	cpc	r1, r20
 9fa:	55 1f       	adc	r21, r21
 9fc:	f2 cf       	rjmp	.-28     	; 0x9e2 <__fp_split3+0xe>
 9fe:	46 95       	lsr	r20
 a00:	f1 df       	rcall	.-30     	; 0x9e4 <__fp_splitA>
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <__fp_splitA+0x30>
 a04:	16 16       	cp	r1, r22
 a06:	17 06       	cpc	r1, r23
 a08:	18 06       	cpc	r1, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	f1 cf       	rjmp	.-30     	; 0x9f0 <__fp_splitA+0xc>
 a0e:	86 95       	lsr	r24
 a10:	71 05       	cpc	r23, r1
 a12:	61 05       	cpc	r22, r1
 a14:	08 94       	sec
 a16:	08 95       	ret

00000a18 <__fp_zero>:
 a18:	e8 94       	clt

00000a1a <__fp_szero>:
 a1a:	bb 27       	eor	r27, r27
 a1c:	66 27       	eor	r22, r22
 a1e:	77 27       	eor	r23, r23
 a20:	cb 01       	movw	r24, r22
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret

00000a26 <strcmp>:
 a26:	fb 01       	movw	r30, r22
 a28:	dc 01       	movw	r26, r24
 a2a:	8d 91       	ld	r24, X+
 a2c:	01 90       	ld	r0, Z+
 a2e:	80 19       	sub	r24, r0
 a30:	01 10       	cpse	r0, r1
 a32:	d9 f3       	breq	.-10     	; 0xa2a <strcmp+0x4>
 a34:	99 0b       	sbc	r25, r25
 a36:	08 95       	ret

00000a38 <fputc>:
 a38:	0f 93       	push	r16
 a3a:	1f 93       	push	r17
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	fb 01       	movw	r30, r22
 a42:	23 81       	ldd	r18, Z+3	; 0x03
 a44:	21 fd       	sbrc	r18, 1
 a46:	03 c0       	rjmp	.+6      	; 0xa4e <fputc+0x16>
 a48:	8f ef       	ldi	r24, 0xFF	; 255
 a4a:	9f ef       	ldi	r25, 0xFF	; 255
 a4c:	28 c0       	rjmp	.+80     	; 0xa9e <fputc+0x66>
 a4e:	22 ff       	sbrs	r18, 2
 a50:	16 c0       	rjmp	.+44     	; 0xa7e <fputc+0x46>
 a52:	46 81       	ldd	r20, Z+6	; 0x06
 a54:	57 81       	ldd	r21, Z+7	; 0x07
 a56:	24 81       	ldd	r18, Z+4	; 0x04
 a58:	35 81       	ldd	r19, Z+5	; 0x05
 a5a:	42 17       	cp	r20, r18
 a5c:	53 07       	cpc	r21, r19
 a5e:	44 f4       	brge	.+16     	; 0xa70 <fputc+0x38>
 a60:	a0 81       	ld	r26, Z
 a62:	b1 81       	ldd	r27, Z+1	; 0x01
 a64:	9d 01       	movw	r18, r26
 a66:	2f 5f       	subi	r18, 0xFF	; 255
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	31 83       	std	Z+1, r19	; 0x01
 a6c:	20 83       	st	Z, r18
 a6e:	8c 93       	st	X, r24
 a70:	26 81       	ldd	r18, Z+6	; 0x06
 a72:	37 81       	ldd	r19, Z+7	; 0x07
 a74:	2f 5f       	subi	r18, 0xFF	; 255
 a76:	3f 4f       	sbci	r19, 0xFF	; 255
 a78:	37 83       	std	Z+7, r19	; 0x07
 a7a:	26 83       	std	Z+6, r18	; 0x06
 a7c:	10 c0       	rjmp	.+32     	; 0xa9e <fputc+0x66>
 a7e:	eb 01       	movw	r28, r22
 a80:	09 2f       	mov	r16, r25
 a82:	18 2f       	mov	r17, r24
 a84:	00 84       	ldd	r0, Z+8	; 0x08
 a86:	f1 85       	ldd	r31, Z+9	; 0x09
 a88:	e0 2d       	mov	r30, r0
 a8a:	09 95       	icall
 a8c:	89 2b       	or	r24, r25
 a8e:	e1 f6       	brne	.-72     	; 0xa48 <fputc+0x10>
 a90:	8e 81       	ldd	r24, Y+6	; 0x06
 a92:	9f 81       	ldd	r25, Y+7	; 0x07
 a94:	01 96       	adiw	r24, 0x01	; 1
 a96:	9f 83       	std	Y+7, r25	; 0x07
 a98:	8e 83       	std	Y+6, r24	; 0x06
 a9a:	81 2f       	mov	r24, r17
 a9c:	90 2f       	mov	r25, r16
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	1f 91       	pop	r17
 aa4:	0f 91       	pop	r16
 aa6:	08 95       	ret

00000aa8 <fwrite>:
 aa8:	a0 e0       	ldi	r26, 0x00	; 0
 aaa:	b0 e0       	ldi	r27, 0x00	; 0
 aac:	ea e5       	ldi	r30, 0x5A	; 90
 aae:	f5 e0       	ldi	r31, 0x05	; 5
 ab0:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__prologue_saves__+0xc>
 ab4:	5b 01       	movw	r10, r22
 ab6:	4a 01       	movw	r8, r20
 ab8:	79 01       	movw	r14, r18
 aba:	d9 01       	movw	r26, r18
 abc:	13 96       	adiw	r26, 0x03	; 3
 abe:	2c 91       	ld	r18, X
 ac0:	21 ff       	sbrs	r18, 1
 ac2:	1d c0       	rjmp	.+58     	; 0xafe <fwrite+0x56>
 ac4:	c0 e0       	ldi	r28, 0x00	; 0
 ac6:	d0 e0       	ldi	r29, 0x00	; 0
 ac8:	c8 15       	cp	r28, r8
 aca:	d9 05       	cpc	r29, r9
 acc:	d9 f0       	breq	.+54     	; 0xb04 <fwrite+0x5c>
 ace:	8c 01       	movw	r16, r24
 ad0:	6c 01       	movw	r12, r24
 ad2:	ca 0c       	add	r12, r10
 ad4:	db 1c       	adc	r13, r11
 ad6:	c8 01       	movw	r24, r16
 ad8:	0c 15       	cp	r16, r12
 ada:	1d 05       	cpc	r17, r13
 adc:	71 f0       	breq	.+28     	; 0xafa <fwrite+0x52>
 ade:	0f 5f       	subi	r16, 0xFF	; 255
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
 ae2:	d7 01       	movw	r26, r14
 ae4:	18 96       	adiw	r26, 0x08	; 8
 ae6:	ed 91       	ld	r30, X+
 ae8:	fc 91       	ld	r31, X
 aea:	19 97       	sbiw	r26, 0x09	; 9
 aec:	b7 01       	movw	r22, r14
 aee:	dc 01       	movw	r26, r24
 af0:	8c 91       	ld	r24, X
 af2:	09 95       	icall
 af4:	89 2b       	or	r24, r25
 af6:	79 f3       	breq	.-34     	; 0xad6 <fwrite+0x2e>
 af8:	05 c0       	rjmp	.+10     	; 0xb04 <fwrite+0x5c>
 afa:	21 96       	adiw	r28, 0x01	; 1
 afc:	e5 cf       	rjmp	.-54     	; 0xac8 <fwrite+0x20>
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	01 c0       	rjmp	.+2      	; 0xb06 <fwrite+0x5e>
 b04:	ce 01       	movw	r24, r28
 b06:	cd b7       	in	r28, 0x3d	; 61
 b08:	de b7       	in	r29, 0x3e	; 62
 b0a:	ec e0       	ldi	r30, 0x0C	; 12
 b0c:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__epilogue_restores__+0xc>

00000b10 <__prologue_saves__>:
 b10:	2f 92       	push	r2
 b12:	3f 92       	push	r3
 b14:	4f 92       	push	r4
 b16:	5f 92       	push	r5
 b18:	6f 92       	push	r6
 b1a:	7f 92       	push	r7
 b1c:	8f 92       	push	r8
 b1e:	9f 92       	push	r9
 b20:	af 92       	push	r10
 b22:	bf 92       	push	r11
 b24:	cf 92       	push	r12
 b26:	df 92       	push	r13
 b28:	ef 92       	push	r14
 b2a:	ff 92       	push	r15
 b2c:	0f 93       	push	r16
 b2e:	1f 93       	push	r17
 b30:	cf 93       	push	r28
 b32:	df 93       	push	r29
 b34:	cd b7       	in	r28, 0x3d	; 61
 b36:	de b7       	in	r29, 0x3e	; 62
 b38:	ca 1b       	sub	r28, r26
 b3a:	db 0b       	sbc	r29, r27
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	f8 94       	cli
 b40:	de bf       	out	0x3e, r29	; 62
 b42:	0f be       	out	0x3f, r0	; 63
 b44:	cd bf       	out	0x3d, r28	; 61
 b46:	09 94       	ijmp

00000b48 <__epilogue_restores__>:
 b48:	2a 88       	ldd	r2, Y+18	; 0x12
 b4a:	39 88       	ldd	r3, Y+17	; 0x11
 b4c:	48 88       	ldd	r4, Y+16	; 0x10
 b4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b50:	6e 84       	ldd	r6, Y+14	; 0x0e
 b52:	7d 84       	ldd	r7, Y+13	; 0x0d
 b54:	8c 84       	ldd	r8, Y+12	; 0x0c
 b56:	9b 84       	ldd	r9, Y+11	; 0x0b
 b58:	aa 84       	ldd	r10, Y+10	; 0x0a
 b5a:	b9 84       	ldd	r11, Y+9	; 0x09
 b5c:	c8 84       	ldd	r12, Y+8	; 0x08
 b5e:	df 80       	ldd	r13, Y+7	; 0x07
 b60:	ee 80       	ldd	r14, Y+6	; 0x06
 b62:	fd 80       	ldd	r15, Y+5	; 0x05
 b64:	0c 81       	ldd	r16, Y+4	; 0x04
 b66:	1b 81       	ldd	r17, Y+3	; 0x03
 b68:	aa 81       	ldd	r26, Y+2	; 0x02
 b6a:	b9 81       	ldd	r27, Y+1	; 0x01
 b6c:	ce 0f       	add	r28, r30
 b6e:	d1 1d       	adc	r29, r1
 b70:	0f b6       	in	r0, 0x3f	; 63
 b72:	f8 94       	cli
 b74:	de bf       	out	0x3e, r29	; 62
 b76:	0f be       	out	0x3f, r0	; 63
 b78:	cd bf       	out	0x3d, r28	; 61
 b7a:	ed 01       	movw	r28, r26
 b7c:	08 95       	ret

00000b7e <_exit>:
 b7e:	f8 94       	cli

00000b80 <__stop_program>:
 b80:	ff cf       	rjmp	.-2      	; 0xb80 <__stop_program>
