
Lab_assignment3A_isr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000003fa  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800132  00800132  000004c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3c  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d3  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081c  00000000  00000000  0000176f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c5  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00002cd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  9e:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	LcdCommandWrite(0x0E);
}

void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LcdCommandWrite(0x0F);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1f8:	08 95       	ret

000001fa <LCDcursorOFF>:
}

void LCDcursorOFF(void)	//turns OFF cursor
{
	LcdCommandWrite(0x0C);
 1fa:	8c e0       	ldi	r24, 0x0C	; 12
 1fc:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 200:	08 95       	ret

00000202 <init_all>:
	
}

void mydelay(int x)
{
	for(int i = 0; i<x; i++)
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
 20a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 20e:	25 9a       	sbi	0x04, 5	; 4
 210:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
 214:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDcursorOFF>
 218:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
 21c:	08 95       	ret

0000021e <__vector_14>:
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SWTaskTimer>
 230:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SWTaskTimer+0x1>
 234:	18 16       	cp	r1, r24
 236:	19 06       	cpc	r1, r25
 238:	4c f4       	brge	.+18     	; 0x24c <__vector_14+0x2e>
 23a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SWTaskTimer>
 23e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SWTaskTimer+0x1>
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SWTaskTimer+0x1>
 248:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SWTaskTimer>
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <InitTimer0>:
 25a:	84 b5       	in	r24, 0x24	; 36
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	84 bd       	out	0x24, r24	; 36
 260:	89 ef       	ldi	r24, 0xF9	; 249
 262:	87 bd       	out	0x27, r24	; 39
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	85 bd       	out	0x25, r24	; 37
 26e:	08 95       	ret

00000270 <__vector_11>:
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 282:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 286:	18 16       	cp	r1, r24
 288:	19 06       	cpc	r1, r25
 28a:	4c f4       	brge	.+18     	; 0x29e <__vector_11+0x2e>
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 290:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <SWTaskTimer1+0x1>
 29a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <SWTaskTimer1>
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <LED_BLINK>:
}

void LED_BLINK(int x)
{
	
	if(x==2)
 2ac:	02 97       	sbiw	r24, 0x02	; 2
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <LED_BLINK+0xa>
	x = 250;
	else
	x = 62;
 2b0:	2e e3       	ldi	r18, 0x3E	; 62
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <LED_BLINK+0xe>

void LED_BLINK(int x)
{
	
	if(x==2)
	x = 250;
 2b6:	2a ef       	ldi	r18, 0xFA	; 250
 2b8:	30 e0       	ldi	r19, 0x00	; 0
	else
	x = 62;
	PORTB ^= 1<<PORTB5;
 2ba:	95 b1       	in	r25, 0x05	; 5
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	89 27       	eor	r24, r25
 2c0:	85 b9       	out	0x05, r24	; 5
	
	SWTaskTimer = x; 
 2c2:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <SWTaskTimer+0x1>
 2c6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <SWTaskTimer>
 2ca:	08 95       	ret

000002cc <printString>:
	
}

void printString(char* c)
{
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	8c 01       	movw	r16, r24
	LCDclr();
 2da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
 2de:	78 01       	movw	r14, r16
	for(int i = 0; i<strlen(c); i++)
 2e0:	c0 e0       	ldi	r28, 0x00	; 0
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <printString+0x26>
	LcdDataWrite(c[i]);
 2e6:	f7 01       	movw	r30, r14
 2e8:	81 91       	ld	r24, Z+
 2ea:	7f 01       	movw	r14, r30
 2ec:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
}

void printString(char* c)
{
	LCDclr();
	for(int i = 0; i<strlen(c); i++)
 2f0:	21 96       	adiw	r28, 0x01	; 1
 2f2:	f8 01       	movw	r30, r16
 2f4:	01 90       	ld	r0, Z+
 2f6:	00 20       	and	r0, r0
 2f8:	e9 f7       	brne	.-6      	; 0x2f4 <printString+0x28>
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	e0 1b       	sub	r30, r16
 2fe:	f1 0b       	sbc	r31, r17
 300:	ce 17       	cp	r28, r30
 302:	df 07       	cpc	r29, r31
 304:	80 f3       	brcs	.-32     	; 0x2e6 <printString+0x1a>
	LcdDataWrite(c[i]);
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	08 95       	ret

00000314 <task1>:
	TCCR0A = 3; 
}

void task1()
{
	if(mode==2)
 314:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 318:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 31c:	02 97       	sbiw	r24, 0x02	; 2
 31e:	59 f4       	brne	.+22     	; 0x336 <task1+0x22>
	{
		mode = 8;		// Set to 8hz mode.
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
 328:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
		printString("Zheng-field ON");
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 66 01 	call	0x2cc	; 0x2cc <printString>
 334:	08 95       	ret
		
	}
	else
	{
	    mode = 2;	   // Set to 2hz mode.
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
 33e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
		printString("Zheng-field OFF");
 342:	85 e1       	ldi	r24, 0x15	; 21
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 66 01 	call	0x2cc	; 0x2cc <printString>
 34a:	08 95       	ret

0000034c <with_debounce>:



void with_debounce(void)  // De-bounce implementation
{
	switch(PUSHSTATE)
 34c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PUSHSTATE>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	29 f0       	breq	.+10     	; 0x35e <with_debounce+0x12>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	91 f0       	breq	.+36     	; 0x37c <with_debounce+0x30>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	a1 f5       	brne	.+104    	; 0x3c4 <with_debounce+0x78>
 35c:	25 c0       	rjmp	.+74     	; 0x3a8 <with_debounce+0x5c>
	{
		case NOPUSH:
		if(button_pressed)
 35e:	1a 99       	sbic	0x03, 2	; 3
 360:	07 c0       	rjmp	.+14     	; 0x370 <with_debounce+0x24>
		{ 
		LastState = PUSHSTATE;	
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LastState>
		PUSHSTATE = MAYBE;
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PUSHSTATE>
 36e:	08 95       	ret
		}
		else
		{
	    LastState = PUSHSTATE; 
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LastState>
		PUSHSTATE = NOPUSH;
 376:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PUSHSTATE>
 37a:	08 95       	ret
		}
		break;
	   
	    case MAYBE:
		if(button_pressed && LastState == NOPUSH) // Keep the last state to No-Pushed (We will only register a push if its done serially)
 37c:	1a 99       	sbic	0x03, 2	; 3
 37e:	0d c0       	rjmp	.+26     	; 0x39a <with_debounce+0x4e>
 380:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LastState>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	49 f4       	brne	.+18     	; 0x39a <with_debounce+0x4e>
		{
			LastState = PUSHSTATE;
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LastState>
			PUSHSTATE = PUSHED;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PUSHSTATE>
												// You're task goes here //
			task1(); 
 394:	0e 94 8a 01 	call	0x314	; 0x314 <task1>
 398:	08 95       	ret
		}
		else
		{
			LastState = PUSHSTATE;
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LastState>
			PUSHSTATE = NOPUSH;
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PUSHSTATE>
 3a6:	08 95       	ret
		}
		break;
		
		case PUSHED:
		if(button_pressed) {
 3a8:	1a 99       	sbic	0x03, 2	; 3
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <with_debounce+0x6c>
			LastState = PUSHSTATE;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LastState>
			PUSHSTATE = PUSHED;
 3b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PUSHSTATE>
 3b6:	08 95       	ret
		}
		else{
			LastState = PUSHSTATE; 
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LastState>
			PUSHSTATE = MAYBE;
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PUSHSTATE>
 3c4:	08 95       	ret

000003c6 <main>:
}


int main(void)
{
    init_all();
 3c6:	0e 94 01 01 	call	0x202	; 0x202 <init_all>
	InitTimer0();
 3ca:	0e 94 2d 01 	call	0x25a	; 0x25a <InitTimer0>
	sei();
 3ce:	78 94       	sei
	printString("Jay Upadhyay"); 
 3d0:	85 e2       	ldi	r24, 0x25	; 37
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 66 01 	call	0x2cc	; 0x2cc <printString>
    while (1) 
    {
	  with_debounce(); // Check for button press.
 3d8:	0e 94 a6 01 	call	0x34c	; 0x34c <with_debounce>
	  
	   
	  if(SWTaskTimer == 0)
 3dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SWTaskTimer>
 3e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SWTaskTimer+0x1>
 3e4:	89 2b       	or	r24, r25
 3e6:	c1 f7       	brne	.-16     	; 0x3d8 <main+0x12>
	  {	
	    LED_BLINK(mode);
 3e8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 3ec:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 3f0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_BLINK>
 3f4:	f1 cf       	rjmp	.-30     	; 0x3d8 <main+0x12>

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
