
lab_assignment2D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800136  00800136  00000492  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da2  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d9  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b7  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000662  00000000  00000000  00002517  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00002b79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  9e:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	LcdCommandWrite(0x0E);
}

void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LcdCommandWrite(0x0F);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1f8:	08 95       	ret

000001fa <LCDGotoXY>:
 1fa:	61 30       	cpi	r22, 0x01	; 1
 1fc:	09 f4       	brne	.+2      	; 0x200 <LCDGotoXY+0x6>
 1fe:	80 5c       	subi	r24, 0xC0	; 192
 200:	80 68       	ori	r24, 0x80	; 128
 202:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 206:	08 95       	ret

00000208 <LCDcursorOFF>:
}

void LCDcursorOFF(void)	//turns OFF cursor
{
	LcdCommandWrite(0x0C);
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 20e:	08 95       	ret

00000210 <mydelay>:
	
}

void mydelay(int x)
{
	for(int i = 0; i<x; i++)
 210:	18 16       	cp	r1, r24
 212:	19 06       	cpc	r1, r25
 214:	6c f4       	brge	.+26     	; 0x230 <mydelay+0x20>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	ef e9       	ldi	r30, 0x9F	; 159
 21c:	ff e0       	ldi	r31, 0x0F	; 15
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <mydelay+0xe>
 222:	00 c0       	rjmp	.+0      	; 0x224 <mydelay+0x14>
 224:	00 00       	nop
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	28 17       	cp	r18, r24
 22c:	39 07       	cpc	r19, r25
 22e:	a9 f7       	brne	.-22     	; 0x21a <mydelay+0xa>
 230:	08 95       	ret

00000232 <printString>:
	mydelay(x);
	with_debounce();			// Check if the button was pressed right after the delay. 
}

void printString(char* c)
{
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	8c 01       	movw	r16, r24
 240:	7c 01       	movw	r14, r24
	for(int i = 0; i<strlen(c); i++)
 242:	c0 e0       	ldi	r28, 0x00	; 0
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	06 c0       	rjmp	.+12     	; 0x254 <printString+0x22>
	LcdDataWrite(c[i]);
 248:	f7 01       	movw	r30, r14
 24a:	81 91       	ld	r24, Z+
 24c:	7f 01       	movw	r14, r30
 24e:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	with_debounce();			// Check if the button was pressed right after the delay. 
}

void printString(char* c)
{
	for(int i = 0; i<strlen(c); i++)
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	f8 01       	movw	r30, r16
 256:	01 90       	ld	r0, Z+
 258:	00 20       	and	r0, r0
 25a:	e9 f7       	brne	.-6      	; 0x256 <printString+0x24>
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	e0 1b       	sub	r30, r16
 260:	f1 0b       	sbc	r31, r17
 262:	ce 17       	cp	r28, r30
 264:	df 07       	cpc	r29, r31
 266:	80 f3       	brcs	.-32     	; 0x248 <printString+0x16>
	LcdDataWrite(c[i]);
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	08 95       	ret

00000276 <init_all>:
unsigned char PUSHSTATE = NOPUSH;
 int mode; 
 char lcd_buffer[17];
void init_all()
{
	initialize_LCD();
 276:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
	LCDclr();
 27a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
	LCDcursorOFF(); 
 27e:	0e 94 04 01 	call	0x208	; 0x208 <LCDcursorOFF>
	mode = 2;			// Set the mode to 2Hz
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <mode+0x1>
 28a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <mode>
	DDRB |= (1<<DDB5);  // 5th pin is the outputLED.
 28e:	25 9a       	sbi	0x04, 5	; 4
	printString("2 Hertz Mode");
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 19 01 	call	0x232	; 0x232 <printString>
	LCDGotoXY(0,1);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDGotoXY>
	printString("2Hz = 250ms");
 2a0:	8f e0       	ldi	r24, 0x0F	; 15
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 19 01 	call	0x232	; 0x232 <printString>
 2a8:	08 95       	ret

000002aa <task1>:
}

void task1()
{
	if(mode==2)
 2aa:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <mode>
 2ae:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <mode+0x1>
 2b2:	02 97       	sbiw	r24, 0x02	; 2
 2b4:	a9 f4       	brne	.+42     	; 0x2e0 <task1+0x36>
	{
		mode = 8;		// Set to 8hz mode.
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <mode+0x1>
 2be:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <mode>
		LCDclr(); 
 2c2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
		printString("8 Hertz Mode");
 2c6:	8b e1       	ldi	r24, 0x1B	; 27
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 19 01 	call	0x232	; 0x232 <printString>
		LCDGotoXY(0,1);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDGotoXY>
		printString("8hz = 62.5ms");
 2d6:	88 e2       	ldi	r24, 0x28	; 40
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 19 01 	call	0x232	; 0x232 <printString>
 2de:	08 95       	ret
		
	}
	else
	{
	    mode = 2;	   // Set to 2hz mode.
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <mode+0x1>
 2e8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <mode>
		LCDclr();
 2ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
		printString("2 Hertz Mode");
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 19 01 	call	0x232	; 0x232 <printString>
		LCDGotoXY(0,1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCDGotoXY>
		printString("2Hz = 250ms");
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 19 01 	call	0x232	; 0x232 <printString>
 308:	08 95       	ret

0000030a <with_debounce>:



void with_debounce(void)  // De-bounce implementation
{
	switch(PUSHSTATE)
 30a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <PUSHSTATE>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	29 f0       	breq	.+10     	; 0x31c <with_debounce+0x12>
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	91 f0       	breq	.+36     	; 0x33a <with_debounce+0x30>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	a1 f5       	brne	.+104    	; 0x382 <with_debounce+0x78>
 31a:	25 c0       	rjmp	.+74     	; 0x366 <with_debounce+0x5c>
	{
		case NOPUSH:
		if(button_pressed)
 31c:	1a 99       	sbic	0x03, 2	; 3
 31e:	07 c0       	rjmp	.+14     	; 0x32e <with_debounce+0x24>
		{ 
		LastState = PUSHSTATE;	
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LastState>
		PUSHSTATE = MAYBE;
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <PUSHSTATE>
 32c:	08 95       	ret
		}
		else
		{
	    LastState = PUSHSTATE; 
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LastState>
		PUSHSTATE = NOPUSH;
 334:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <PUSHSTATE>
 338:	08 95       	ret
		}
		break;
	   
	    case MAYBE:
		if(button_pressed && LastState == NOPUSH) // Keep the last state to No-Pushed (We will only register a push if its done serially)
 33a:	1a 99       	sbic	0x03, 2	; 3
 33c:	0d c0       	rjmp	.+26     	; 0x358 <with_debounce+0x4e>
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LastState>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	49 f4       	brne	.+18     	; 0x358 <with_debounce+0x4e>
		{
			LastState = PUSHSTATE;
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LastState>
			PUSHSTATE = PUSHED;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <PUSHSTATE>
			task1(); 
 352:	0e 94 55 01 	call	0x2aa	; 0x2aa <task1>
 356:	08 95       	ret
		}
		else
		{
			LastState = PUSHSTATE;
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LastState>
			PUSHSTATE = NOPUSH;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <PUSHSTATE>
 364:	08 95       	ret
		}
		break;
		
		case PUSHED:
		if(button_pressed) {
 366:	1a 99       	sbic	0x03, 2	; 3
 368:	06 c0       	rjmp	.+12     	; 0x376 <with_debounce+0x6c>
			LastState = PUSHSTATE;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LastState>
			PUSHSTATE = PUSHED;
 370:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <PUSHSTATE>
 374:	08 95       	ret
		}
		else{
			LastState = PUSHSTATE; 
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LastState>
			PUSHSTATE = MAYBE;
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <PUSHSTATE>
 382:	08 95       	ret

00000384 <LED_BLINK>:
	for(int i = 0; i<x; i++)
	_delay_ms(1);
}

void LED_BLINK(int x)
{
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
	
	if(x==2)
 388:	02 97       	sbiw	r24, 0x02	; 2
 38a:	19 f0       	breq	.+6      	; 0x392 <LED_BLINK+0xe>
	x = 250;
	else
	x = 62;
 38c:	ce e3       	ldi	r28, 0x3E	; 62
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <LED_BLINK+0x12>

void LED_BLINK(int x)
{
	
	if(x==2)
	x = 250;
 392:	ca ef       	ldi	r28, 0xFA	; 250
 394:	d0 e0       	ldi	r29, 0x00	; 0
	else
	x = 62;
	PORTB ^= 1<<PORTB5;
 396:	25 b1       	in	r18, 0x05	; 5
 398:	90 e2       	ldi	r25, 0x20	; 32
 39a:	92 27       	eor	r25, r18
 39c:	95 b9       	out	0x05, r25	; 5
	with_debounce();			// Check if button was pressed before we delay.
 39e:	0e 94 85 01 	call	0x30a	; 0x30a <with_debounce>
	mydelay(x);
 3a2:	ce 01       	movw	r24, r28
 3a4:	0e 94 08 01 	call	0x210	; 0x210 <mydelay>
	with_debounce();			// Check if the button was pressed right after the delay. 
 3a8:	0e 94 85 01 	call	0x30a	; 0x30a <with_debounce>
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <main>:



int main(void)
{
    init_all();
 3b2:	0e 94 3b 01 	call	0x276	; 0x276 <init_all>
    while (1) 
    {
	  LED_BLINK(mode);  // This will launch the LED-blinking procedure with the given mode selected. 
 3b6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <mode>
 3ba:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <mode+0x1>
 3be:	0e 94 c2 01 	call	0x384	; 0x384 <LED_BLINK>
	}
 3c2:	f9 cf       	rjmp	.-14     	; 0x3b6 <main+0x4>

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
