
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000038e  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  00000426  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf7  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000368  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078d  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036e  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067d  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000028af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  9e:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	_delay_ms(2);  // allow long enough delay 

}
 
void DisableJTAG(void)
{
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
}
 
void initialize_LCD(void)
{
	//DisableJTAG();
	LDCPortConfig();
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
	
	
	// initialize LCD
	LcdCommandWrite_UpperNibble(0x30);   // function set: 8-bit interface
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
	_delay_ms(4.1);
	LcdCommandWrite_UpperNibble(0x30);
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
	_delay_us(100);
	LcdCommandWrite_UpperNibble(0x30);
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	//_delay_ms(4.1);
	LcdCommandWrite_UpperNibble(0x20);
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
	
	//LcdCommandWrite(0x38);   // function set: 0x38 means,  8-bit interface, 2 lines, 5x8 font
	LcdCommandWrite(0x28);   // function set: 0x28 means,  4-bit interface, 2 lines, 5x8 font
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	LcdCommandWrite(0x08);   // display control: turn display off, cursor off, no blinking
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	LcdCommandWrite(0x01);   // clear display, set address counter  to zero
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	LcdCommandWrite(0x06);   // entry mode set:
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	
	//   cursor increments automatically, no display shift
	LcdCommandWrite(0x0f);   // display on, cursor on, cursor blinking
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDclr>:
	
}

void LCDclr(void) //Clears LCD
{
	LcdCommandWrite(0x01);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1f8:	08 95       	ret

000001fa <with_debounce>:
	{
		if(strlen(c) == i) break;
		LcdDataWrite(c[i]);
	}
	
}
 1fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PUSHSTATE>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	29 f0       	breq	.+10     	; 0x20c <with_debounce+0x12>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	61 f0       	breq	.+24     	; 0x21e <with_debounce+0x24>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	81 f5       	brne	.+96     	; 0x26a <with_debounce+0x70>
 20a:	27 c0       	rjmp	.+78     	; 0x25a <with_debounce+0x60>
 20c:	1a 99       	sbic	0x03, 2	; 3
 20e:	03 c0       	rjmp	.+6      	; 0x216 <with_debounce+0x1c>
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PUSHSTATE>
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LastState>
 21c:	08 95       	ret
 21e:	1a 99       	sbic	0x03, 2	; 3
 220:	11 c0       	rjmp	.+34     	; 0x244 <with_debounce+0x4a>
 222:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <LastState>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	69 f4       	brne	.+26     	; 0x244 <with_debounce+0x4a>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PUSHSTATE>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <flag+0x1>
 238:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flag>
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LastState>
 242:	08 95       	ret
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PUSHSTATE>
 24a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <flag+0x1>
 24e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <flag>
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LastState>
 258:	08 95       	ret
 25a:	1a 9b       	sbis	0x03, 2	; 3
 25c:	03 c0       	rjmp	.+6      	; 0x264 <with_debounce+0x6a>
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PUSHSTATE>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LastState>
 26a:	08 95       	ret

0000026c <printTime>:

void printTime(char c, int j) // Prints a character j times. Clears screen everytime and prints given amount of characters. 
{
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	f8 2e       	mov	r15, r24
 278:	8b 01       	movw	r16, r22
	LCDclr();  // Clears the screen first. Then gets ready to print.
 27a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
	          // Skip the first char. 
	for(int i = 0; i<j; i++)
 27e:	10 16       	cp	r1, r16
 280:	11 06       	cpc	r1, r17
 282:	4c f4       	brge	.+18     	; 0x296 <printTime+0x2a>
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
	LcdDataWrite(c);
 288:	8f 2d       	mov	r24, r15
 28a:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>

void printTime(char c, int j) // Prints a character j times. Clears screen everytime and prints given amount of characters. 
{
	LCDclr();  // Clears the screen first. Then gets ready to print.
	          // Skip the first char. 
	for(int i = 0; i<j; i++)
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	c0 17       	cp	r28, r16
 292:	d1 07       	cpc	r29, r17
 294:	c9 f7       	brne	.-14     	; 0x288 <printTime+0x1c>
	LcdDataWrite(c);
	
	
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	08 95       	ret

000002a2 <main>:
int temp = -1; // Will go from right to left.
int toggle = 0; // This will decide which mode (L->R) or (L<-R) 

int main(void)
{
	initialize_LCD(); // Initialize the LCD.
 2a2:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
		  if(temp == 0) // Reset everything.
		  {
			LCDclr();  
			toggle = 0; 
			count = 0;
			temp = -1; 
 2a6:	ee 24       	eor	r14, r14
 2a8:	ea 94       	dec	r14
 2aa:	fe 2c       	mov	r15, r14
	  {	  
		  LcdDataWrite('*');   // Write a star onto the LCD.
		  count++;
		  if(count==16)
		  {
			  temp = 16;      // We will decrement downwards by saving the count value into temp. 
 2ac:	00 e1       	ldi	r16, 0x10	; 16
 2ae:	10 e0       	ldi	r17, 0x00	; 0
			  toggle = 1;     // Since were at the end, we can toggle the decrementation. 
 2b0:	c1 e0       	ldi	r28, 0x01	; 1
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
	initialize_LCD(); // Initialize the LCD.
	 

    while (1) 
    {
	  with_debounce();  // Check if we pressed a button or not
 2b4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <with_debounce>
 2b8:	8f e3       	ldi	r24, 0x3F	; 63
 2ba:	9c e9       	ldi	r25, 0x9C	; 156
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x1a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x20>
 2c2:	00 00       	nop
	  _delay_ms(10); 	// Small delay to stop debouncing. 
		
	  if(PUSHSTATE==PUSHED && LastState==NOPUSH && count<17)
 2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PUSHSTATE>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	a1 f7       	brne	.-24     	; 0x2b4 <main+0x12>
 2cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <LastState>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x34>
 2d4:	53 c0       	rjmp	.+166    	; 0x37c <main+0xda>
 2d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 2da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 2de:	41 97       	sbiw	r24, 0x11	; 17
 2e0:	0c f0       	brlt	.+2      	; 0x2e4 <main+0x42>
 2e2:	4c c0       	rjmp	.+152    	; 0x37c <main+0xda>
	  {	  
		  LcdDataWrite('*');   // Write a star onto the LCD.
 2e4:	8a e2       	ldi	r24, 0x2A	; 42
 2e6:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
		  count++;
 2ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 2ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count+0x1>
 2f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count>
		  if(count==16)
 2fc:	40 97       	sbiw	r24, 0x10	; 16
 2fe:	41 f4       	brne	.+16     	; 0x310 <main+0x6e>
		  {
			  temp = 16;      // We will decrement downwards by saving the count value into temp. 
 300:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
 304:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
			  toggle = 1;     // Since were at the end, we can toggle the decrementation. 
 308:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <__data_end+0x1>
 30c:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <__data_end>
		  }
	  }
	  
	  if(temp>=0 && PUSHSTATE==PUSHED && toggle == 1 && LastState == NOPUSH) // Run only if the button is pressed, we reached the end of LCD. 
 310:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 314:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 318:	77 23       	and	r23, r23
 31a:	64 f2       	brlt	.-104    	; 0x2b4 <main+0x12>
 31c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PUSHSTATE>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	41 f6       	brne	.-112    	; 0x2b4 <main+0x12>
 324:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 328:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	11 f6       	brne	.-124    	; 0x2b4 <main+0x12>
 330:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <LastState>
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	09 f0       	breq	.+2      	; 0x33a <main+0x98>
 338:	bd cf       	rjmp	.-134    	; 0x2b4 <main+0x12>
	  {
		  printTime('*',temp);
 33a:	8a e2       	ldi	r24, 0x2A	; 42
 33c:	0e 94 36 01 	call	0x26c	; 0x26c <printTime>
		  
		  if(temp == 0) // Reset everything.
 340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 344:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 348:	89 2b       	or	r24, r25
 34a:	71 f4       	brne	.+28     	; 0x368 <main+0xc6>
		  {
			LCDclr();  
 34c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDclr>
			toggle = 0; 
 350:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 354:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			count = 0;
 358:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count+0x1>
 35c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count>
			temp = -1; 
 360:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__data_start+0x1>
 364:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__data_start>
		  }
		  temp--;
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 36c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 376:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 37a:	9c cf       	rjmp	.-200    	; 0x2b4 <main+0x12>
			  temp = 16;      // We will decrement downwards by saving the count value into temp. 
			  toggle = 1;     // Since were at the end, we can toggle the decrementation. 
		  }
	  }
	  
	  if(temp>=0 && PUSHSTATE==PUSHED && toggle == 1 && LastState == NOPUSH) // Run only if the button is pressed, we reached the end of LCD. 
 37c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 380:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 384:	77 23       	and	r23, r23
 386:	74 f6       	brge	.-100    	; 0x324 <main+0x82>
 388:	95 cf       	rjmp	.-214    	; 0x2b4 <main+0x12>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
