
PracticeLabTest3A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000044c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800150  00800150  00000530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d36  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003cb  00000000  00000000  000013f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000764  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000609  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00002b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3b       	cpi	r26, 0xBB	; 187
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
  9e:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDCPortConfig>:
	LcdCommandWrite(0x0E);
}

void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LcdCommandWrite(0x0F);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	08 95       	ret

000000b4 <LcdCommandWrite_UpperNibble>:
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	44 98       	cbi	0x08, 4	; 8
  c2:	45 9a       	sbi	0x08, 5	; 8
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LcdCommandWrite_UpperNibble+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LcdCommandWrite_UpperNibble+0x1a>
  ce:	00 00       	nop
  d0:	45 98       	cbi	0x08, 5	; 8
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LcdCommandWrite_UpperNibble+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LcdCommandWrite_UpperNibble+0x28>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommandWrite>:
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	28 2f       	mov	r18, r24
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 b9       	out	0x08, r25	; 8
  ee:	44 98       	cbi	0x08, 4	; 8
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LcdCommandWrite+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LcdCommandWrite+0x1c>
  fc:	00 00       	nop
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	ff e1       	ldi	r31, 0x1F	; 31
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite+0x2a>
 10a:	00 00       	nop
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	89 2b       	or	r24, r25
 114:	88 b9       	out	0x08, r24	; 8
 116:	44 98       	cbi	0x08, 4	; 8
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LcdCommandWrite+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LcdCommandWrite+0x44>
 124:	00 00       	nop
 126:	45 98       	cbi	0x08, 5	; 8
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LcdCommandWrite+0x4c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LcdCommandWrite+0x52>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LcdDataWrite>:
 136:	98 b1       	in	r25, 0x08	; 8
 138:	28 2f       	mov	r18, r24
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	92 2b       	or	r25, r18
 142:	98 b9       	out	0x08, r25	; 8
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	45 9a       	sbi	0x08, 5	; 8
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdDataWrite+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdDataWrite+0x1c>
 152:	00 00       	nop
 154:	45 98       	cbi	0x08, 5	; 8
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdDataWrite+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdDataWrite+0x2a>
 160:	00 00       	nop
 162:	98 b1       	in	r25, 0x08	; 8
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	44 9a       	sbi	0x08, 4	; 8
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LcdDataWrite+0x3e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LcdDataWrite+0x44>
 17a:	00 00       	nop
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	ff e1       	ldi	r31, 0x1F	; 31
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LcdDataWrite+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LcdDataWrite+0x52>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <initialize_LCD>:
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDCPortConfig>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <initialize_LCD+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <initialize_LCD+0x14>
 1a0:	00 00       	nop
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <initialize_LCD+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <initialize_LCD+0x26>
 1b2:	00 00       	nop
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LcdCommandWrite_UpperNibble>
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <initialize_LCD+0x58>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x62>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCDGotoXY>:
 1f2:	61 30       	cpi	r22, 0x01	; 1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <LCDGotoXY+0x6>
 1f6:	80 5c       	subi	r24, 0xC0	; 192
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 1fe:	08 95       	ret

00000200 <LCDcursorOFF>:
}

void LCDcursorOFF(void)	//turns OFF cursor
{
	LcdCommandWrite(0x0C);
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
 206:	08 95       	ret

00000208 <enqueue>:
}

int isEmpty()
{
	return size==0;
}
 208:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <index>
 20c:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <index+0x1>
 210:	f9 01       	movw	r30, r18
 212:	e9 5a       	subi	r30, 0xA9	; 169
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <front>
 21a:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <front+0x1>
 21e:	e4 0f       	add	r30, r20
 220:	f5 1f       	adc	r31, r21
 222:	80 83       	st	Z, r24
 224:	2f 5f       	subi	r18, 0xFF	; 255
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <index+0x1>
 22c:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <index>
 230:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <size>
 234:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <size+0x1>
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <size+0x1>
 23e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <size>
 242:	08 95       	ret

00000244 <dequeue>:
 244:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <front>
 248:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <front+0x1>
 24c:	9c 01       	movw	r18, r24
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <front+0x1>
 256:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <front>
 25a:	fc 01       	movw	r30, r24
 25c:	e9 5a       	subi	r30, 0xA9	; 169
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	80 81       	ld	r24, Z
 262:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <index>
 266:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <index+0x1>
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	31 09       	sbc	r19, r1
 26e:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <index+0x1>
 272:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <index>
 276:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <size>
 27a:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <size+0x1>
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	31 09       	sbc	r19, r1
 282:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <size+0x1>
 286:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <size>
 28a:	08 95       	ret

0000028c <__vector_14>:
	
}


ISR(TIMER0_COMPA_vect)					// Since ISR's are automatically called, keep calling our state machine every 1ms.
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
	if(SWTaskTimer1>0)					// This decrements every 1ms.
 29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 29e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 2a2:	18 16       	cp	r1, r24
 2a4:	19 06       	cpc	r1, r25
 2a6:	4c f4       	brge	.+18     	; 0x2ba <__vector_14+0x2e>
	SWTaskTimer1--;	
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 2ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <SWTaskTimer1+0x1>
 2b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <SWTaskTimer1>
}
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <InitTimer0>:

void InitTimer0(void)                   // Timer for 1ms decays. 
{
	OCR0A = 249;
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
 2cc:	ee e6       	ldi	r30, 0x6E	; 110
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);
 2d6:	84 b5       	in	r24, 0x24	; 36
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01) | (1<<CS00);
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	85 bd       	out	0x25, r24	; 37
 2e0:	08 95       	ret

000002e2 <init_all>:
	return size==0;
}

void init_all(void)
{
	DDRB |= (1<<DDB5);  // 5th pin is the outputLED.
 2e2:	25 9a       	sbi	0x04, 5	; 4
	initialize_LCD();
 2e4:	0e 94 c6 00 	call	0x18c	; 0x18c <initialize_LCD>
	LCDcursorOFF();
 2e8:	0e 94 00 01 	call	0x200	; 0x200 <LCDcursorOFF>
	InitTimer0();		// Timer will be incremented every 1ms.
 2ec:	0e 94 64 01 	call	0x2c8	; 0x2c8 <InitTimer0>
 2f0:	08 95       	ret

000002f2 <PrintString>:
	TCCR0A |= (1<<WGM01);
	TCCR0B = (1<<CS01) | (1<<CS00);
}

void PrintString(char* c)
{
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	8c 01       	movw	r16, r24
 300:	7c 01       	movw	r14, r24
	for(int i = 0; i<strlen(c); i++)
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	06 c0       	rjmp	.+12     	; 0x314 <PrintString+0x22>
	LcdDataWrite(c[i]);
 308:	f7 01       	movw	r30, r14
 30a:	81 91       	ld	r24, Z+
 30c:	7f 01       	movw	r14, r30
 30e:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
	TCCR0B = (1<<CS01) | (1<<CS00);
}

void PrintString(char* c)
{
	for(int i = 0; i<strlen(c); i++)
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	f8 01       	movw	r30, r16
 316:	01 90       	ld	r0, Z+
 318:	00 20       	and	r0, r0
 31a:	e9 f7       	brne	.-6      	; 0x316 <PrintString+0x24>
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	e0 1b       	sub	r30, r16
 320:	f1 0b       	sbc	r31, r17
 322:	ce 17       	cp	r28, r30
 324:	df 07       	cpc	r29, r31
 326:	80 f3       	brcs	.-32     	; 0x308 <PrintString+0x16>
	LcdDataWrite(c[i]);
	
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <PracticeLabTestStateMachinePartA>:
	InitTimer0();		// Timer will be incremented every 1ms.
}

void PracticeLabTestStateMachinePartA(void)
{
	switch(current_state)
 336:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current_state>
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	e1 f0       	breq	.+56     	; 0x376 <PracticeLabTestStateMachinePartA+0x40>
 33e:	28 f4       	brcc	.+10     	; 0x34a <PracticeLabTestStateMachinePartA+0x14>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	49 f0       	breq	.+18     	; 0x356 <PracticeLabTestStateMachinePartA+0x20>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	79 f0       	breq	.+30     	; 0x366 <PracticeLabTestStateMachinePartA+0x30>
 348:	08 95       	ret
 34a:	85 30       	cpi	r24, 0x05	; 5
 34c:	21 f1       	breq	.+72     	; 0x396 <PracticeLabTestStateMachinePartA+0x60>
 34e:	d8 f0       	brcs	.+54     	; 0x386 <PracticeLabTestStateMachinePartA+0x50>
 350:	86 30       	cpi	r24, 0x06	; 6
 352:	49 f1       	breq	.+82     	; 0x3a6 <PracticeLabTestStateMachinePartA+0x70>
 354:	08 95       	ret
	{
		case INTEL:
		PrintString("I am Intel");
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PrintString>
		current_state = IBM;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_state>
		break;
 364:	08 95       	ret
		
		case IBM:
		PrintString("I am IBM.");
 366:	8e e0       	ldi	r24, 0x0E	; 14
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PrintString>
		current_state = NVIDIA;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_state>
		break;
 374:	08 95       	ret
		
		case NVIDIA:
		PrintString("I am Nvidia. ");
 376:	88 e1       	ldi	r24, 0x18	; 24
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PrintString>
		current_state = GOOGLE;
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_state>
		break;
 384:	08 95       	ret
		
		case GOOGLE:
		PrintString("I am Google.");
 386:	86 e2       	ldi	r24, 0x26	; 38
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PrintString>
		current_state = MICROSOFT;
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_state>
		break; 
 394:	08 95       	ret
	
		case MICROSOFT:
		PrintString("I am Microsoft");
 396:	83 e3       	ldi	r24, 0x33	; 51
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PrintString>
		current_state = next;
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_state>
		break;
 3a4:	08 95       	ret
		case next:
		PrintString("I am a nobody");
 3a6:	82 e4       	ldi	r24, 0x42	; 66
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PrintString>
		current_state = INTEL;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_state>
 3b4:	08 95       	ret

000003b6 <main>:

uint8_t count = 0;
int flag = 0;
int main(void)
{
	init_all();
 3b6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <init_all>
	sei();
 3ba:	78 94       	sei
	DDRB = 1<<DDB5;
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	84 b9       	out	0x04, r24	; 4
			}
			else
			{
			LcdCommandWrite(0x01);		
			PracticeLabTestStateMachinePartA(); 
			SWTaskTimer1 = initTime;
 3c0:	c8 ee       	ldi	r28, 0xE8	; 232
 3c2:	d3 e0       	ldi	r29, 0x03	; 3
		{	
			
			enqueue(count++);
			if(count==10)
			{
				SWTaskTimer1 = 5000;   // Wait for 5 seconds :)
 3c4:	08 e8       	ldi	r16, 0x88	; 136
 3c6:	13 e1       	ldi	r17, 0x13	; 19
	sei();
	DDRB = 1<<DDB5;
	while (1)
	{
		
		if(SWTaskTimer1<=0) // Data-write will occur every second.
 3c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 3cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 3d0:	18 16       	cp	r1, r24
 3d2:	19 06       	cpc	r1, r25
 3d4:	cc f3       	brlt	.-14     	; 0x3c8 <main+0x12>
		{	
			
			enqueue(count++);
 3d6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	98 0f       	add	r25, r24
 3de:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <__data_end>
 3e2:	0e 94 04 01 	call	0x208	; 0x208 <enqueue>
			if(count==10)
 3e6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	19 f5       	brne	.+70     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
			{
				SWTaskTimer1 = 5000;   // Wait for 5 seconds :)
 3ee:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <SWTaskTimer1+0x1>
 3f2:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <SWTaskTimer1>
				LCDGotoXY(0,1);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDGotoXY>
				while(!isEmpty())
 3fe:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <size>
 402:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <size+0x1>
 406:	89 2b       	or	r24, r25
 408:	59 f0       	breq	.+22     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
				LcdDataWrite(dequeue()+'0');
 40a:	0e 94 22 01 	call	0x244	; 0x244 <dequeue>
 40e:	80 5d       	subi	r24, 0xD0	; 208
 410:	0e 94 9b 00 	call	0x136	; 0x136 <LcdDataWrite>
			enqueue(count++);
			if(count==10)
			{
				SWTaskTimer1 = 5000;   // Wait for 5 seconds :)
				LCDGotoXY(0,1);
				while(!isEmpty())
 414:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <size>
 418:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <size+0x1>
 41c:	89 2b       	or	r24, r25
 41e:	a9 f7       	brne	.-22     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
				LcdDataWrite(dequeue()+'0');
				while(SWTaskTimer1 > 0);
 420:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SWTaskTimer1>
 424:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <SWTaskTimer1+0x1>
 428:	18 16       	cp	r1, r24
 42a:	19 06       	cpc	r1, r25
 42c:	cc f3       	brlt	.-14     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
				
				count = 0; 
 42e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
 432:	ca cf       	rjmp	.-108    	; 0x3c8 <main+0x12>
			}
			else
			{
			LcdCommandWrite(0x01);		
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommandWrite>
			PracticeLabTestStateMachinePartA(); 
 43a:	0e 94 9b 01 	call	0x336	; 0x336 <PracticeLabTestStateMachinePartA>
			SWTaskTimer1 = initTime;
 43e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <SWTaskTimer1+0x1>
 442:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <SWTaskTimer1>
 446:	c0 cf       	rjmp	.-128    	; 0x3c8 <main+0x12>

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
