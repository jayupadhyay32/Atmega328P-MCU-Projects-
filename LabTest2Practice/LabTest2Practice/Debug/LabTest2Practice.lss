
LabTest2Practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  00000c54  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  008001e2  008001e2  00000dca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f6  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a3  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  00001b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000289  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000496  00000000  00000000  00002345  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000027db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	63 64       	ori	r22, 0x43	; 67
  6a:	69 6e       	ori	r22, 0xE9	; 233
  6c:	6f 70       	andi	r22, 0x0F	; 15
  6e:	73 75       	andi	r23, 0x53	; 83
  70:	78 58       	subi	r23, 0x88	; 136
  72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e4 e5       	ldi	r30, 0x54	; 84
  88:	fc e0       	ldi	r31, 0x0C	; 12
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 3e       	cpi	r26, 0xE2	; 226
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	22 e0       	ldi	r18, 0x02	; 2
  98:	a2 ee       	ldi	r26, 0xE2	; 226
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a2 35       	cpi	r26, 0x52	; 82
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 28 06 	jmp	0xc50	; 0xc50 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
int toggle = 0;
int error = 0;  

int main(void)
{
	DDRB = 1<<DDB5;       // Turn on the light for the bank B.
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	84 b9       	out	0x04, r24	; 4
	uart_init();
  b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <uart_init>
	stdout = stdin = stderr = &uart_str;   
  ba:	cc e4       	ldi	r28, 0x4C	; 76
  bc:	d2 e0       	ldi	r29, 0x02	; 2
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	9d 83       	std	Y+5, r25	; 0x05
  c4:	8c 83       	std	Y+4, r24	; 0x04
  c6:	99 83       	std	Y+1, r25	; 0x01
  c8:	88 83       	st	Y, r24
  ca:	9b 83       	std	Y+3, r25	; 0x03
  cc:	8a 83       	std	Y+2, r24	; 0x02
	fprintf(stdout,"Please create a four digit PIN: \n");   // System turns on, asks the user for a 4 digit PIN. 
  ce:	9c 01       	movw	r18, r24
  d0:	41 e2       	ldi	r20, 0x21	; 33
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	8e e0       	ldi	r24, 0x0E	; 14
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
	fscanf(stdin,"%s",arr);                            // System initialized and PIN is stored in the array.
  e0:	88 e3       	ldi	r24, 0x38	; 56
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	9f 93       	push	r25
  e6:	8f 93       	push	r24
  e8:	80 e3       	ldi	r24, 0x30	; 48
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	9f 93       	push	r25
  ee:	8f 93       	push	r24
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	8f 93       	push	r24
  f4:	88 81       	ld	r24, Y
  f6:	8f 93       	push	r24
  f8:	0e 94 8f 02 	call	0x51e	; 0x51e <fscanf>
	fprintf(stdout, "You're pin has been stored. \n"); 
  fc:	2a 81       	ldd	r18, Y+2	; 0x02
  fe:	3b 81       	ldd	r19, Y+3	; 0x03
 100:	4d e1       	ldi	r20, 0x1D	; 29
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	83 e3       	ldi	r24, 0x33	; 51
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
		 
		
		
		if(toggle == 1)
		{
			PORTB = 1<<PORTB5;
 11c:	68 94       	set
 11e:	55 24       	eor	r5, r5
 120:	55 f8       	bld	r5, 5
		}
		
		if(SWITCH1_PUSHED && toggle==0)					// If the user is not logged in (toggle == 0) and the switch is pushed.
		{
		  fprintf(stdout,"Enter password: ");
		  fscanf(stdin,"%s",reciever);
 122:	02 e4       	ldi	r16, 0x42	; 66
 124:	12 e0       	ldi	r17, 0x02	; 2
 126:	0f 2e       	mov	r0, r31
 128:	f0 e3       	ldi	r31, 0x30	; 48
 12a:	cf 2e       	mov	r12, r31
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	df 2e       	mov	r13, r31
 130:	f0 2d       	mov	r31, r0
		  
		  for(int i = 0; i<4; i++)
		  {
			  if(reciever[i] != arr[i])
 132:	0f 2e       	mov	r0, r31
 134:	f8 e3       	ldi	r31, 0x38	; 56
 136:	af 2e       	mov	r10, r31
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	bf 2e       	mov	r11, r31
 13c:	f0 2d       	mov	r31, r0
 13e:	0f 2e       	mov	r0, r31
 140:	f3 e4       	ldi	r31, 0x43	; 67
 142:	8f 2e       	mov	r8, r31
 144:	f2 e0       	ldi	r31, 0x02	; 2
 146:	9f 2e       	mov	r9, r31
 148:	f0 2d       	mov	r31, r0
 14a:	0f 2e       	mov	r0, r31
 14c:	f9 e3       	ldi	r31, 0x39	; 57
 14e:	6f 2e       	mov	r6, r31
 150:	f2 e0       	ldi	r31, 0x02	; 2
 152:	7f 2e       	mov	r7, r31
 154:	f0 2d       	mov	r31, r0
 156:	0f 2e       	mov	r0, r31
 158:	f6 e4       	ldi	r31, 0x46	; 70
 15a:	ef 2e       	mov	r14, r31
 15c:	f2 e0       	ldi	r31, 0x02	; 2
 15e:	ff 2e       	mov	r15, r31
 160:	f0 2d       	mov	r31, r0
	fprintf(stdout,"Please create a four digit PIN: \n");   // System turns on, asks the user for a 4 digit PIN. 
	fscanf(stdin,"%s",arr);                            // System initialized and PIN is stored in the array.
	fprintf(stdout, "You're pin has been stored. \n"); 
    while (1) 
    {
		if(SWITCH2_PUSHED && toggle==1){   // If the second switch is pressed, logout.
 162:	1a 99       	sbic	0x03, 2	; 3
 164:	14 c0       	rjmp	.+40     	; 0x18e <main+0xdc>
 166:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <toggle>
 16a:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <toggle+0x1>
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	71 f4       	brne	.+28     	; 0x18e <main+0xdc>
			toggle = 0;		     // User logs out of the system.
 172:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <toggle+0x1>
 176:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <toggle>
			fprintf(stdout,"You have logged off. \n");
 17a:	2a 81       	ldd	r18, Y+2	; 0x02
 17c:	3b 81       	ldd	r19, Y+3	; 0x03
 17e:	46 e1       	ldi	r20, 0x16	; 22
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	81 e5       	ldi	r24, 0x51	; 81
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
		}
		
		if(SWITCH1_PUSHED && toggle==0)					// If the user is not logged in (toggle == 0) and the switch is pushed.
 18e:	1f 99       	sbic	0x03, 7	; 3
 190:	59 c0       	rjmp	.+178    	; 0x244 <main+0x192>
 192:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <toggle>
 196:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <toggle+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	09 f0       	breq	.+2      	; 0x1a0 <main+0xee>
 19e:	52 c0       	rjmp	.+164    	; 0x244 <main+0x192>
		{
		  fprintf(stdout,"Enter password: ");
 1a0:	2a 81       	ldd	r18, Y+2	; 0x02
 1a2:	3b 81       	ldd	r19, Y+3	; 0x03
 1a4:	40 e1       	ldi	r20, 0x10	; 16
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	88 e6       	ldi	r24, 0x68	; 104
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
		  fscanf(stdin,"%s",reciever);
 1b4:	1f 93       	push	r17
 1b6:	0f 93       	push	r16
 1b8:	df 92       	push	r13
 1ba:	cf 92       	push	r12
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	8f 93       	push	r24
 1c0:	88 81       	ld	r24, Y
 1c2:	8f 93       	push	r24
 1c4:	0e 94 8f 02 	call	0x51e	; 0x51e <fscanf>
		  
		  for(int i = 0; i<4; i++)
		  {
			  if(reciever[i] != arr[i])
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	f8 01       	movw	r30, r16
 1d6:	90 81       	ld	r25, Z
 1d8:	f5 01       	movw	r30, r10
 1da:	80 81       	ld	r24, Z
 1dc:	98 13       	cpse	r25, r24
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <main+0x13a>
 1e0:	f4 01       	movw	r30, r8
 1e2:	d3 01       	movw	r26, r6
 1e4:	91 91       	ld	r25, Z+
 1e6:	8d 91       	ld	r24, X+
 1e8:	98 17       	cp	r25, r24
 1ea:	39 f0       	breq	.+14     	; 0x1fa <main+0x148>
			  {
				  error = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <__data_end+0x1>
 1f4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end>
 1f8:	1a c0       	rjmp	.+52     	; 0x22e <main+0x17c>
		if(SWITCH1_PUSHED && toggle==0)					// If the user is not logged in (toggle == 0) and the switch is pushed.
		{
		  fprintf(stdout,"Enter password: ");
		  fscanf(stdin,"%s",reciever);
		  
		  for(int i = 0; i<4; i++)
 1fa:	ee 15       	cp	r30, r14
 1fc:	ff 05       	cpc	r31, r15
 1fe:	91 f7       	brne	.-28     	; 0x1e4 <main+0x132>
				  error = 1;
				  break;
			  }
		  }
		  
		  if(error==0)
 200:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
 204:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
 208:	89 2b       	or	r24, r25
 20a:	89 f4       	brne	.+34     	; 0x22e <main+0x17c>
		  {
			  toggle = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <toggle+0x1>
 214:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <toggle>
			  fprintf(stdout, "You have logged in to the system. \n");
 218:	2a 81       	ldd	r18, Y+2	; 0x02
 21a:	3b 81       	ldd	r19, Y+3	; 0x03
 21c:	43 e2       	ldi	r20, 0x23	; 35
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	89 e7       	ldi	r24, 0x79	; 121
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
 22c:	1d c0       	rjmp	.+58     	; 0x268 <main+0x1b6>
		  }
		  else
		    fprintf(stdout, "Incorrect password. Get lost. \n");
 22e:	2a 81       	ldd	r18, Y+2	; 0x02
 230:	3b 81       	ldd	r19, Y+3	; 0x03
 232:	4f e1       	ldi	r20, 0x1F	; 31
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	8d e9       	ldi	r24, 0x9D	; 157
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
 242:	12 c0       	rjmp	.+36     	; 0x268 <main+0x1b6>
		}
		else if(SWITCH1_PUSHED && toggle==1)
 244:	1f 99       	sbic	0x03, 7	; 3
 246:	10 c0       	rjmp	.+32     	; 0x268 <main+0x1b6>
 248:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <toggle>
 24c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <toggle+0x1>
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	21 f5       	brne	.+72     	; 0x29c <main+0x1ea>
		 fprintf(stdout, "You are already logged on! \n");
 254:	2a 81       	ldd	r18, Y+2	; 0x02
 256:	3b 81       	ldd	r19, Y+3	; 0x03
 258:	4c e1       	ldi	r20, 0x1C	; 28
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	8d eb       	ldi	r24, 0xBD	; 189
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
		 
		
		
		if(toggle == 1)
 268:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <toggle>
 26c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <toggle+0x1>
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	a1 f4       	brne	.+40     	; 0x29c <main+0x1ea>
		{
			PORTB = 1<<PORTB5;
 274:	55 b8       	out	0x05, r5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	ff ef       	ldi	r31, 0xFF	; 255
 278:	23 ec       	ldi	r18, 0xC3	; 195
 27a:	89 e0       	ldi	r24, 0x09	; 9
 27c:	f1 50       	subi	r31, 0x01	; 1
 27e:	20 40       	sbci	r18, 0x00	; 0
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x1ca>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x1d4>
 286:	00 00       	nop
			_delay_ms(200);
			PORTB = 0;
 288:	15 b8       	out	0x05, r1	; 5
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	e3 ec       	ldi	r30, 0xC3	; 195
 28e:	f9 e0       	ldi	r31, 0x09	; 9
 290:	91 50       	subi	r25, 0x01	; 1
 292:	e0 40       	sbci	r30, 0x00	; 0
 294:	f0 40       	sbci	r31, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x1de>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x1e8>
 29a:	00 00       	nop
			_delay_ms(200);
		} 
			
		error = 0; // Reset error.
 29c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
 2a0:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
			
    }
 2a4:	5e cf       	rjmp	.-324    	; 0x162 <main+0xb0>

000002a6 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 2a6:	87 e6       	ldi	r24, 0x67	; 103
 2a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 2ac:	88 e1       	ldi	r24, 0x18	; 24
 2ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2b2:	08 95       	ret

000002b4 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24

  if (c == '\a')
 2b8:	87 30       	cpi	r24, 0x07	; 7
 2ba:	69 f4       	brne	.+26     	; 0x2d6 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 2bc:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <__iob+0x4>
 2c0:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <__iob+0x5>
 2c4:	47 e0       	ldi	r20, 0x07	; 7
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	8a ed       	ldi	r24, 0xDA	; 218
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 a1 02 	call	0x542	; 0x542 <fwrite>
      return 0;
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <uart_putchar+0x3a>
    }

  if (c == '\n')
 2d6:	8a 30       	cpi	r24, 0x0A	; 10
 2d8:	19 f4       	brne	.+6      	; 0x2e0 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 2da:	8d e0       	ldi	r24, 0x0D	; 13
 2dc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 2e0:	e0 ec       	ldi	r30, 0xC0	; 192
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	90 81       	ld	r25, Z
 2e6:	95 ff       	sbrs	r25, 5
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <uart_putchar+0x30>
  UDR0 = c;
 2ea:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 2f6:	6f 92       	push	r6
 2f8:	7f 92       	push	r7
 2fa:	8f 92       	push	r8
 2fc:	9f 92       	push	r9
 2fe:	af 92       	push	r10
 300:	bf 92       	push	r11
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 312:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <rxp.1708>
 316:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <rxp.1708+0x1>
 31a:	23 2b       	or	r18, r19
 31c:	09 f0       	breq	.+2      	; 0x320 <uart_getchar+0x2a>
 31e:	d5 c0       	rjmp	.+426    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
 320:	8c 01       	movw	r16, r24
 322:	0f 2e       	mov	r0, r31
 324:	f6 ee       	ldi	r31, 0xE6	; 230
 326:	8f 2e       	mov	r8, r31
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	9f 2e       	mov	r9, r31
 32c:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 32e:	c0 ec       	ldi	r28, 0xC0	; 192
 330:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 332:	0f 2e       	mov	r0, r31
 334:	f6 ec       	ldi	r31, 0xC6	; 198
 336:	cf 2e       	mov	r12, r31
 338:	d1 2c       	mov	r13, r1
 33a:	f0 2d       	mov	r31, r0
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 33c:	54 01       	movw	r10, r8
 33e:	0f 2e       	mov	r0, r31
 340:	f5 ee       	ldi	r31, 0xE5	; 229
 342:	6f 2e       	mov	r6, r31
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	7f 2e       	mov	r7, r31
 348:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 34a:	88 81       	ld	r24, Y
 34c:	88 23       	and	r24, r24
 34e:	ec f7       	brge	.-6      	; 0x34a <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 350:	88 81       	ld	r24, Y
 352:	84 fd       	sbrc	r24, 4
 354:	cd c0       	rjmp	.+410    	; 0x4f0 <__FUSE_REGION_LENGTH__+0xf0>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 356:	88 81       	ld	r24, Y
 358:	83 fd       	sbrc	r24, 3
 35a:	cd c0       	rjmp	.+410    	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
	  return _FDEV_ERR;
	c = UDR0;
 35c:	f6 01       	movw	r30, r12
 35e:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 360:	8d 30       	cpi	r24, 0x0D	; 13
 362:	11 f0       	breq	.+4      	; 0x368 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 364:	8a 30       	cpi	r24, 0x0A	; 10
 366:	69 f4       	brne	.+26     	; 0x382 <uart_getchar+0x8c>
	  {
	    *cp = c;
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	f4 01       	movw	r30, r8
 36c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 36e:	b8 01       	movw	r22, r16
 370:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
	    rxp = b;
 374:	86 ee       	ldi	r24, 0xE6	; 230
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <rxp.1708+0x1>
 37c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <rxp.1708>
	    break;
 380:	a4 c0       	rjmp	.+328    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
	  }
	else if (c == '\t')
 382:	89 30       	cpi	r24, 0x09	; 9
 384:	39 f0       	breq	.+14     	; 0x394 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 386:	90 ee       	ldi	r25, 0xE0	; 224
 388:	98 0f       	add	r25, r24
 38a:	9f 35       	cpi	r25, 0x5F	; 95
 38c:	20 f0       	brcs	.+8      	; 0x396 <uart_getchar+0xa0>
 38e:	80 3a       	cpi	r24, 0xA0	; 160
 390:	b8 f0       	brcs	.+46     	; 0x3c0 <uart_getchar+0xca>
 392:	01 c0       	rjmp	.+2      	; 0x396 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 394:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 396:	f5 e3       	ldi	r31, 0x35	; 53
 398:	8f 16       	cp	r8, r31
 39a:	f2 e0       	ldi	r31, 0x02	; 2
 39c:	9f 06       	cpc	r9, r31
 39e:	29 f4       	brne	.+10     	; 0x3aa <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 3a0:	b8 01       	movw	r22, r16
 3a2:	87 e0       	ldi	r24, 0x07	; 7
 3a4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
 3a8:	d0 cf       	rjmp	.-96     	; 0x34a <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 3aa:	74 01       	movw	r14, r8
 3ac:	9f ef       	ldi	r25, 0xFF	; 255
 3ae:	e9 1a       	sub	r14, r25
 3b0:	f9 0a       	sbc	r15, r25
 3b2:	f4 01       	movw	r30, r8
 3b4:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 3b6:	b8 01       	movw	r22, r16
 3b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 3bc:	47 01       	movw	r8, r14
 3be:	c5 cf       	rjmp	.-118    	; 0x34a <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 3c0:	82 31       	cpi	r24, 0x12	; 18
 3c2:	d1 f1       	breq	.+116    	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 3c4:	30 f4       	brcc	.+12     	; 0x3d2 <uart_getchar+0xdc>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	09 f4       	brne	.+2      	; 0x3cc <uart_getchar+0xd6>
 3ca:	98 c0       	rjmp	.+304    	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 3cc:	88 30       	cpi	r24, 0x08	; 8
 3ce:	e9 f0       	breq	.+58     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3d0:	bc cf       	rjmp	.-136    	; 0x34a <uart_getchar+0x54>
 3d2:	87 31       	cpi	r24, 0x17	; 23
 3d4:	29 f0       	breq	.+10     	; 0x3e0 <uart_getchar+0xea>
 3d6:	8f 37       	cpi	r24, 0x7F	; 127
 3d8:	c1 f0       	breq	.+48     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3da:	85 31       	cpi	r24, 0x15	; 21
 3dc:	79 f0       	breq	.+30     	; 0x3fc <uart_getchar+0x106>
 3de:	b5 cf       	rjmp	.-150    	; 0x34a <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 3e0:	f6 ee       	ldi	r31, 0xE6	; 230
 3e2:	8f 16       	cp	r8, r31
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	9f 06       	cpc	r9, r31
 3e8:	09 f0       	breq	.+2      	; 0x3ec <uart_getchar+0xf6>
 3ea:	08 f4       	brcc	.+2      	; 0x3ee <uart_getchar+0xf8>
 3ec:	ae cf       	rjmp	.-164    	; 0x34a <uart_getchar+0x54>
 3ee:	f4 01       	movw	r30, r8
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	80 81       	ld	r24, Z
 3f4:	80 32       	cpi	r24, 0x20	; 32
 3f6:	09 f0       	breq	.+2      	; 0x3fa <uart_getchar+0x104>
 3f8:	4d c0       	rjmp	.+154    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 3fa:	a7 cf       	rjmp	.-178    	; 0x34a <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 3fc:	86 ee       	ldi	r24, 0xE6	; 230
 3fe:	88 16       	cp	r8, r24
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	98 06       	cpc	r9, r24
 404:	09 f0       	breq	.+2      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 406:	70 f5       	brcc	.+92     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 408:	a0 cf       	rjmp	.-192    	; 0x34a <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 40a:	96 ee       	ldi	r25, 0xE6	; 230
 40c:	89 16       	cp	r8, r25
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	99 06       	cpc	r9, r25
 412:	09 f0       	breq	.+2      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 414:	08 f4       	brcc	.+2      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 416:	99 cf       	rjmp	.-206    	; 0x34a <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 418:	b8 01       	movw	r22, r16
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		uart_putchar(' ', stream);
 420:	b8 01       	movw	r22, r16
 422:	80 e2       	ldi	r24, 0x20	; 32
 424:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		uart_putchar('\b', stream);
 428:	b8 01       	movw	r22, r16
 42a:	88 e0       	ldi	r24, 0x08	; 8
 42c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		cp--;
 430:	e1 e0       	ldi	r30, 0x01	; 1
 432:	8e 1a       	sub	r8, r30
 434:	91 08       	sbc	r9, r1
 436:	89 cf       	rjmp	.-238    	; 0x34a <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 438:	b8 01       	movw	r22, r16
 43a:	8d e0       	ldi	r24, 0x0D	; 13
 43c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 440:	f6 ee       	ldi	r31, 0xE6	; 230
 442:	8f 16       	cp	r8, r31
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	9f 06       	cpc	r9, r31
 448:	09 f0       	breq	.+2      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 44a:	08 f4       	brcc	.+2      	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
 44c:	7e cf       	rjmp	.-260    	; 0x34a <uart_getchar+0x54>
 44e:	75 01       	movw	r14, r10
	      uart_putchar(*cp2, stream);
 450:	b8 01       	movw	r22, r16
 452:	f7 01       	movw	r30, r14
 454:	81 91       	ld	r24, Z+
 456:	7f 01       	movw	r14, r30
 458:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 45c:	e8 14       	cp	r14, r8
 45e:	f9 04       	cpc	r15, r9
 460:	b9 f7       	brne	.-18     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 462:	73 cf       	rjmp	.-282    	; 0x34a <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 464:	b8 01       	movw	r22, r16
 466:	88 e0       	ldi	r24, 0x08	; 8
 468:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		uart_putchar(' ', stream);
 46c:	b8 01       	movw	r22, r16
 46e:	80 e2       	ldi	r24, 0x20	; 32
 470:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		uart_putchar('\b', stream);
 474:	b8 01       	movw	r22, r16
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		cp--;
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	8f 1a       	sub	r8, r31
 480:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 482:	86 ee       	ldi	r24, 0xE6	; 230
 484:	88 16       	cp	r8, r24
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	98 06       	cpc	r9, r24
 48a:	61 f7       	brne	.-40     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 48c:	f3 01       	movw	r30, r6
 48e:	31 96       	adiw	r30, 0x01	; 1
 490:	4f 01       	movw	r8, r30
 492:	5b cf       	rjmp	.-330    	; 0x34a <uart_getchar+0x54>
 494:	74 01       	movw	r14, r8
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	ef 1a       	sub	r14, r31
 49a:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 49c:	b8 01       	movw	r22, r16
 49e:	88 e0       	ldi	r24, 0x08	; 8
 4a0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		uart_putchar(' ', stream);
 4a4:	b8 01       	movw	r22, r16
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		uart_putchar('\b', stream);
 4ac:	b8 01       	movw	r22, r16
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <uart_putchar>
		cp--;
 4b4:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 4b6:	ea 14       	cp	r14, r10
 4b8:	fb 04       	cpc	r15, r11
 4ba:	09 f4       	brne	.+2      	; 0x4be <__FUSE_REGION_LENGTH__+0xbe>
 4bc:	46 cf       	rjmp	.-372    	; 0x34a <uart_getchar+0x54>
 4be:	f7 01       	movw	r30, r14
 4c0:	82 91       	ld	r24, -Z
 4c2:	7f 01       	movw	r14, r30
 4c4:	80 32       	cpi	r24, 0x20	; 32
 4c6:	51 f7       	brne	.-44     	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
 4c8:	40 cf       	rjmp	.-384    	; 0x34a <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 4ca:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <rxp.1708>
 4ce:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <rxp.1708+0x1>
 4d2:	cf 01       	movw	r24, r30
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <rxp.1708+0x1>
 4da:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <rxp.1708>
 4de:	80 81       	ld	r24, Z
  if (c == '\n')
 4e0:	8a 30       	cpi	r24, 0x0A	; 10
 4e2:	21 f4       	brne	.+8      	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
    rxp = 0;
 4e4:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <rxp.1708+0x1>
 4e8:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <rxp.1708>

  return c;
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	08 c0       	rjmp	.+16     	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 4f0:	8e ef       	ldi	r24, 0xFE	; 254
 4f2:	9f ef       	ldi	r25, 0xFF	; 255
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	9f ef       	ldi	r25, 0xFF	; 255
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	ff 90       	pop	r15
 50a:	ef 90       	pop	r14
 50c:	df 90       	pop	r13
 50e:	cf 90       	pop	r12
 510:	bf 90       	pop	r11
 512:	af 90       	pop	r10
 514:	9f 90       	pop	r9
 516:	8f 90       	pop	r8
 518:	7f 90       	pop	r7
 51a:	6f 90       	pop	r6
 51c:	08 95       	ret

0000051e <fscanf>:
 51e:	a0 e0       	ldi	r26, 0x00	; 0
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e5 e9       	ldi	r30, 0x95	; 149
 524:	f2 e0       	ldi	r31, 0x02	; 2
 526:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__prologue_saves__+0x20>
 52a:	ae 01       	movw	r20, r28
 52c:	47 5f       	subi	r20, 0xF7	; 247
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	6f 81       	ldd	r22, Y+7	; 0x07
 532:	78 85       	ldd	r23, Y+8	; 0x08
 534:	8d 81       	ldd	r24, Y+5	; 0x05
 536:	9e 81       	ldd	r25, Y+6	; 0x06
 538:	0e 94 55 04 	call	0x8aa	; 0x8aa <vfscanf>
 53c:	e2 e0       	ldi	r30, 0x02	; 2
 53e:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__epilogue_restores__+0x20>

00000542 <fwrite>:
 542:	a0 e0       	ldi	r26, 0x00	; 0
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	e7 ea       	ldi	r30, 0xA7	; 167
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__prologue_saves__+0xc>
 54e:	5b 01       	movw	r10, r22
 550:	4a 01       	movw	r8, r20
 552:	79 01       	movw	r14, r18
 554:	d9 01       	movw	r26, r18
 556:	13 96       	adiw	r26, 0x03	; 3
 558:	2c 91       	ld	r18, X
 55a:	21 ff       	sbrs	r18, 1
 55c:	1d c0       	rjmp	.+58     	; 0x598 <fwrite+0x56>
 55e:	c0 e0       	ldi	r28, 0x00	; 0
 560:	d0 e0       	ldi	r29, 0x00	; 0
 562:	c8 15       	cp	r28, r8
 564:	d9 05       	cpc	r29, r9
 566:	d9 f0       	breq	.+54     	; 0x59e <fwrite+0x5c>
 568:	8c 01       	movw	r16, r24
 56a:	6c 01       	movw	r12, r24
 56c:	ca 0c       	add	r12, r10
 56e:	db 1c       	adc	r13, r11
 570:	c8 01       	movw	r24, r16
 572:	0c 15       	cp	r16, r12
 574:	1d 05       	cpc	r17, r13
 576:	71 f0       	breq	.+28     	; 0x594 <fwrite+0x52>
 578:	0f 5f       	subi	r16, 0xFF	; 255
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	d7 01       	movw	r26, r14
 57e:	18 96       	adiw	r26, 0x08	; 8
 580:	ed 91       	ld	r30, X+
 582:	fc 91       	ld	r31, X
 584:	19 97       	sbiw	r26, 0x09	; 9
 586:	b7 01       	movw	r22, r14
 588:	dc 01       	movw	r26, r24
 58a:	8c 91       	ld	r24, X
 58c:	09 95       	icall
 58e:	89 2b       	or	r24, r25
 590:	79 f3       	breq	.-34     	; 0x570 <fwrite+0x2e>
 592:	05 c0       	rjmp	.+10     	; 0x59e <fwrite+0x5c>
 594:	21 96       	adiw	r28, 0x01	; 1
 596:	e5 cf       	rjmp	.-54     	; 0x562 <fwrite+0x20>
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <fwrite+0x5e>
 59e:	ce 01       	movw	r24, r28
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
 5a4:	ec e0       	ldi	r30, 0x0C	; 12
 5a6:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__epilogue_restores__+0xc>

000005aa <putval>:
 5aa:	20 fd       	sbrc	r18, 0
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <putval+0x16>
 5ae:	fc 01       	movw	r30, r24
 5b0:	23 fd       	sbrc	r18, 3
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <putval+0x14>
 5b4:	22 ff       	sbrs	r18, 2
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <putval+0x12>
 5b8:	73 83       	std	Z+3, r23	; 0x03
 5ba:	62 83       	std	Z+2, r22	; 0x02
 5bc:	51 83       	std	Z+1, r21	; 0x01
 5be:	40 83       	st	Z, r20
 5c0:	08 95       	ret

000005c2 <mulacc>:
 5c2:	44 fd       	sbrc	r20, 4
 5c4:	10 c0       	rjmp	.+32     	; 0x5e6 <mulacc+0x24>
 5c6:	46 fd       	sbrc	r20, 6
 5c8:	10 c0       	rjmp	.+32     	; 0x5ea <mulacc+0x28>
 5ca:	db 01       	movw	r26, r22
 5cc:	fc 01       	movw	r30, r24
 5ce:	aa 0f       	add	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	ee 1f       	adc	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	10 94       	com	r1
 5d8:	d1 f7       	brne	.-12     	; 0x5ce <mulacc+0xc>
 5da:	6a 0f       	add	r22, r26
 5dc:	7b 1f       	adc	r23, r27
 5de:	8e 1f       	adc	r24, r30
 5e0:	9f 1f       	adc	r25, r31
 5e2:	31 e0       	ldi	r19, 0x01	; 1
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <mulacc+0x2a>
 5e6:	33 e0       	ldi	r19, 0x03	; 3
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <mulacc+0x2a>
 5ea:	34 e0       	ldi	r19, 0x04	; 4
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	31 50       	subi	r19, 0x01	; 1
 5f6:	d1 f7       	brne	.-12     	; 0x5ec <mulacc+0x2a>
 5f8:	62 0f       	add	r22, r18
 5fa:	71 1d       	adc	r23, r1
 5fc:	81 1d       	adc	r24, r1
 5fe:	91 1d       	adc	r25, r1
 600:	08 95       	ret

00000602 <skip_spaces>:
 602:	0f 93       	push	r16
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	8c 01       	movw	r16, r24
 60c:	c8 01       	movw	r24, r16
 60e:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 612:	ec 01       	movw	r28, r24
 614:	97 fd       	sbrc	r25, 7
 616:	08 c0       	rjmp	.+16     	; 0x628 <skip_spaces+0x26>
 618:	0e 94 83 05 	call	0xb06	; 0xb06 <isspace>
 61c:	89 2b       	or	r24, r25
 61e:	b1 f7       	brne	.-20     	; 0x60c <skip_spaces+0xa>
 620:	b8 01       	movw	r22, r16
 622:	ce 01       	movw	r24, r28
 624:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ungetc>
 628:	ce 01       	movw	r24, r28
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <conv_int>:
 634:	a1 e0       	ldi	r26, 0x01	; 1
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e0 e2       	ldi	r30, 0x20	; 32
 63a:	f3 e0       	ldi	r31, 0x03	; 3
 63c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__prologue_saves__+0xc>
 640:	8c 01       	movw	r16, r24
 642:	c6 2e       	mov	r12, r22
 644:	7a 01       	movw	r14, r20
 646:	29 83       	std	Y+1, r18	; 0x01
 648:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 64c:	ac 01       	movw	r20, r24
 64e:	55 27       	eor	r21, r21
 650:	29 81       	ldd	r18, Y+1	; 0x01
 652:	4b 32       	cpi	r20, 0x2B	; 43
 654:	51 05       	cpc	r21, r1
 656:	21 f0       	breq	.+8      	; 0x660 <conv_int+0x2c>
 658:	4d 32       	cpi	r20, 0x2D	; 45
 65a:	51 05       	cpc	r21, r1
 65c:	69 f4       	brne	.+26     	; 0x678 <conv_int+0x44>
 65e:	20 68       	ori	r18, 0x80	; 128
 660:	ca 94       	dec	r12
 662:	c1 10       	cpse	r12, r1
 664:	02 c0       	rjmp	.+4      	; 0x66a <conv_int+0x36>
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	76 c0       	rjmp	.+236    	; 0x756 <conv_int+0x122>
 66a:	c8 01       	movw	r24, r16
 66c:	29 83       	std	Y+1, r18	; 0x01
 66e:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 672:	29 81       	ldd	r18, Y+1	; 0x01
 674:	97 fd       	sbrc	r25, 7
 676:	f7 cf       	rjmp	.-18     	; 0x666 <conv_int+0x32>
 678:	32 2f       	mov	r19, r18
 67a:	3d 7f       	andi	r19, 0xFD	; 253
 67c:	d3 2e       	mov	r13, r19
 67e:	32 2f       	mov	r19, r18
 680:	30 73       	andi	r19, 0x30	; 48
 682:	49 f5       	brne	.+82     	; 0x6d6 <conv_int+0xa2>
 684:	80 33       	cpi	r24, 0x30	; 48
 686:	39 f5       	brne	.+78     	; 0x6d6 <conv_int+0xa2>
 688:	bb 24       	eor	r11, r11
 68a:	ba 94       	dec	r11
 68c:	bc 0c       	add	r11, r12
 68e:	09 f4       	brne	.+2      	; 0x692 <conv_int+0x5e>
 690:	4e c0       	rjmp	.+156    	; 0x72e <conv_int+0xfa>
 692:	c8 01       	movw	r24, r16
 694:	29 83       	std	Y+1, r18	; 0x01
 696:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 69a:	29 81       	ldd	r18, Y+1	; 0x01
 69c:	97 fd       	sbrc	r25, 7
 69e:	47 c0       	rjmp	.+142    	; 0x72e <conv_int+0xfa>
 6a0:	38 2f       	mov	r19, r24
 6a2:	3f 7d       	andi	r19, 0xDF	; 223
 6a4:	38 35       	cpi	r19, 0x58	; 88
 6a6:	69 f4       	brne	.+26     	; 0x6c2 <conv_int+0x8e>
 6a8:	8d 2d       	mov	r24, r13
 6aa:	82 64       	ori	r24, 0x42	; 66
 6ac:	d8 2e       	mov	r13, r24
 6ae:	ca 94       	dec	r12
 6b0:	ca 94       	dec	r12
 6b2:	cc 20       	and	r12, r12
 6b4:	e1 f1       	breq	.+120    	; 0x72e <conv_int+0xfa>
 6b6:	c8 01       	movw	r24, r16
 6b8:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 6bc:	97 ff       	sbrs	r25, 7
 6be:	0b c0       	rjmp	.+22     	; 0x6d6 <conv_int+0xa2>
 6c0:	36 c0       	rjmp	.+108    	; 0x72e <conv_int+0xfa>
 6c2:	26 ff       	sbrs	r18, 6
 6c4:	04 c0       	rjmp	.+8      	; 0x6ce <conv_int+0x9a>
 6c6:	2d 2d       	mov	r18, r13
 6c8:	22 60       	ori	r18, 0x02	; 2
 6ca:	d2 2e       	mov	r13, r18
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <conv_int+0xa0>
 6ce:	3d 2d       	mov	r19, r13
 6d0:	32 61       	ori	r19, 0x12	; 18
 6d2:	d3 2e       	mov	r13, r19
 6d4:	cb 2c       	mov	r12, r11
 6d6:	81 2c       	mov	r8, r1
 6d8:	91 2c       	mov	r9, r1
 6da:	54 01       	movw	r10, r8
 6dc:	20 ed       	ldi	r18, 0xD0	; 208
 6de:	28 0f       	add	r18, r24
 6e0:	28 30       	cpi	r18, 0x08	; 8
 6e2:	80 f0       	brcs	.+32     	; 0x704 <conv_int+0xd0>
 6e4:	d4 fe       	sbrs	r13, 4
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <conv_int+0xbc>
 6e8:	b8 01       	movw	r22, r16
 6ea:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ungetc>
 6ee:	1c c0       	rjmp	.+56     	; 0x728 <conv_int+0xf4>
 6f0:	2a 30       	cpi	r18, 0x0A	; 10
 6f2:	40 f0       	brcs	.+16     	; 0x704 <conv_int+0xd0>
 6f4:	d6 fe       	sbrs	r13, 6
 6f6:	f8 cf       	rjmp	.-16     	; 0x6e8 <conv_int+0xb4>
 6f8:	2f 7d       	andi	r18, 0xDF	; 223
 6fa:	3f ee       	ldi	r19, 0xEF	; 239
 6fc:	32 0f       	add	r19, r18
 6fe:	36 30       	cpi	r19, 0x06	; 6
 700:	98 f7       	brcc	.-26     	; 0x6e8 <conv_int+0xb4>
 702:	27 50       	subi	r18, 0x07	; 7
 704:	4d 2d       	mov	r20, r13
 706:	c5 01       	movw	r24, r10
 708:	b4 01       	movw	r22, r8
 70a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <mulacc>
 70e:	4b 01       	movw	r8, r22
 710:	5c 01       	movw	r10, r24
 712:	8d 2d       	mov	r24, r13
 714:	82 60       	ori	r24, 0x02	; 2
 716:	d8 2e       	mov	r13, r24
 718:	ca 94       	dec	r12
 71a:	cc 20       	and	r12, r12
 71c:	59 f0       	breq	.+22     	; 0x734 <conv_int+0x100>
 71e:	c8 01       	movw	r24, r16
 720:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 724:	97 ff       	sbrs	r25, 7
 726:	da cf       	rjmp	.-76     	; 0x6dc <conv_int+0xa8>
 728:	d1 fc       	sbrc	r13, 1
 72a:	04 c0       	rjmp	.+8      	; 0x734 <conv_int+0x100>
 72c:	9c cf       	rjmp	.-200    	; 0x666 <conv_int+0x32>
 72e:	81 2c       	mov	r8, r1
 730:	91 2c       	mov	r9, r1
 732:	54 01       	movw	r10, r8
 734:	d7 fe       	sbrs	r13, 7
 736:	08 c0       	rjmp	.+16     	; 0x748 <conv_int+0x114>
 738:	b0 94       	com	r11
 73a:	a0 94       	com	r10
 73c:	90 94       	com	r9
 73e:	80 94       	com	r8
 740:	81 1c       	adc	r8, r1
 742:	91 1c       	adc	r9, r1
 744:	a1 1c       	adc	r10, r1
 746:	b1 1c       	adc	r11, r1
 748:	2d 2d       	mov	r18, r13
 74a:	b5 01       	movw	r22, r10
 74c:	a4 01       	movw	r20, r8
 74e:	c7 01       	movw	r24, r14
 750:	0e 94 d5 02 	call	0x5aa	; 0x5aa <putval>
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	21 96       	adiw	r28, 0x01	; 1
 758:	ec e0       	ldi	r30, 0x0C	; 12
 75a:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__epilogue_restores__+0xc>

0000075e <conv_brk>:
 75e:	a1 e2       	ldi	r26, 0x21	; 33
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	e5 eb       	ldi	r30, 0xB5	; 181
 764:	f3 e0       	ldi	r31, 0x03	; 3
 766:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__prologue_saves__+0x8>
 76a:	5c 01       	movw	r10, r24
 76c:	7a 01       	movw	r14, r20
 76e:	ce 01       	movw	r24, r28
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	6c 01       	movw	r12, r24
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	f6 01       	movw	r30, r12
 778:	11 92       	st	Z+, r1
 77a:	8a 95       	dec	r24
 77c:	e9 f7       	brne	.-6      	; 0x778 <conv_brk+0x1a>
 77e:	f5 01       	movw	r30, r10
 780:	83 80       	ldd	r8, Z+3	; 0x03
 782:	40 e0       	ldi	r20, 0x00	; 0
 784:	50 e0       	ldi	r21, 0x00	; 0
 786:	91 2c       	mov	r9, r1
 788:	71 2c       	mov	r7, r1
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	a1 e0       	ldi	r26, 0x01	; 1
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	f9 01       	movw	r30, r18
 792:	83 fc       	sbrc	r8, 3
 794:	85 91       	lpm	r24, Z+
 796:	83 fe       	sbrs	r8, 3
 798:	81 91       	ld	r24, Z+
 79a:	8f 01       	movw	r16, r30
 79c:	98 2f       	mov	r25, r24
 79e:	9f 01       	movw	r18, r30
 7a0:	81 11       	cpse	r24, r1
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <conv_brk+0x4c>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	7c c0       	rjmp	.+248    	; 0x8a2 <conv_brk+0x144>
 7aa:	8e 35       	cpi	r24, 0x5E	; 94
 7ac:	19 f4       	brne	.+6      	; 0x7b4 <conv_brk+0x56>
 7ae:	41 15       	cp	r20, r1
 7b0:	51 05       	cpc	r21, r1
 7b2:	49 f1       	breq	.+82     	; 0x806 <conv_brk+0xa8>
 7b4:	e7 2f       	mov	r30, r23
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	e4 17       	cp	r30, r20
 7ba:	f5 07       	cpc	r31, r21
 7bc:	3c f4       	brge	.+14     	; 0x7cc <conv_brk+0x6e>
 7be:	8d 35       	cpi	r24, 0x5D	; 93
 7c0:	59 f1       	breq	.+86     	; 0x818 <conv_brk+0xba>
 7c2:	8d 32       	cpi	r24, 0x2D	; 45
 7c4:	19 f4       	brne	.+6      	; 0x7cc <conv_brk+0x6e>
 7c6:	77 20       	and	r7, r7
 7c8:	01 f1       	breq	.+64     	; 0x80a <conv_brk+0xac>
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <conv_brk+0x74>
 7cc:	71 10       	cpse	r7, r1
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <conv_brk+0x74>
 7d0:	98 2e       	mov	r9, r24
 7d2:	89 2f       	mov	r24, r25
 7d4:	86 95       	lsr	r24
 7d6:	86 95       	lsr	r24
 7d8:	86 95       	lsr	r24
 7da:	86 01       	movw	r16, r12
 7dc:	08 0f       	add	r16, r24
 7de:	11 1d       	adc	r17, r1
 7e0:	89 2f       	mov	r24, r25
 7e2:	87 70       	andi	r24, 0x07	; 7
 7e4:	3d 01       	movw	r6, r26
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <conv_brk+0x8c>
 7e8:	66 0c       	add	r6, r6
 7ea:	8a 95       	dec	r24
 7ec:	ea f7       	brpl	.-6      	; 0x7e8 <conv_brk+0x8a>
 7ee:	f8 01       	movw	r30, r16
 7f0:	80 81       	ld	r24, Z
 7f2:	86 29       	or	r24, r6
 7f4:	80 83       	st	Z, r24
 7f6:	99 15       	cp	r25, r9
 7f8:	59 f0       	breq	.+22     	; 0x810 <conv_brk+0xb2>
 7fa:	99 15       	cp	r25, r9
 7fc:	10 f4       	brcc	.+4      	; 0x802 <conv_brk+0xa4>
 7fe:	9f 5f       	subi	r25, 0xFF	; 255
 800:	e8 cf       	rjmp	.-48     	; 0x7d2 <conv_brk+0x74>
 802:	91 50       	subi	r25, 0x01	; 1
 804:	e6 cf       	rjmp	.-52     	; 0x7d2 <conv_brk+0x74>
 806:	71 e0       	ldi	r23, 0x01	; 1
 808:	04 c0       	rjmp	.+8      	; 0x812 <conv_brk+0xb4>
 80a:	77 24       	eor	r7, r7
 80c:	73 94       	inc	r7
 80e:	01 c0       	rjmp	.+2      	; 0x812 <conv_brk+0xb4>
 810:	71 2c       	mov	r7, r1
 812:	4f 5f       	subi	r20, 0xFF	; 255
 814:	5f 4f       	sbci	r21, 0xFF	; 255
 816:	bc cf       	rjmp	.-136    	; 0x790 <conv_brk+0x32>
 818:	77 20       	and	r7, r7
 81a:	19 f0       	breq	.+6      	; 0x822 <conv_brk+0xc4>
 81c:	8e 81       	ldd	r24, Y+6	; 0x06
 81e:	80 62       	ori	r24, 0x20	; 32
 820:	8e 83       	std	Y+6, r24	; 0x06
 822:	71 11       	cpse	r23, r1
 824:	03 c0       	rjmp	.+6      	; 0x82c <conv_brk+0xce>
 826:	99 24       	eor	r9, r9
 828:	93 94       	inc	r9
 82a:	16 c0       	rjmp	.+44     	; 0x858 <conv_brk+0xfa>
 82c:	f6 01       	movw	r30, r12
 82e:	9e 01       	movw	r18, r28
 830:	2f 5d       	subi	r18, 0xDF	; 223
 832:	3f 4f       	sbci	r19, 0xFF	; 255
 834:	80 81       	ld	r24, Z
 836:	80 95       	com	r24
 838:	81 93       	st	Z+, r24
 83a:	e2 17       	cp	r30, r18
 83c:	f3 07       	cpc	r31, r19
 83e:	d1 f7       	brne	.-12     	; 0x834 <conv_brk+0xd6>
 840:	f2 cf       	rjmp	.-28     	; 0x826 <conv_brk+0xc8>
 842:	e1 14       	cp	r14, r1
 844:	f1 04       	cpc	r15, r1
 846:	29 f0       	breq	.+10     	; 0x852 <conv_brk+0xf4>
 848:	f7 01       	movw	r30, r14
 84a:	80 83       	st	Z, r24
 84c:	c7 01       	movw	r24, r14
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	7c 01       	movw	r14, r24
 852:	61 50       	subi	r22, 0x01	; 1
 854:	91 2c       	mov	r9, r1
 856:	f9 f0       	breq	.+62     	; 0x896 <conv_brk+0x138>
 858:	c5 01       	movw	r24, r10
 85a:	69 a3       	std	Y+33, r22	; 0x21
 85c:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 860:	69 a1       	ldd	r22, Y+33	; 0x21
 862:	97 fd       	sbrc	r25, 7
 864:	16 c0       	rjmp	.+44     	; 0x892 <conv_brk+0x134>
 866:	28 2f       	mov	r18, r24
 868:	26 95       	lsr	r18
 86a:	26 95       	lsr	r18
 86c:	26 95       	lsr	r18
 86e:	f6 01       	movw	r30, r12
 870:	e2 0f       	add	r30, r18
 872:	f1 1d       	adc	r31, r1
 874:	20 81       	ld	r18, Z
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	ac 01       	movw	r20, r24
 87a:	47 70       	andi	r20, 0x07	; 7
 87c:	55 27       	eor	r21, r21
 87e:	02 c0       	rjmp	.+4      	; 0x884 <conv_brk+0x126>
 880:	35 95       	asr	r19
 882:	27 95       	ror	r18
 884:	4a 95       	dec	r20
 886:	e2 f7       	brpl	.-8      	; 0x880 <conv_brk+0x122>
 888:	20 fd       	sbrc	r18, 0
 88a:	db cf       	rjmp	.-74     	; 0x842 <conv_brk+0xe4>
 88c:	b5 01       	movw	r22, r10
 88e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ungetc>
 892:	91 10       	cpse	r9, r1
 894:	87 cf       	rjmp	.-242    	; 0x7a4 <conv_brk+0x46>
 896:	e1 14       	cp	r14, r1
 898:	f1 04       	cpc	r15, r1
 89a:	11 f0       	breq	.+4      	; 0x8a0 <conv_brk+0x142>
 89c:	f7 01       	movw	r30, r14
 89e:	10 82       	st	Z, r1
 8a0:	c8 01       	movw	r24, r16
 8a2:	a1 96       	adiw	r28, 0x21	; 33
 8a4:	ee e0       	ldi	r30, 0x0E	; 14
 8a6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__epilogue_restores__+0x8>

000008aa <vfscanf>:
 8aa:	4f 92       	push	r4
 8ac:	5f 92       	push	r5
 8ae:	7f 92       	push	r7
 8b0:	8f 92       	push	r8
 8b2:	9f 92       	push	r9
 8b4:	af 92       	push	r10
 8b6:	bf 92       	push	r11
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	1f 92       	push	r1
 8ca:	cd b7       	in	r28, 0x3d	; 61
 8cc:	de b7       	in	r29, 0x3e	; 62
 8ce:	6c 01       	movw	r12, r24
 8d0:	2b 01       	movw	r4, r22
 8d2:	5a 01       	movw	r10, r20
 8d4:	fc 01       	movw	r30, r24
 8d6:	17 82       	std	Z+7, r1	; 0x07
 8d8:	16 82       	std	Z+6, r1	; 0x06
 8da:	71 2c       	mov	r7, r1
 8dc:	f6 01       	movw	r30, r12
 8de:	f3 80       	ldd	r15, Z+3	; 0x03
 8e0:	f2 01       	movw	r30, r4
 8e2:	f3 fc       	sbrc	r15, 3
 8e4:	85 91       	lpm	r24, Z+
 8e6:	f3 fe       	sbrs	r15, 3
 8e8:	81 91       	ld	r24, Z+
 8ea:	38 2f       	mov	r19, r24
 8ec:	2f 01       	movw	r4, r30
 8ee:	88 23       	and	r24, r24
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <vfscanf+0x4a>
 8f2:	f3 c0       	rjmp	.+486    	; 0xada <__stack+0x1db>
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	39 83       	std	Y+1, r19	; 0x01
 8f8:	0e 94 83 05 	call	0xb06	; 0xb06 <isspace>
 8fc:	39 81       	ldd	r19, Y+1	; 0x01
 8fe:	89 2b       	or	r24, r25
 900:	21 f0       	breq	.+8      	; 0x90a <__stack+0xb>
 902:	c6 01       	movw	r24, r12
 904:	0e 94 01 03 	call	0x602	; 0x602 <skip_spaces>
 908:	e9 cf       	rjmp	.-46     	; 0x8dc <vfscanf+0x32>
 90a:	35 32       	cpi	r19, 0x25	; 37
 90c:	41 f4       	brne	.+16     	; 0x91e <__stack+0x1f>
 90e:	f2 01       	movw	r30, r4
 910:	f3 fc       	sbrc	r15, 3
 912:	35 91       	lpm	r19, Z+
 914:	f3 fe       	sbrs	r15, 3
 916:	31 91       	ld	r19, Z+
 918:	2f 01       	movw	r4, r30
 91a:	35 32       	cpi	r19, 0x25	; 37
 91c:	69 f4       	brne	.+26     	; 0x938 <__stack+0x39>
 91e:	c6 01       	movw	r24, r12
 920:	39 83       	std	Y+1, r19	; 0x01
 922:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 926:	39 81       	ldd	r19, Y+1	; 0x01
 928:	97 fd       	sbrc	r25, 7
 92a:	d5 c0       	rjmp	.+426    	; 0xad6 <__stack+0x1d7>
 92c:	38 17       	cp	r19, r24
 92e:	b1 f2       	breq	.-84     	; 0x8dc <vfscanf+0x32>
 930:	b6 01       	movw	r22, r12
 932:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ungetc>
 936:	d1 c0       	rjmp	.+418    	; 0xada <__stack+0x1db>
 938:	3a 32       	cpi	r19, 0x2A	; 42
 93a:	39 f4       	brne	.+14     	; 0x94a <__stack+0x4b>
 93c:	f3 fc       	sbrc	r15, 3
 93e:	35 91       	lpm	r19, Z+
 940:	f3 fe       	sbrs	r15, 3
 942:	31 91       	ld	r19, Z+
 944:	2f 01       	movw	r4, r30
 946:	51 e0       	ldi	r21, 0x01	; 1
 948:	01 c0       	rjmp	.+2      	; 0x94c <__stack+0x4d>
 94a:	50 e0       	ldi	r21, 0x00	; 0
 94c:	42 01       	movw	r8, r4
 94e:	10 e0       	ldi	r17, 0x00	; 0
 950:	20 ed       	ldi	r18, 0xD0	; 208
 952:	23 0f       	add	r18, r19
 954:	2a 30       	cpi	r18, 0x0A	; 10
 956:	90 f4       	brcc	.+36     	; 0x97c <__stack+0x7d>
 958:	52 60       	ori	r21, 0x02	; 2
 95a:	61 2f       	mov	r22, r17
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	40 e2       	ldi	r20, 0x20	; 32
 964:	59 83       	std	Y+1, r21	; 0x01
 966:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <mulacc>
 96a:	16 2f       	mov	r17, r22
 96c:	f4 01       	movw	r30, r8
 96e:	f3 fc       	sbrc	r15, 3
 970:	35 91       	lpm	r19, Z+
 972:	f3 fe       	sbrs	r15, 3
 974:	31 91       	ld	r19, Z+
 976:	4f 01       	movw	r8, r30
 978:	59 81       	ldd	r21, Y+1	; 0x01
 97a:	ea cf       	rjmp	.-44     	; 0x950 <__stack+0x51>
 97c:	05 2f       	mov	r16, r21
 97e:	23 2f       	mov	r18, r19
 980:	24 01       	movw	r4, r8
 982:	51 ff       	sbrs	r21, 1
 984:	03 c0       	rjmp	.+6      	; 0x98c <__stack+0x8d>
 986:	11 11       	cpse	r17, r1
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
 98a:	a7 c0       	rjmp	.+334    	; 0xada <__stack+0x1db>
 98c:	1f ef       	ldi	r17, 0xFF	; 255
 98e:	38 36       	cpi	r19, 0x68	; 104
 990:	19 f0       	breq	.+6      	; 0x998 <__stack+0x99>
 992:	3c 36       	cpi	r19, 0x6C	; 108
 994:	59 f0       	breq	.+22     	; 0x9ac <__stack+0xad>
 996:	11 c0       	rjmp	.+34     	; 0x9ba <__stack+0xbb>
 998:	f4 01       	movw	r30, r8
 99a:	f3 fc       	sbrc	r15, 3
 99c:	25 91       	lpm	r18, Z+
 99e:	f3 fe       	sbrs	r15, 3
 9a0:	21 91       	ld	r18, Z+
 9a2:	2f 01       	movw	r4, r30
 9a4:	28 36       	cpi	r18, 0x68	; 104
 9a6:	49 f4       	brne	.+18     	; 0x9ba <__stack+0xbb>
 9a8:	05 2f       	mov	r16, r21
 9aa:	08 60       	ori	r16, 0x08	; 8
 9ac:	04 60       	ori	r16, 0x04	; 4
 9ae:	f2 01       	movw	r30, r4
 9b0:	f3 fc       	sbrc	r15, 3
 9b2:	25 91       	lpm	r18, Z+
 9b4:	f3 fe       	sbrs	r15, 3
 9b6:	21 91       	ld	r18, Z+
 9b8:	2f 01       	movw	r4, r30
 9ba:	22 23       	and	r18, r18
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <__stack+0xc1>
 9be:	8d c0       	rjmp	.+282    	; 0xada <__stack+0x1db>
 9c0:	62 2f       	mov	r22, r18
 9c2:	70 e0       	ldi	r23, 0x00	; 0
 9c4:	88 e6       	ldi	r24, 0x68	; 104
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	29 83       	std	Y+1, r18	; 0x01
 9ca:	0e 94 8c 05 	call	0xb18	; 0xb18 <strchr_P>
 9ce:	29 81       	ldd	r18, Y+1	; 0x01
 9d0:	89 2b       	or	r24, r25
 9d2:	09 f4       	brne	.+2      	; 0x9d6 <__stack+0xd7>
 9d4:	82 c0       	rjmp	.+260    	; 0xada <__stack+0x1db>
 9d6:	00 fd       	sbrc	r16, 0
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__stack+0xe9>
 9da:	f5 01       	movw	r30, r10
 9dc:	e0 80       	ld	r14, Z
 9de:	f1 80       	ldd	r15, Z+1	; 0x01
 9e0:	c5 01       	movw	r24, r10
 9e2:	02 96       	adiw	r24, 0x02	; 2
 9e4:	5c 01       	movw	r10, r24
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__stack+0xed>
 9e8:	e1 2c       	mov	r14, r1
 9ea:	f1 2c       	mov	r15, r1
 9ec:	2e 36       	cpi	r18, 0x6E	; 110
 9ee:	51 f4       	brne	.+20     	; 0xa04 <__stack+0x105>
 9f0:	f6 01       	movw	r30, r12
 9f2:	46 81       	ldd	r20, Z+6	; 0x06
 9f4:	57 81       	ldd	r21, Z+7	; 0x07
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	70 e0       	ldi	r23, 0x00	; 0
 9fa:	20 2f       	mov	r18, r16
 9fc:	c7 01       	movw	r24, r14
 9fe:	0e 94 d5 02 	call	0x5aa	; 0x5aa <putval>
 a02:	6c cf       	rjmp	.-296    	; 0x8dc <vfscanf+0x32>
 a04:	23 36       	cpi	r18, 0x63	; 99
 a06:	91 f4       	brne	.+36     	; 0xa2c <__stack+0x12d>
 a08:	01 ff       	sbrs	r16, 1
 a0a:	11 e0       	ldi	r17, 0x01	; 1
 a0c:	c6 01       	movw	r24, r12
 a0e:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 a12:	97 fd       	sbrc	r25, 7
 a14:	60 c0       	rjmp	.+192    	; 0xad6 <__stack+0x1d7>
 a16:	e1 14       	cp	r14, r1
 a18:	f1 04       	cpc	r15, r1
 a1a:	29 f0       	breq	.+10     	; 0xa26 <__stack+0x127>
 a1c:	f7 01       	movw	r30, r14
 a1e:	80 83       	st	Z, r24
 a20:	c7 01       	movw	r24, r14
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	7c 01       	movw	r14, r24
 a26:	11 50       	subi	r17, 0x01	; 1
 a28:	89 f7       	brne	.-30     	; 0xa0c <__stack+0x10d>
 a2a:	51 c0       	rjmp	.+162    	; 0xace <__stack+0x1cf>
 a2c:	2b 35       	cpi	r18, 0x5B	; 91
 a2e:	59 f4       	brne	.+22     	; 0xa46 <__stack+0x147>
 a30:	92 01       	movw	r18, r4
 a32:	a7 01       	movw	r20, r14
 a34:	61 2f       	mov	r22, r17
 a36:	c6 01       	movw	r24, r12
 a38:	0e 94 af 03 	call	0x75e	; 0x75e <conv_brk>
 a3c:	2c 01       	movw	r4, r24
 a3e:	89 2b       	or	r24, r25
 a40:	09 f0       	breq	.+2      	; 0xa44 <__stack+0x145>
 a42:	45 c0       	rjmp	.+138    	; 0xace <__stack+0x1cf>
 a44:	3f c0       	rjmp	.+126    	; 0xac4 <__stack+0x1c5>
 a46:	c6 01       	movw	r24, r12
 a48:	29 83       	std	Y+1, r18	; 0x01
 a4a:	0e 94 01 03 	call	0x602	; 0x602 <skip_spaces>
 a4e:	29 81       	ldd	r18, Y+1	; 0x01
 a50:	97 fd       	sbrc	r25, 7
 a52:	41 c0       	rjmp	.+130    	; 0xad6 <__stack+0x1d7>
 a54:	2f 36       	cpi	r18, 0x6F	; 111
 a56:	59 f1       	breq	.+86     	; 0xaae <__stack+0x1af>
 a58:	28 f4       	brcc	.+10     	; 0xa64 <__stack+0x165>
 a5a:	24 36       	cpi	r18, 0x64	; 100
 a5c:	31 f1       	breq	.+76     	; 0xaaa <__stack+0x1ab>
 a5e:	29 36       	cpi	r18, 0x69	; 105
 a60:	49 f1       	breq	.+82     	; 0xab4 <__stack+0x1b5>
 a62:	27 c0       	rjmp	.+78     	; 0xab2 <__stack+0x1b3>
 a64:	23 37       	cpi	r18, 0x73	; 115
 a66:	69 f0       	breq	.+26     	; 0xa82 <__stack+0x183>
 a68:	25 37       	cpi	r18, 0x75	; 117
 a6a:	f9 f0       	breq	.+62     	; 0xaaa <__stack+0x1ab>
 a6c:	22 c0       	rjmp	.+68     	; 0xab2 <__stack+0x1b3>
 a6e:	e1 14       	cp	r14, r1
 a70:	f1 04       	cpc	r15, r1
 a72:	29 f0       	breq	.+10     	; 0xa7e <__stack+0x17f>
 a74:	f7 01       	movw	r30, r14
 a76:	80 82       	st	Z, r8
 a78:	c7 01       	movw	r24, r14
 a7a:	01 96       	adiw	r24, 0x01	; 1
 a7c:	7c 01       	movw	r14, r24
 a7e:	11 50       	subi	r17, 0x01	; 1
 a80:	71 f0       	breq	.+28     	; 0xa9e <__stack+0x19f>
 a82:	c6 01       	movw	r24, r12
 a84:	0e 94 97 05 	call	0xb2e	; 0xb2e <fgetc>
 a88:	4c 01       	movw	r8, r24
 a8a:	97 fd       	sbrc	r25, 7
 a8c:	08 c0       	rjmp	.+16     	; 0xa9e <__stack+0x19f>
 a8e:	0e 94 83 05 	call	0xb06	; 0xb06 <isspace>
 a92:	89 2b       	or	r24, r25
 a94:	61 f3       	breq	.-40     	; 0xa6e <__stack+0x16f>
 a96:	b6 01       	movw	r22, r12
 a98:	c4 01       	movw	r24, r8
 a9a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ungetc>
 a9e:	e1 14       	cp	r14, r1
 aa0:	f1 04       	cpc	r15, r1
 aa2:	a9 f0       	breq	.+42     	; 0xace <__stack+0x1cf>
 aa4:	f7 01       	movw	r30, r14
 aa6:	10 82       	st	Z, r1
 aa8:	12 c0       	rjmp	.+36     	; 0xace <__stack+0x1cf>
 aaa:	00 62       	ori	r16, 0x20	; 32
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <__stack+0x1b5>
 aae:	00 61       	ori	r16, 0x10	; 16
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <__stack+0x1b5>
 ab2:	00 64       	ori	r16, 0x40	; 64
 ab4:	20 2f       	mov	r18, r16
 ab6:	a7 01       	movw	r20, r14
 ab8:	61 2f       	mov	r22, r17
 aba:	c6 01       	movw	r24, r12
 abc:	0e 94 1a 03 	call	0x634	; 0x634 <conv_int>
 ac0:	81 11       	cpse	r24, r1
 ac2:	05 c0       	rjmp	.+10     	; 0xace <__stack+0x1cf>
 ac4:	f6 01       	movw	r30, r12
 ac6:	83 81       	ldd	r24, Z+3	; 0x03
 ac8:	80 73       	andi	r24, 0x30	; 48
 aca:	29 f4       	brne	.+10     	; 0xad6 <__stack+0x1d7>
 acc:	06 c0       	rjmp	.+12     	; 0xada <__stack+0x1db>
 ace:	00 fd       	sbrc	r16, 0
 ad0:	05 cf       	rjmp	.-502    	; 0x8dc <vfscanf+0x32>
 ad2:	73 94       	inc	r7
 ad4:	03 cf       	rjmp	.-506    	; 0x8dc <vfscanf+0x32>
 ad6:	77 20       	and	r7, r7
 ad8:	19 f0       	breq	.+6      	; 0xae0 <__stack+0x1e1>
 ada:	87 2d       	mov	r24, r7
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <__stack+0x1e5>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	0f 90       	pop	r0
 ae6:	df 91       	pop	r29
 ae8:	cf 91       	pop	r28
 aea:	1f 91       	pop	r17
 aec:	0f 91       	pop	r16
 aee:	ff 90       	pop	r15
 af0:	ef 90       	pop	r14
 af2:	df 90       	pop	r13
 af4:	cf 90       	pop	r12
 af6:	bf 90       	pop	r11
 af8:	af 90       	pop	r10
 afa:	9f 90       	pop	r9
 afc:	8f 90       	pop	r8
 afe:	7f 90       	pop	r7
 b00:	5f 90       	pop	r5
 b02:	4f 90       	pop	r4
 b04:	08 95       	ret

00000b06 <isspace>:
 b06:	91 11       	cpse	r25, r1
 b08:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__ctype_isfalse>
 b0c:	80 32       	cpi	r24, 0x20	; 32
 b0e:	19 f0       	breq	.+6      	; 0xb16 <isspace+0x10>
 b10:	89 50       	subi	r24, 0x09	; 9
 b12:	85 50       	subi	r24, 0x05	; 5
 b14:	c8 f7       	brcc	.-14     	; 0xb08 <isspace+0x2>
 b16:	08 95       	ret

00000b18 <strchr_P>:
 b18:	fc 01       	movw	r30, r24
 b1a:	05 90       	lpm	r0, Z+
 b1c:	06 16       	cp	r0, r22
 b1e:	21 f0       	breq	.+8      	; 0xb28 <strchr_P+0x10>
 b20:	00 20       	and	r0, r0
 b22:	d9 f7       	brne	.-10     	; 0xb1a <strchr_P+0x2>
 b24:	c0 01       	movw	r24, r0
 b26:	08 95       	ret
 b28:	31 97       	sbiw	r30, 0x01	; 1
 b2a:	cf 01       	movw	r24, r30
 b2c:	08 95       	ret

00000b2e <fgetc>:
 b2e:	cf 93       	push	r28
 b30:	df 93       	push	r29
 b32:	ec 01       	movw	r28, r24
 b34:	2b 81       	ldd	r18, Y+3	; 0x03
 b36:	20 ff       	sbrs	r18, 0
 b38:	33 c0       	rjmp	.+102    	; 0xba0 <fgetc+0x72>
 b3a:	26 ff       	sbrs	r18, 6
 b3c:	0a c0       	rjmp	.+20     	; 0xb52 <fgetc+0x24>
 b3e:	2f 7b       	andi	r18, 0xBF	; 191
 b40:	2b 83       	std	Y+3, r18	; 0x03
 b42:	8e 81       	ldd	r24, Y+6	; 0x06
 b44:	9f 81       	ldd	r25, Y+7	; 0x07
 b46:	01 96       	adiw	r24, 0x01	; 1
 b48:	9f 83       	std	Y+7, r25	; 0x07
 b4a:	8e 83       	std	Y+6, r24	; 0x06
 b4c:	8a 81       	ldd	r24, Y+2	; 0x02
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	29 c0       	rjmp	.+82     	; 0xba4 <fgetc+0x76>
 b52:	22 ff       	sbrs	r18, 2
 b54:	0f c0       	rjmp	.+30     	; 0xb74 <fgetc+0x46>
 b56:	e8 81       	ld	r30, Y
 b58:	f9 81       	ldd	r31, Y+1	; 0x01
 b5a:	80 81       	ld	r24, Z
 b5c:	08 2e       	mov	r0, r24
 b5e:	00 0c       	add	r0, r0
 b60:	99 0b       	sbc	r25, r25
 b62:	00 97       	sbiw	r24, 0x00	; 0
 b64:	19 f4       	brne	.+6      	; 0xb6c <fgetc+0x3e>
 b66:	20 62       	ori	r18, 0x20	; 32
 b68:	2b 83       	std	Y+3, r18	; 0x03
 b6a:	1a c0       	rjmp	.+52     	; 0xba0 <fgetc+0x72>
 b6c:	31 96       	adiw	r30, 0x01	; 1
 b6e:	f9 83       	std	Y+1, r31	; 0x01
 b70:	e8 83       	st	Y, r30
 b72:	0e c0       	rjmp	.+28     	; 0xb90 <fgetc+0x62>
 b74:	ea 85       	ldd	r30, Y+10	; 0x0a
 b76:	fb 85       	ldd	r31, Y+11	; 0x0b
 b78:	09 95       	icall
 b7a:	97 ff       	sbrs	r25, 7
 b7c:	09 c0       	rjmp	.+18     	; 0xb90 <fgetc+0x62>
 b7e:	2b 81       	ldd	r18, Y+3	; 0x03
 b80:	01 96       	adiw	r24, 0x01	; 1
 b82:	11 f0       	breq	.+4      	; 0xb88 <fgetc+0x5a>
 b84:	80 e2       	ldi	r24, 0x20	; 32
 b86:	01 c0       	rjmp	.+2      	; 0xb8a <fgetc+0x5c>
 b88:	80 e1       	ldi	r24, 0x10	; 16
 b8a:	82 2b       	or	r24, r18
 b8c:	8b 83       	std	Y+3, r24	; 0x03
 b8e:	08 c0       	rjmp	.+16     	; 0xba0 <fgetc+0x72>
 b90:	2e 81       	ldd	r18, Y+6	; 0x06
 b92:	3f 81       	ldd	r19, Y+7	; 0x07
 b94:	2f 5f       	subi	r18, 0xFF	; 255
 b96:	3f 4f       	sbci	r19, 0xFF	; 255
 b98:	3f 83       	std	Y+7, r19	; 0x07
 b9a:	2e 83       	std	Y+6, r18	; 0x06
 b9c:	99 27       	eor	r25, r25
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <fgetc+0x76>
 ba0:	8f ef       	ldi	r24, 0xFF	; 255
 ba2:	9f ef       	ldi	r25, 0xFF	; 255
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	08 95       	ret

00000baa <ungetc>:
 baa:	fb 01       	movw	r30, r22
 bac:	23 81       	ldd	r18, Z+3	; 0x03
 bae:	20 ff       	sbrs	r18, 0
 bb0:	12 c0       	rjmp	.+36     	; 0xbd6 <ungetc+0x2c>
 bb2:	26 fd       	sbrc	r18, 6
 bb4:	10 c0       	rjmp	.+32     	; 0xbd6 <ungetc+0x2c>
 bb6:	8f 3f       	cpi	r24, 0xFF	; 255
 bb8:	3f ef       	ldi	r19, 0xFF	; 255
 bba:	93 07       	cpc	r25, r19
 bbc:	61 f0       	breq	.+24     	; 0xbd6 <ungetc+0x2c>
 bbe:	82 83       	std	Z+2, r24	; 0x02
 bc0:	2f 7d       	andi	r18, 0xDF	; 223
 bc2:	20 64       	ori	r18, 0x40	; 64
 bc4:	23 83       	std	Z+3, r18	; 0x03
 bc6:	26 81       	ldd	r18, Z+6	; 0x06
 bc8:	37 81       	ldd	r19, Z+7	; 0x07
 bca:	21 50       	subi	r18, 0x01	; 1
 bcc:	31 09       	sbc	r19, r1
 bce:	37 83       	std	Z+7, r19	; 0x07
 bd0:	26 83       	std	Z+6, r18	; 0x06
 bd2:	99 27       	eor	r25, r25
 bd4:	08 95       	ret
 bd6:	8f ef       	ldi	r24, 0xFF	; 255
 bd8:	9f ef       	ldi	r25, 0xFF	; 255
 bda:	08 95       	ret

00000bdc <__ctype_isfalse>:
 bdc:	99 27       	eor	r25, r25
 bde:	88 27       	eor	r24, r24

00000be0 <__ctype_istrue>:
 be0:	08 95       	ret

00000be2 <__prologue_saves__>:
 be2:	2f 92       	push	r2
 be4:	3f 92       	push	r3
 be6:	4f 92       	push	r4
 be8:	5f 92       	push	r5
 bea:	6f 92       	push	r6
 bec:	7f 92       	push	r7
 bee:	8f 92       	push	r8
 bf0:	9f 92       	push	r9
 bf2:	af 92       	push	r10
 bf4:	bf 92       	push	r11
 bf6:	cf 92       	push	r12
 bf8:	df 92       	push	r13
 bfa:	ef 92       	push	r14
 bfc:	ff 92       	push	r15
 bfe:	0f 93       	push	r16
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	df 93       	push	r29
 c06:	cd b7       	in	r28, 0x3d	; 61
 c08:	de b7       	in	r29, 0x3e	; 62
 c0a:	ca 1b       	sub	r28, r26
 c0c:	db 0b       	sbc	r29, r27
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	09 94       	ijmp

00000c1a <__epilogue_restores__>:
 c1a:	2a 88       	ldd	r2, Y+18	; 0x12
 c1c:	39 88       	ldd	r3, Y+17	; 0x11
 c1e:	48 88       	ldd	r4, Y+16	; 0x10
 c20:	5f 84       	ldd	r5, Y+15	; 0x0f
 c22:	6e 84       	ldd	r6, Y+14	; 0x0e
 c24:	7d 84       	ldd	r7, Y+13	; 0x0d
 c26:	8c 84       	ldd	r8, Y+12	; 0x0c
 c28:	9b 84       	ldd	r9, Y+11	; 0x0b
 c2a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c2c:	b9 84       	ldd	r11, Y+9	; 0x09
 c2e:	c8 84       	ldd	r12, Y+8	; 0x08
 c30:	df 80       	ldd	r13, Y+7	; 0x07
 c32:	ee 80       	ldd	r14, Y+6	; 0x06
 c34:	fd 80       	ldd	r15, Y+5	; 0x05
 c36:	0c 81       	ldd	r16, Y+4	; 0x04
 c38:	1b 81       	ldd	r17, Y+3	; 0x03
 c3a:	aa 81       	ldd	r26, Y+2	; 0x02
 c3c:	b9 81       	ldd	r27, Y+1	; 0x01
 c3e:	ce 0f       	add	r28, r30
 c40:	d1 1d       	adc	r29, r1
 c42:	0f b6       	in	r0, 0x3f	; 63
 c44:	f8 94       	cli
 c46:	de bf       	out	0x3e, r29	; 62
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	cd bf       	out	0x3d, r28	; 61
 c4c:	ed 01       	movw	r28, r26
 c4e:	08 95       	ret

00000c50 <_exit>:
 c50:	f8 94       	cli

00000c52 <__stop_program>:
 c52:	ff cf       	rjmp	.-2      	; 0xc52 <__stop_program>
